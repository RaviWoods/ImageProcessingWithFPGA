// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-029
//  Generated date: Mon May 11 14:23:03 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    static_anaglyph_core
// ------------------------------------------------------------------


module static_anaglyph_core (
  clk, en, arst_n, video_in_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d, avg_rsc_mgc_in_wire_d,
      div_mgc_div_b, div_mgc_div_z, div_mgc_div_1_b, div_mgc_div_1_z
);
  input clk;
  input en;
  input arst_n;
  input [599:0] video_in_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  reg [29:0] video_out_rsc_mgc_out_stdreg_d;
  input [9:0] avg_rsc_mgc_in_wire_d;
  output [9:0] div_mgc_div_b;
  reg [9:0] div_mgc_div_b;
  input [9:0] div_mgc_div_z;
  output [9:0] div_mgc_div_1_b;
  reg [9:0] div_mgc_div_1_b;
  input [9:0] div_mgc_div_1_z;


  // Interconnect Declarations
  reg [5:0] shift_1_sva_2;
  wire [6:0] nl_shift_1_sva_2;
  reg [599:0] io_read_video_in_rsc_d_cse_sva_1;
  reg [599:0] io_read_video_in_rsc_d_cse_sva_2;
  reg slc_svs_2;
  reg [9:0] acc_5_cse_sva_mut_3;
  reg [1:0] if_acc_3_itm_1;
  wire [2:0] nl_if_acc_3_itm_1;
  reg [5:0] if_slc_conc_idiv_5_itm_1;
  reg div_2cyc_st_1;
  reg div_2cyc_st_2;
  reg slc_svs_st_1;
  reg main_stage_0_2;
  reg main_stage_0_3;
  wire [9:0] rshift_itm;
  wire [9:0] rshift_4_itm;
  wire [9:0] rshift_2_itm;
  wire [9:0] rshift_5_itm;
  wire [11:0] left_adjust_sg1_sva;
  wire [12:0] nl_left_adjust_sg1_sva;
  wire [12:0] acc_20_psp_sva;
  wire [13:0] nl_acc_20_psp_sva;
  wire [1:0] shift_sg1_lpi_dfm;
  wire [5:0] shift_1_lpi_dfm_mx0;
  wire [7:0] ac_int_cctor_1_sva;
  wire [8:0] nl_ac_int_cctor_1_sva;
  wire [11:0] acc_idiv_sva;
  wire [12:0] nl_acc_idiv_sva;
  wire [3:0] acc_imod_sva;
  wire [4:0] nl_acc_imod_sva;
  wire [2:0] acc_imod_1_sva;
  wire [3:0] nl_acc_imod_1_sva;
  wire [10:0] if_acc_psp_sva;
  wire [11:0] nl_if_acc_psp_sva;
  wire [10:0] acc_36_itm;
  wire [11:0] nl_acc_36_itm;

  wire[7:0] mux_1_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [12:0] nl_rshift_rg_s;
  assign nl_rshift_rg_s = {((left_adjust_sg1_sva[11:1]) + 11'b101) , (left_adjust_sg1_sva[0])
      , 1'b0};
  wire [16:0] nl_rshift_4_rg_s;
  assign nl_rshift_4_rg_s = {(conv_u2u_15_16({{2{acc_20_psp_sva[12]}}, acc_20_psp_sva})
      + 16'b101) , 1'b0};
  wire [12:0] nl_rshift_2_rg_s;
  assign nl_rshift_2_rg_s = {left_adjust_sg1_sva , 1'b0};
  wire [15:0] nl_rshift_5_rg_s;
  assign nl_rshift_5_rg_s = signext_16_14({acc_20_psp_sva , 1'b0});
  mgc_shift_r #(.width_a(600),
  .signd_a(0),
  .width_s(13),
  .width_z(10)) rshift_rg (
      .a(io_read_video_in_rsc_d_cse_sva_2),
      .s(nl_rshift_rg_s),
      .z(rshift_itm)
    );
  mgc_shift_r #(.width_a(600),
  .signd_a(0),
  .width_s(17),
  .width_z(10)) rshift_4_rg (
      .a(io_read_video_in_rsc_d_cse_sva_2),
      .s(nl_rshift_4_rg_s),
      .z(rshift_4_itm)
    );
  mgc_shift_r #(.width_a(600),
  .signd_a(0),
  .width_s(13),
  .width_z(10)) rshift_2_rg (
      .a(io_read_video_in_rsc_d_cse_sva_2),
      .s(nl_rshift_2_rg_s),
      .z(rshift_2_itm)
    );
  mgc_shift_r #(.width_a(600),
  .signd_a(0),
  .width_s(16),
  .width_z(10)) rshift_5_rg (
      .a(io_read_video_in_rsc_d_cse_sva_2),
      .s(nl_rshift_5_rg_s),
      .z(rshift_5_itm)
    );
  assign nl_left_adjust_sg1_sva = conv_s2u_9_12({1'b1 , (~ shift_sg1_lpi_dfm) , (~
      shift_1_lpi_dfm_mx0)}) + ({shift_sg1_lpi_dfm , shift_1_lpi_dfm_mx0 , 4'b1});
  assign left_adjust_sg1_sva = nl_left_adjust_sg1_sva[11:0];
  assign nl_acc_20_psp_sva = ({1'b1 , (~ left_adjust_sg1_sva)}) + 13'b100101101;
  assign acc_20_psp_sva = nl_acc_20_psp_sva[12:0];
  assign shift_sg1_lpi_dfm = (ac_int_cctor_1_sva[7:6]) & (signext_2_1(~ slc_svs_2));
  assign shift_1_lpi_dfm_mx0 = MUX_v_6_2_2({(ac_int_cctor_1_sva[5:0]) , shift_1_sva_2},
      slc_svs_2);
  assign mux_1_nl = MUX_v_8_2_2({(div_mgc_div_1_z[7:0]) , (div_mgc_div_z[7:0])},
      div_2cyc_st_2);
  assign nl_ac_int_cctor_1_sva = (~ (mux_1_nl)) + 8'b1011;
  assign ac_int_cctor_1_sva = nl_ac_int_cctor_1_sva[7:0];
  assign nl_acc_36_itm = ({(acc_idiv_sva[11]) , (readslicef_10_9_1((conv_u2u_9_10({(acc_idiv_sva[11])
      , 1'b0 , (acc_idiv_sva[11]) , 1'b0 , (acc_idiv_sva[11]) , 1'b0 , (signext_2_1(acc_idiv_sva[11]))
      , 1'b1}) + conv_u2u_9_10({(readslicef_9_8_1((({(acc_idiv_sva[9]) , 1'b0 , (acc_idiv_sva[9])
      , 1'b0 , (acc_idiv_sva[9]) , 1'b0 , (signext_2_1(acc_idiv_sva[9])) , 1'b1})
      + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(acc_idiv_sva[7]) , 1'b0 ,
      (acc_idiv_sva[7]) , 1'b0 , (signext_2_1(acc_idiv_sva[7])) , 1'b1}) + conv_u2u_6_8({(acc_idiv_sva[6])
      , 1'b0 , (acc_idiv_sva[6]) , 1'b0 , (acc_idiv_sva[6]) , (acc_idiv_sva[4])}))))
      , (acc_imod_sva[2])})))) , (acc_imod_1_sva[1])})))) , 1'b1}) + ({(readslicef_11_10_1((conv_u2s_10_11({(acc_idiv_sva[10])
      , 1'b0 , (acc_idiv_sva[10]) , 1'b0 , (acc_idiv_sva[10]) , 1'b0 , (acc_idiv_sva[10])
      , 1'b0 , (acc_idiv_sva[10]) , 1'b1}) + conv_s2s_9_11({(readslicef_9_8_1((conv_u2s_8_9({(acc_idiv_sva[8])
      , 1'b0 , (acc_idiv_sva[8]) , 1'b0 , (acc_idiv_sva[8]) , 1'b0 , (acc_idiv_sva[8])
      , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((({1'b1
      , (acc_idiv_sva[4:3]) , (acc_idiv_sva[1]) , 1'b1}) + conv_u2s_4_5({(~ (acc_imod_sva[3]))
      , 1'b1 , (~ (acc_imod_1_sva[2])) , (acc_idiv_sva[2])})))) , 1'b1}) + conv_u2s_5_7({(acc_idiv_sva[5])
      , 1'b0 , (signext_2_1(acc_idiv_sva[5])) , (acc_idiv_sva[3])})))) , (acc_imod_sva[1])}))))
      , (acc_imod_sva[3])})))) , (~ (readslicef_3_1_2((({1'b1 , (acc_imod_1_sva[0])
      , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~ (acc_imod_1_sva[2]))})))))});
  assign acc_36_itm = nl_acc_36_itm[10:0];
  assign nl_acc_idiv_sva = conv_u2u_11_12(conv_u2u_10_11(video_in_rsc_mgc_in_wire_d[319:310])
      + conv_u2u_10_11(video_in_rsc_mgc_in_wire_d[329:320])) + conv_u2u_10_12(video_in_rsc_mgc_in_wire_d[309:300]);
  assign acc_idiv_sva = nl_acc_idiv_sva[11:0];
  assign nl_acc_imod_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (acc_idiv_sva[3])) , 1'b1}) + conv_u2u_2_3({(acc_idiv_sva[4]) , (acc_idiv_sva[8])}))))
      , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~ (acc_idiv_sva[5]))
      , 1'b1}) + conv_u2u_2_3({(acc_idiv_sva[6]) , (~ (acc_idiv_sva[7]))})))) , (acc_idiv_sva[10])}))))
      , 1'b1}) + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (acc_idiv_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(acc_idiv_sva[2]) , (~ (acc_idiv_sva[9]))})))) , (~
      (acc_idiv_sva[11]))})))) + ({3'b101 , (acc_idiv_sva[0])});
  assign acc_imod_sva = nl_acc_imod_sva[3:0];
  assign nl_acc_imod_1_sva = conv_s2s_2_3(conv_s2s_1_2(~ (acc_imod_sva[3])) + conv_u2s_1_2(acc_imod_sva[0]))
      + conv_u2s_2_3(conv_u2u_1_2(~ (acc_imod_sva[1])) + conv_u2u_1_2(acc_imod_sva[2]));
  assign acc_imod_1_sva = nl_acc_imod_1_sva[2:0];
  assign nl_if_acc_psp_sva = conv_u2u_8_11(acc_36_itm[10:3]) + conv_u2u_10_11(acc_36_itm[10:1]);
  assign if_acc_psp_sva = nl_if_acc_psp_sva[10:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      video_out_rsc_mgc_out_stdreg_d <= 30'b0;
      io_read_video_in_rsc_d_cse_sva_2 <= 600'b0;
      shift_1_sva_2 <= 6'b0;
      slc_svs_2 <= 1'b0;
      div_2cyc_st_2 <= 1'b0;
      div_mgc_div_1_b <= 10'b0;
      div_mgc_div_b <= 10'b0;
      acc_5_cse_sva_mut_3 <= 10'b0;
      slc_svs_st_1 <= 1'b0;
      div_2cyc_st_1 <= 1'b0;
      main_stage_0_2 <= 1'b0;
      main_stage_0_3 <= 1'b0;
      if_acc_3_itm_1 <= 2'b0;
      if_slc_conc_idiv_5_itm_1 <= 6'b0;
      io_read_video_in_rsc_d_cse_sva_1 <= 600'b0;
    end
    else begin
      if ( en ) begin
        video_out_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({video_out_rsc_mgc_out_stdreg_d
            , ({rshift_itm , rshift_4_itm , (readslicef_11_10_1((conv_u2u_10_11(rshift_2_itm)
            + conv_u2u_10_11(rshift_5_itm))))})}, main_stage_0_3);
        io_read_video_in_rsc_d_cse_sva_2 <= io_read_video_in_rsc_d_cse_sva_1;
        shift_1_sva_2 <= nl_shift_1_sva_2[5:0];
        slc_svs_2 <= slc_svs_st_1;
        div_2cyc_st_2 <= div_2cyc_st_1;
        div_mgc_div_1_b <= MUX_v_10_2_2({acc_5_cse_sva_mut_3 , (acc_36_itm[10:1])},
            div_2cyc_st_1);
        div_mgc_div_b <= MUX_v_10_2_2({(acc_36_itm[10:1]) , acc_5_cse_sva_mut_3},
            div_2cyc_st_1);
        acc_5_cse_sva_mut_3 <= acc_36_itm[10:1];
        slc_svs_st_1 <= readslicef_11_1_10((({1'b1 , (~ avg_rsc_mgc_in_wire_d)})
            + 11'b11110001));
        div_2cyc_st_1 <= ~ div_2cyc_st_1;
        main_stage_0_2 <= 1'b1;
        main_stage_0_3 <= main_stage_0_2;
        if_acc_3_itm_1 <= nl_if_acc_3_itm_1[1:0];
        if_slc_conc_idiv_5_itm_1 <= if_acc_psp_sva[10:5];
        io_read_video_in_rsc_d_cse_sva_1 <= video_in_rsc_mgc_in_wire_d;
      end
    end
  end
  assign nl_shift_1_sva_2  = conv_s2u_2_6(if_acc_3_itm_1) + if_slc_conc_idiv_5_itm_1;
  assign nl_if_acc_3_itm_1  = conv_s2s_1_2(readslicef_9_1_8((conv_u2s_8_9({(~ (if_acc_psp_sva[4]))
      , (if_acc_psp_sva[3:0]) , (acc_36_itm[2:1]) , (readslicef_2_1_1((conv_u2u_1_2(if_acc_psp_sva[4])
      + 2'b1)))}) + conv_s2s_8_9({2'b10 , (if_acc_psp_sva[10:5])})))) + conv_u2s_1_2(if_acc_psp_sva[4]);

  function [15:0] signext_16_14;
    input [13:0] vector;
  begin
    signext_16_14= {{2{vector[13]}}, vector};
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_2_1_1;
    input [1:0] vector;
    reg [1:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_2_1_1 = tmp[0:0];
  end
  endfunction


  function  [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_s2u_9_12 ;
    input signed [8:0]  vector ;
  begin
    conv_s2u_9_12 = {{3{vector[8]}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_8_11 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_11 = {{3{1'b0}}, vector};
  end
  endfunction


  function  [5:0] conv_s2u_2_6 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_6 = {{4{vector[1]}}, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_8_9 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_9 = {vector[7], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    static_anaglyph
//  Generated from file(s):
//    3) $PROJECT_HOME/blur.c
// ------------------------------------------------------------------


module static_anaglyph (
  video_in_rsc_z, video_out_rsc_z, avg_rsc_z, clk, en, arst_n
);
  input [599:0] video_in_rsc_z;
  output [29:0] video_out_rsc_z;
  input [9:0] avg_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [599:0] video_in_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;
  wire [9:0] avg_rsc_mgc_in_wire_d;
  wire [9:0] div_mgc_div_b;
  wire [9:0] div_mgc_div_z;
  wire [9:0] div_mgc_div_1_b;
  wire [9:0] div_mgc_div_1_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(600)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(10)) avg_rsc_mgc_in_wire (
      .d(avg_rsc_mgc_in_wire_d),
      .z(avg_rsc_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(0)) div_mgc_div (
      .a(10'b11111111),
      .b(div_mgc_div_b),
      .z(div_mgc_div_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(0)) div_mgc_div_1 (
      .a(10'b11111111),
      .b(div_mgc_div_1_b),
      .z(div_mgc_div_1_z)
    );
  static_anaglyph_core static_anaglyph_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d),
      .avg_rsc_mgc_in_wire_d(avg_rsc_mgc_in_wire_d),
      .div_mgc_div_b(div_mgc_div_b),
      .div_mgc_div_z(div_mgc_div_z),
      .div_mgc_div_1_b(div_mgc_div_1_b),
      .div_mgc_div_1_z(div_mgc_div_1_z)
    );
endmodule



