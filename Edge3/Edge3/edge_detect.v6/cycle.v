// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   rbw14@EEWS104A-013
//  Generated date: Wed May 06 12:33:43 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    edge_detect_core
// ------------------------------------------------------------------


module edge_detect_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [89:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [15:0] redx_lpi_1;
    reg [15:0] redy_lpi_1;
    reg [15:0] greenx_lpi_1;
    reg [15:0] greeny_lpi_1;
    reg [15:0] bluex_lpi_1;
    reg [15:0] bluey_lpi_1;
    reg [15:0] avg_y_1_lpi_1;
    reg [15:0] avg_y_0_lpi_1;
    reg [15:0] avg_y_2_lpi_1;
    reg [15:0] avg_x_1_lpi_1;
    reg [15:0] avg_x_0_lpi_1;
    reg [15:0] avg_x_2_lpi_1;
    reg exit_ACC_GX_1_lpi_1;
    reg exit_SHIFT_lpi_1;
    reg [1:0] FRAME_a_4_lpi_1;
    reg [1:0] FRAME_a_5_lpi_1;
    reg [1:0] FRAME_a_6_lpi_1;
    reg [1:0] FRAME_i_3_lpi_1;
    reg [1:0] FRAME_i_2_lpi_1;
    reg [89:0] regs_regs_1_sva;
    reg [89:0] regs_regs_0_sva;
    reg [89:0] regs_regs_2_sva;
    reg exit_ACC3_sva;
    reg [89:0] regs_operator_din_sva;
    reg [15:0] redx_lpi_1_dfm;
    reg [15:0] greenx_lpi_1_dfm;
    reg [15:0] bluex_lpi_1_dfm;
    reg [15:0] redy_lpi_1_dfm;
    reg [15:0] greeny_lpi_1_dfm;
    reg [15:0] bluey_lpi_1_dfm;
    reg [15:0] avg_x_0_lpi_1_dfm;
    reg [15:0] avg_x_1_lpi_1_dfm;
    reg [15:0] avg_x_2_lpi_1_dfm;
    reg [15:0] avg_y_0_lpi_1_dfm;
    reg [15:0] avg_y_1_lpi_1_dfm;
    reg [15:0] avg_y_2_lpi_1_dfm;
    reg [89:0] regs_operator_din_lpi_1_dfm;
    reg exit_ACC_GX_1_lpi_1_dfm;
    reg exit_SHIFT_lpi_1_dfm;
    reg [15:0] ACC3_slc_avg_x_cse_sva;
    reg [15:0] redx_sva_1;
    reg [15:0] ACC3_slc_avg_y_cse_sva;
    reg [15:0] redy_sva_1;
    reg [15:0] bluex_sva_1;
    reg [15:0] bluey_sva_1;
    reg [15:0] greenx_sva_1;
    reg [15:0] greeny_sva_1;
    reg [1:0] FRAME_a_4_sva;
    reg exit_ACC3_sva_2;
    reg AbsAndMax_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_sva_1;
    reg AbsAndMax_1_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_1_sva_1;
    reg AbsAndMax_2_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_2_sva_1;
    reg AbsAndMax_3_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_3_sva_1;
    reg AbsAndMax_4_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_4_sva_1;
    reg AbsAndMax_5_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_5_sva_1;
    reg [15:0] AbsAndMax_x_6_sva;
    reg AbsAndMax_6_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_6_sva_1;
    reg [15:0] AbsAndMax_x_7_sva;
    reg AbsAndMax_7_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_7_sva_1;
    reg [15:0] AbsAndMax_x_8_sva;
    reg AbsAndMax_8_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_8_sva_1;
    reg [16:0] acc_8_psp_sva;
    reg [4:0] acc_imod_6_sva;
    reg [2:0] acc_imod_7_sva;
    reg [15:0] FRAME_ac_int_cctor_15_sva;
    reg [4:0] ACC_GX_for_acc_11_psp_sva;
    reg [2:0] ACC_GX_for_slc_gx_psp_sva;
    reg [89:0] regs_operator_slc_regs_regs_cse_sva;
    reg [13:0] acc_psp_sva;
    reg [4:0] acc_imod_sva;
    reg [2:0] acc_imod_1_sva;
    reg [1:0] acc_imod_2_sva;
    reg [15:0] ACC_GX_for_acc_24_ctmp_sva;
    reg [1:0] FRAME_a_5_sva;
    reg [4:0] ACC_GY_for_acc_11_psp_sva;
    reg [2:0] ACC_GY_for_slc_gy_psp_sva;
    reg [89:0] regs_operator_3_slc_regs_regs_cse_sva;
    reg [13:0] acc_4_psp_sva;
    reg [4:0] acc_imod_3_sva;
    reg [2:0] acc_imod_4_sva;
    reg [1:0] acc_imod_5_sva;
    reg [15:0] ACC_GY_for_acc_24_ctmp_sva;
    reg [1:0] FRAME_a_6_sva;
    reg exit_ACC_GX_for_sva;
    reg [1:0] FRAME_i_3_sva;
    reg [1:0] FRAME_i_2_sva;
    reg exit_ACC_GX_sva;
    reg [1:0] FRAME_a_5_lpi_1_dfm;
    reg [1:0] FRAME_a_6_lpi_1_dfm;
    reg exit_ACC_GX_1_sva_1;
    reg [1:0] FRAME_a_4_lpi_1_dfm;
    reg unequal_tmp;
    reg [89:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva;
    reg [1:0] FRAME_i_2_lpi_1_dfm_2;
    reg [1:0] FRAME_a_5_lpi_1_dfm_3;
    reg [1:0] FRAME_a_6_lpi_1_dfm_3;
    reg [1:0] FRAME_i_3_lpi_1_dfm_2;
    reg [1:0] SHIFT_acc_1_psp;
    reg ACC_GX_and_6_tmp;
    reg [1:0] SHIFT_i_1_lpi_3;
    reg [1:0] SHIFT_i_1_lpi_1_dfm_2;
    reg [2:0] ACC_GX_for_acc_25_sdt;
    reg [2:0] ACC_GY_for_acc_25_sdt;
    reg SHIFT_nand_cse;
    reg SHIFT_and_32_cse;
    reg ACC_GX_and_2_cse;
    reg SHIFT_and_42_cse;
    reg SHIFT_and_47_cse;
    reg SHIFT_and_48_cse;

    reg[15:0] AbsAndMax_mux1h_nl;
    reg[15:0] AbsAndMax_1_mux1h_nl;
    reg[15:0] AbsAndMax_4_mux1h_nl;
    reg[15:0] AbsAndMax_5_mux1h_nl;
    reg[15:0] AbsAndMax_2_mux1h_nl;
    reg[15:0] AbsAndMax_3_mux1h_nl;
    reg[15:0] AbsAndMax_7_mux1h_nl;
    reg[15:0] AbsAndMax_8_mux1h_nl;
    reg[15:0] AbsAndMax_6_mux1h_nl;
    reg[9:0] ACC_GX_for_mux_9_nl;
    reg[9:0] ACC_GX_for_mux_10_nl;
    reg[15:0] ACC_GX_for_mux_11_nl;
    reg[9:0] ACC_GY_for_mux_3_nl;
    reg[9:0] ACC_GY_for_mux_4_nl;
    reg[15:0] ACC_GY_for_mux_5_nl;
    reg[0:0] ACC_GX_mux_54_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        FRAME_i_2_lpi_1 = 2'b0;
        FRAME_i_3_lpi_1 = 2'b0;
        FRAME_a_6_lpi_1 = 2'b0;
        FRAME_a_5_lpi_1 = 2'b0;
        FRAME_a_4_lpi_1 = 2'b0;
        exit_SHIFT_lpi_1 = 1'b0;
        exit_ACC_GX_1_lpi_1 = 1'b0;
        SHIFT_i_1_lpi_3 = 2'b0;
        avg_x_2_lpi_1 = 16'b0;
        avg_x_0_lpi_1 = 16'b0;
        avg_x_1_lpi_1 = 16'b0;
        avg_y_2_lpi_1 = 16'b0;
        avg_y_0_lpi_1 = 16'b0;
        avg_y_1_lpi_1 = 16'b0;
        bluey_lpi_1 = 16'b0;
        bluex_lpi_1 = 16'b0;
        greeny_lpi_1 = 16'b0;
        greenx_lpi_1 = 16'b0;
        redy_lpi_1 = 16'b0;
        redx_lpi_1 = 16'b0;
        regs_regs_1_sva = 90'b0;
        regs_regs_0_sva = 90'b0;
        regs_regs_2_sva = 90'b0;
        exit_ACC3_sva = 1'b1;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            exit_ACC_GX_sva = 1'b0;
            ACC_GY_for_acc_24_ctmp_sva = 16'b0;
            ACC_GX_for_acc_24_ctmp_sva = 16'b0;
            unequal_tmp = 1'b0;
            SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 90'b0;
            SHIFT_acc_1_psp = 2'b0;
            FRAME_i_3_lpi_1_dfm_2 = 2'b0;
            FRAME_a_6_lpi_1_dfm_3 = 2'b0;
            FRAME_a_5_lpi_1_dfm_3 = 2'b0;
            FRAME_i_2_lpi_1_dfm_2 = 2'b0;
            FRAME_a_4_lpi_1_dfm = 2'b0;
            exit_ACC_GX_1_sva_1 = 1'b0;
            FRAME_a_6_lpi_1_dfm = 2'b0;
            FRAME_a_5_lpi_1_dfm = 2'b0;
            FRAME_i_2_sva = 2'b0;
            FRAME_i_3_sva = 2'b0;
            FRAME_a_6_sva = 2'b0;
            FRAME_a_5_sva = 2'b0;
            AbsAndMax_AbsAndMax_return_8_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_7_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_6_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_5_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_4_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_3_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_1_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_sva_1 = 16'b0;
            exit_ACC3_sva_2 = 1'b0;
            FRAME_a_4_sva = 2'b0;
            greeny_sva_1 = 16'b0;
            greenx_sva_1 = 16'b0;
            bluey_sva_1 = 16'b0;
            bluex_sva_1 = 16'b0;
            redy_sva_1 = 16'b0;
            redx_sva_1 = 16'b0;
            regs_operator_din_sva = 90'b0;
            if ( exit_ACC3_sva ) begin
              regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            end
            redx_lpi_1_dfm = redx_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenx_lpi_1_dfm = greenx_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluex_lpi_1_dfm = bluex_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redy_lpi_1_dfm = redy_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greeny_lpi_1_dfm = greeny_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluey_lpi_1_dfm = bluey_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_x_0_lpi_1_dfm = avg_x_0_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_x_1_lpi_1_dfm = avg_x_1_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_x_2_lpi_1_dfm = avg_x_2_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_y_0_lpi_1_dfm = avg_y_0_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_y_1_lpi_1_dfm = avg_y_1_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            avg_y_2_lpi_1_dfm = avg_y_2_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            regs_operator_din_lpi_1_dfm = MUX_v_90_2_2({regs_operator_din_lpi_1_dfm
                , regs_operator_din_sva}, exit_ACC3_sva);
            SHIFT_i_1_lpi_1_dfm_2 = MUX_v_2_2_2({SHIFT_i_1_lpi_3 , 2'b10}, exit_ACC3_sva);
            exit_ACC_GX_1_lpi_1_dfm = exit_ACC_GX_1_lpi_1 & (~ exit_ACC3_sva);
            exit_SHIFT_lpi_1_dfm = exit_SHIFT_lpi_1 & (~ exit_ACC3_sva);
            if ( exit_SHIFT_lpi_1_dfm ) begin
              if ( exit_ACC_GX_1_lpi_1_dfm ) begin
                ACC3_slc_avg_x_cse_sva = MUX_v_16_4_2({avg_x_0_lpi_1_dfm , avg_x_1_lpi_1_dfm
                    , avg_x_2_lpi_1_dfm , 16'b0}, FRAME_a_4_lpi_1);
                redx_sva_1 = redx_lpi_1_dfm + ACC3_slc_avg_x_cse_sva;
                ACC3_slc_avg_y_cse_sva = MUX_v_16_4_2({avg_y_0_lpi_1_dfm , avg_y_1_lpi_1_dfm
                    , avg_y_2_lpi_1_dfm , 16'b0}, FRAME_a_4_lpi_1);
                redy_sva_1 = redy_lpi_1_dfm + ACC3_slc_avg_y_cse_sva;
                bluex_sva_1 = bluex_lpi_1_dfm + ACC3_slc_avg_x_cse_sva;
                bluey_sva_1 = bluey_lpi_1_dfm + ACC3_slc_avg_y_cse_sva;
                greenx_sva_1 = greenx_lpi_1_dfm + ACC3_slc_avg_x_cse_sva;
                greeny_sva_1 = greeny_lpi_1_dfm + ACC3_slc_avg_y_cse_sva;
                FRAME_a_4_sva = FRAME_a_4_lpi_1 + 2'b1;
                exit_ACC3_sva_2 = ~ (readslicef_3_1_2((({1'b1 , FRAME_a_4_sva}) +
                    3'b1)));
                if ( exit_ACC3_sva_2 ) begin
                  AbsAndMax_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (redx_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_slc_svs ) begin
                  end
                  else if ( redx_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_sva_1 = conv_u2u_15_16(~ (redx_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_1_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (redy_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_1_slc_svs ) begin
                  end
                  else if ( redy_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_1_sva_1 = conv_u2u_15_16(~ (redy_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_2_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (greenx_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_2_slc_svs ) begin
                  end
                  else if ( greenx_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_2_sva_1 = conv_u2u_15_16(~ (greenx_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_3_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (greeny_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_3_slc_svs ) begin
                  end
                  else if ( greeny_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_3_sva_1 = conv_u2u_15_16(~ (greeny_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_4_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (bluex_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_4_slc_svs ) begin
                  end
                  else if ( bluex_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_4_sva_1 = conv_u2u_15_16(~ (bluex_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_5_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (bluey_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_5_slc_svs ) begin
                  end
                  else if ( bluey_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_5_sva_1 = conv_u2u_15_16(~ (bluey_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, redx_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_sva_1 , 16'b1111111111}, {(~((redx_sva_1[15])
                      | AbsAndMax_slc_svs)) , ((redx_sva_1[15]) & (~ AbsAndMax_slc_svs))
                      , AbsAndMax_slc_svs});
                  AbsAndMax_1_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, redy_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_1_sva_1 , 16'b1111111111}, {(~((redy_sva_1[15])
                      | AbsAndMax_1_slc_svs)) , ((redy_sva_1[15]) & (~ AbsAndMax_1_slc_svs))
                      , AbsAndMax_1_slc_svs});
                  AbsAndMax_x_6_sva = (AbsAndMax_mux1h_nl) + (AbsAndMax_1_mux1h_nl);
                  AbsAndMax_6_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (AbsAndMax_x_6_sva[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_6_slc_svs ) begin
                  end
                  else if ( AbsAndMax_x_6_sva[15] ) begin
                    AbsAndMax_AbsAndMax_return_6_sva_1 = conv_u2u_15_16(~ (AbsAndMax_x_6_sva[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_4_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, bluex_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_4_sva_1 , 16'b1111111111}, {(~((bluex_sva_1[15])
                      | AbsAndMax_4_slc_svs)) , ((bluex_sva_1[15]) & (~ AbsAndMax_4_slc_svs))
                      , AbsAndMax_4_slc_svs});
                  AbsAndMax_5_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, bluey_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_5_sva_1 , 16'b1111111111}, {(~((bluey_sva_1[15])
                      | AbsAndMax_5_slc_svs)) , ((bluey_sva_1[15]) & (~ AbsAndMax_5_slc_svs))
                      , AbsAndMax_5_slc_svs});
                  AbsAndMax_x_7_sva = (AbsAndMax_4_mux1h_nl) + (AbsAndMax_5_mux1h_nl);
                  AbsAndMax_7_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (AbsAndMax_x_7_sva[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_7_slc_svs ) begin
                  end
                  else if ( AbsAndMax_x_7_sva[15] ) begin
                    AbsAndMax_AbsAndMax_return_7_sva_1 = conv_u2u_15_16(~ (AbsAndMax_x_7_sva[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_2_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, greenx_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_2_sva_1 , 16'b1111111111}, {(~((greenx_sva_1[15])
                      | AbsAndMax_2_slc_svs)) , ((greenx_sva_1[15]) & (~ AbsAndMax_2_slc_svs))
                      , AbsAndMax_2_slc_svs});
                  AbsAndMax_3_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0, greeny_sva_1[9:0]})
                      , AbsAndMax_AbsAndMax_return_3_sva_1 , 16'b1111111111}, {(~((greeny_sva_1[15])
                      | AbsAndMax_3_slc_svs)) , ((greeny_sva_1[15]) & (~ AbsAndMax_3_slc_svs))
                      , AbsAndMax_3_slc_svs});
                  AbsAndMax_x_8_sva = (AbsAndMax_2_mux1h_nl) + (AbsAndMax_3_mux1h_nl);
                  AbsAndMax_8_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (AbsAndMax_x_8_sva[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_8_slc_svs ) begin
                  end
                  else if ( AbsAndMax_x_8_sva[15] ) begin
                    AbsAndMax_AbsAndMax_return_8_sva_1 = conv_u2u_15_16(~ (AbsAndMax_x_8_sva[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_7_mux1h_nl = MUX1HOT_v_16_3_2({AbsAndMax_AbsAndMax_return_7_sva_1
                      , ({6'b0, AbsAndMax_x_7_sva[9:0]}) , 16'b1111111111}, {((AbsAndMax_x_7_sva[15])
                      & (~ AbsAndMax_7_slc_svs)) , (~((AbsAndMax_x_7_sva[15]) | AbsAndMax_7_slc_svs))
                      , AbsAndMax_7_slc_svs});
                  AbsAndMax_8_mux1h_nl = MUX1HOT_v_16_3_2({AbsAndMax_AbsAndMax_return_8_sva_1
                      , ({6'b0, AbsAndMax_x_8_sva[9:0]}) , 16'b1111111111}, {((AbsAndMax_x_8_sva[15])
                      & (~ AbsAndMax_8_slc_svs)) , (~((AbsAndMax_x_8_sva[15]) | AbsAndMax_8_slc_svs))
                      , AbsAndMax_8_slc_svs});
                  AbsAndMax_6_mux1h_nl = MUX1HOT_v_16_3_2({AbsAndMax_AbsAndMax_return_6_sva_1
                      , ({6'b0, AbsAndMax_x_6_sva[9:0]}) , 16'b1111111111}, {((AbsAndMax_x_6_sva[15])
                      & (~ AbsAndMax_6_slc_svs)) , (~((AbsAndMax_x_6_sva[15]) | AbsAndMax_6_slc_svs))
                      , AbsAndMax_6_slc_svs});
                  acc_8_psp_sva = (conv_u2u_16_17(AbsAndMax_7_mux1h_nl) + conv_u2u_16_17(AbsAndMax_8_mux1h_nl))
                      + conv_u2u_16_17(AbsAndMax_6_mux1h_nl);
                  acc_imod_6_sva = readslicef_6_5_1((conv_u2s_5_6({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                      (acc_8_psp_sva[1])) , 1'b1}) + conv_u2u_2_3({(acc_8_psp_sva[2])
                      , (acc_8_psp_sva[12])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                      (acc_8_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(acc_8_psp_sva[4])
                      , (~ (acc_8_psp_sva[11]))})))) , (acc_8_psp_sva[14])})))) ,
                      1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                      (acc_8_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(acc_8_psp_sva[6])
                      , (acc_8_psp_sva[10])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
                      (acc_8_psp_sva[7])) , 1'b1}) + conv_u2u_2_3({(acc_8_psp_sva[8])
                      , (~ (acc_8_psp_sva[9]))})))) , (~ (acc_8_psp_sva[13]))}))))
                      , (~ (acc_8_psp_sva[15]))})))) , 1'b1}) + conv_s2s_5_6({3'b100
                      , (acc_8_psp_sva[0]) , (acc_8_psp_sva[16])})));
                  acc_imod_7_sva = (readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_imod_6_sva[2])
                      , 1'b1}) + conv_u2u_2_3({(~ (acc_imod_6_sva[3])) , 1'b1}))))
                      , 1'b1}) + conv_u2u_2_4({(~ (acc_imod_6_sva[1])) , (~ (acc_imod_6_sva[4]))}))))
                      + ({2'b10 , (acc_imod_6_sva[0])});
                  FRAME_ac_int_cctor_15_sva = (conv_u2u_15_16({(acc_8_psp_sva[16])
                      , 1'b0 , (acc_8_psp_sva[16]) , 1'b0 , (acc_8_psp_sva[16]) ,
                      1'b0 , (acc_8_psp_sva[16]) , 1'b0 , (acc_8_psp_sva[16]) , 1'b0
                      , (acc_8_psp_sva[16]) , 1'b0 , (acc_8_psp_sva[16]) , 1'b0 ,
                      (acc_8_psp_sva[16])}) + conv_u2u_14_16({(acc_8_psp_sva[15])
                      , 1'b0 , (acc_8_psp_sva[15]) , 1'b0 , (acc_8_psp_sva[15]) ,
                      1'b0 , (acc_8_psp_sva[15]) , 1'b0 , (acc_8_psp_sva[15]) , 1'b0
                      , (acc_8_psp_sva[15]) , 1'b0 , (signext_2_1(acc_8_psp_sva[15]))}))
                      + conv_s2u_15_16(conv_u2s_13_15({(acc_8_psp_sva[14]) , (conv_u2u_24_12(conv_u2u_2_12(conv_u2u_1_2(acc_8_psp_sva[12])
                      + conv_u2u_1_2(acc_8_psp_sva[14])) * 12'b10101010101) + conv_u2u_9_12({(acc_8_psp_sva[10])
                      , (readslicef_9_8_1((conv_u2u_8_9({(acc_8_psp_sva[10]) , 1'b0
                      , (acc_8_psp_sva[10]) , 1'b0 , (acc_8_psp_sva[10]) , 1'b0 ,
                      (acc_8_psp_sva[10]) , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((({(acc_8_psp_sva[8])
                      , 1'b0 , (acc_8_psp_sva[8]) , 1'b0 , (acc_8_psp_sva[8]) , 1'b0
                      , (acc_8_psp_sva[8]) , 1'b1}) + conv_u2u_7_8({(readslicef_7_6_1((conv_u2u_6_7({(readslicef_6_5_1((conv_u2u_5_6({(acc_8_psp_sva[5])
                      , 1'b0 , (signext_2_1(acc_8_psp_sva[5])) , 1'b1}) + conv_u2u_4_6({(acc_8_psp_sva[4:2])
                      , (acc_8_psp_sva[4])})))) , 1'b1}) + conv_u2u_6_7({(acc_8_psp_sva[6])
                      , 1'b0 , (acc_8_psp_sva[6]) , 1'b0 , (acc_8_psp_sva[6]) , (acc_imod_6_sva[2])}))))
                      , (acc_imod_7_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1 ,
                      (acc_imod_7_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_7_sva[1]))
                      , (~ (acc_imod_7_sva[2]))})))))}))))}))}) + conv_s2s_13_15(conv_u2s_12_13({(acc_8_psp_sva[13])
                      , 1'b0 , (acc_8_psp_sva[13]) , 1'b0 , (acc_8_psp_sva[13]) ,
                      1'b0 , (acc_8_psp_sva[13]) , 1'b0 , (acc_8_psp_sva[13]) , 1'b0
                      , (signext_2_1(acc_8_psp_sva[13]))}) + conv_s2s_11_13(conv_u2s_10_11({(acc_8_psp_sva[11])
                      , 1'b0 , (acc_8_psp_sva[11]) , 1'b0 , (acc_8_psp_sva[11]) ,
                      1'b0 , (acc_8_psp_sva[11]) , 1'b0 , (signext_2_1(acc_8_psp_sva[11]))})
                      + conv_s2s_9_11(readslicef_10_9_1((conv_u2s_9_10({(acc_8_psp_sva[9])
                      , 1'b0 , (acc_8_psp_sva[9]) , 1'b0 , (acc_8_psp_sva[9]) , 1'b0
                      , (signext_2_1(acc_8_psp_sva[9])) , 1'b1}) + conv_s2s_8_10({(readslicef_8_7_1((conv_u2s_7_8({(acc_8_psp_sva[7])
                      , 1'b0 , (acc_8_psp_sva[7]) , 1'b0 , (signext_2_1(acc_8_psp_sva[7]))
                      , 1'b1}) + conv_s2s_5_8({(readslicef_5_4_1((conv_u2s_4_5({2'b11
                      , (acc_8_psp_sva[3]) , 1'b1}) + ({(readslicef_5_4_1((conv_u2u_4_5({(~
                      (acc_imod_6_sva[4])) , 1'b1 , (~ (acc_imod_6_sva[4])) , 1'b1})
                      + conv_u2u_3_5({(acc_imod_6_sva[3]) , (acc_8_psp_sva[1]) ,
                      1'b1})))) , (acc_imod_6_sva[1])})))) , (acc_imod_6_sva[3])}))))
                      , (~ (acc_imod_7_sva[2]))})))))));
                  vout_rsc_mgc_out_stdreg_d <= {((FRAME_ac_int_cctor_15_sva[9:0])
                      | ({4'b0, FRAME_ac_int_cctor_15_sva[15:10]})) , (FRAME_ac_int_cctor_15_sva[9:6])
                      , ((FRAME_ac_int_cctor_15_sva[5:0]) | (FRAME_ac_int_cctor_15_sva[15:10]))
                      , (FRAME_ac_int_cctor_15_sva[9:0])};
                end
              end
              else begin
                ACC_GX_for_acc_11_psp_sva = conv_s2u_3_5({1'b1 , (~ FRAME_a_5_lpi_1)})
                    + ({(FRAME_a_5_lpi_1[0]) , 4'b1});
                ACC_GX_for_acc_25_sdt = conv_u2u_2_3(FRAME_a_5_lpi_1) + conv_u2u_2_3(FRAME_i_3_lpi_1);
                ACC_GX_for_slc_gx_psp_sva = MUX_v_3_16_2({3'b111 , 3'b0 , 3'b1 ,
                    3'b110 , 3'b0 , 3'b10 , 3'b111 , 3'b0 , 3'b1 , 3'b0 , 3'b0 ,
                    3'b0 , 3'b0 , 3'b0 , 3'b0 , 3'b0}, {(conv_u2u_2_3(ACC_GX_for_acc_25_sdt[2:1])
                    + conv_u2u_2_3(FRAME_i_3_lpi_1)) , (ACC_GX_for_acc_25_sdt[0])});
                regs_operator_slc_regs_regs_cse_sva = MUX_v_90_4_2({regs_regs_0_sva
                    , regs_regs_1_sva , regs_regs_2_sva , 90'b0}, FRAME_i_3_lpi_1);
                ACC_GX_for_mux_9_nl = MUX_v_10_32_2({10'b0 , 10'b0 , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[79:70])
                    , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[19:10]) , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[47:38])
                    , (regs_operator_slc_regs_regs_cse_sva[49:40]) , (regs_operator_slc_regs_regs_cse_sva[51:42])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0}, ACC_GX_for_acc_11_psp_sva + 5'b101);
                ACC_GX_for_mux_10_nl = MUX_v_10_32_2({(regs_operator_slc_regs_regs_cse_sva[9:0])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[37:28])
                    , (regs_operator_slc_regs_regs_cse_sva[39:30]) , (regs_operator_slc_regs_regs_cse_sva[41:32])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[69:60])
                    , 10'b0}, ACC_GX_for_acc_11_psp_sva);
                acc_psp_sva = conv_s2s_13_14(conv_s2s_12_13(conv_s2s_24_12(conv_s2s_3_12(ACC_GX_for_slc_gx_psp_sva)
                    * conv_u2s_10_12(ACC_GX_for_mux_9_nl))) + conv_s2s_12_13(conv_s2s_24_12(conv_s2s_3_12(ACC_GX_for_slc_gx_psp_sva)
                    * conv_u2s_10_12(fslr_10_90_7(regs_operator_slc_regs_regs_cse_sva,
                    ({(conv_u2u_4_5(ACC_GX_for_acc_11_psp_sva[4:1]) + 5'b101) , (ACC_GX_for_acc_11_psp_sva[0])
                    , 1'b0})))))) + conv_s2s_12_14(conv_s2s_24_12(conv_s2s_3_12(ACC_GX_for_slc_gx_psp_sva)
                    * conv_u2s_10_12(ACC_GX_for_mux_10_nl)));
                acc_imod_sva = conv_u2s_4_5(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_psp_sva[2])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_psp_sva[3])) , (acc_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_psp_sva[4])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_psp_sva[5])) , (~ (acc_psp_sva[9]))}))))
                    , (acc_psp_sva[12])})))) , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_psp_sva[6])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_psp_sva[7])) , (acc_psp_sva[8])}))))
                    , 1'b1}) + conv_u2u_2_4({(~ (acc_psp_sva[1])) , (~ (acc_psp_sva[11]))}))))
                    , (acc_psp_sva[13])})))) + conv_s2s_4_5({3'b101 , (acc_psp_sva[0])});
                acc_imod_1_sva = (readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_imod_sva[2])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_imod_sva[3])) , 1'b1})))) ,
                    1'b1}) + conv_u2u_2_4({(~ (acc_imod_sva[1])) , (~ (acc_imod_sva[4]))}))))
                    + ({2'b10 , (acc_imod_sva[0])});
                acc_imod_2_sva = readslicef_3_2_1((({1'b1 , (acc_imod_1_sva[0]) ,
                    1'b1}) + conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~ (acc_imod_1_sva[2]))})));
                ACC_GX_for_mux_11_nl = MUX_v_16_4_2({avg_x_0_lpi_1_dfm , avg_x_1_lpi_1_dfm
                    , avg_x_2_lpi_1_dfm , 16'b0}, FRAME_a_5_lpi_1);
                ACC_GX_for_acc_24_ctmp_sva = conv_s2s_13_16((conv_s2s_12_13(conv_u2s_10_12(({(acc_psp_sva[11])
                    , 1'b0 , (acc_psp_sva[11]) , 1'b0 , (acc_psp_sva[11]) , 1'b0
                    , (acc_psp_sva[11]) , 1'b0 , (signext_2_1(acc_psp_sva[13]))})
                    + conv_u2u_9_10(conv_u2u_8_9({(acc_psp_sva[9]) , 1'b0 , (acc_psp_sva[9])
                    , 1'b0 , (acc_psp_sva[9]) , 1'b0 , (signext_2_1(acc_psp_sva[13]))})
                    + conv_u2u_7_9({(acc_psp_sva[8]) , 1'b0 , (acc_psp_sva[8]) ,
                    1'b0 , (acc_psp_sva[8]) , 1'b0 , (acc_psp_sva[8])}))) + conv_s2s_10_12(conv_u2s_9_10({(acc_psp_sva[10])
                    , 1'b0 , (acc_psp_sva[10]) , 1'b0 , (acc_psp_sva[10]) , 1'b0
                    , (acc_psp_sva[10]) , 1'b0 , (acc_psp_sva[10])}) + conv_s2s_8_10(conv_u2s_6_8(conv_u2u_5_6(readslicef_6_5_1((conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_psp_sva[5])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_psp_sva[7]) , (acc_imod_sva[2])})))))
                    , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_psp_sva[9])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_psp_sva[11]) , (acc_imod_sva[1])})))))
                    , (~ (acc_imod_1_sva[2]))})))) , 1'b1}) + conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_psp_sva[13])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_psp_sva[13]) , (acc_psp_sva[4])})))))
                    , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(acc_psp_sva[3])
                    , (acc_psp_sva[1]) , 1'b1}) + conv_u2u_3_4({(acc_imod_sva[3])
                    , (acc_psp_sva[2]) , 1'b1})))) , (acc_imod_1_sva[1])})))) , ((acc_psp_sva[13])
                    & (~ (acc_imod_2_sva[1])) & (acc_imod_2_sva[0]))})))) + conv_u2u_5_6(readslicef_6_5_1((conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(~
                    (acc_imod_sva[4])) , 1'b1 , (~ (acc_imod_sva[4])) , 1'b1}) +
                    conv_u2u_3_5(signext_3_2({(acc_psp_sva[13]) , (acc_imod_sva[3])})))))
                    , 1'b1}) + conv_u2u_5_6({(acc_psp_sva[7]) , (acc_psp_sva[4])
                    , (signext_2_1(acc_psp_sva[13])) , (~((acc_imod_2_sva[1]) & (~
                    (acc_psp_sva[13]))))}))))) + conv_s2s_5_8({(~ (acc_psp_sva[6]))
                    , (conv_u2u_3_4({(acc_psp_sva[6]) , 1'b0 , (acc_psp_sva[6])})
                    + conv_u2u_3_4({2'b11 , (acc_psp_sva[3])}))})))) + conv_u2s_11_13({(acc_psp_sva[12])
                    , 1'b0 , (acc_psp_sva[12]) , 1'b0 , (acc_psp_sva[12]) , 1'b0
                    , (acc_psp_sva[12]) , 1'b0 , (acc_psp_sva[12]) , 1'b0 , (acc_psp_sva[12])}))
                    + ({(acc_psp_sva[13]) , 1'b0 , (acc_psp_sva[13]) , 1'b0 , (acc_psp_sva[13])
                    , 1'b0 , (acc_psp_sva[13]) , (acc_psp_sva[7]) , 1'b0 , (acc_psp_sva[5])
                    , 1'b0 , (signext_2_1(acc_psp_sva[13]))})) + (ACC_GX_for_mux_11_nl);
                FRAME_a_5_sva = FRAME_a_5_lpi_1 + 2'b1;
                ACC_GY_for_acc_11_psp_sva = conv_s2u_3_5({1'b1 , (~ FRAME_a_6_lpi_1)})
                    + ({(FRAME_a_6_lpi_1[0]) , 4'b1});
                ACC_GY_for_acc_25_sdt = conv_u2u_2_3(FRAME_a_6_lpi_1) + conv_u2u_2_3(FRAME_i_2_lpi_1);
                ACC_GY_for_slc_gy_psp_sva = MUX_v_3_16_2({3'b1 , 3'b10 , 3'b1 , 3'b0
                    , 3'b0 , 3'b0 , 3'b111 , 3'b110 , 3'b111 , 3'b0 , 3'b0 , 3'b0
                    , 3'b0 , 3'b0 , 3'b0 , 3'b0}, {(conv_u2u_2_3(ACC_GY_for_acc_25_sdt[2:1])
                    + conv_u2u_2_3(FRAME_i_2_lpi_1)) , (ACC_GY_for_acc_25_sdt[0])});
                regs_operator_3_slc_regs_regs_cse_sva = MUX_v_90_4_2({regs_regs_0_sva
                    , regs_regs_1_sva , regs_regs_2_sva , 90'b0}, FRAME_i_2_lpi_1);
                ACC_GY_for_mux_3_nl = MUX_v_10_32_2({10'b0 , 10'b0 , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[79:70])
                    , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[19:10]) , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[47:38])
                    , (regs_operator_3_slc_regs_regs_cse_sva[49:40]) , (regs_operator_3_slc_regs_regs_cse_sva[51:42])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0}, ACC_GY_for_acc_11_psp_sva + 5'b101);
                ACC_GY_for_mux_4_nl = MUX_v_10_32_2({(regs_operator_3_slc_regs_regs_cse_sva[9:0])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[37:28])
                    , (regs_operator_3_slc_regs_regs_cse_sva[39:30]) , (regs_operator_3_slc_regs_regs_cse_sva[41:32])
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0
                    , 10'b0 , 10'b0 , 10'b0 , 10'b0 , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[69:60])
                    , 10'b0}, ACC_GY_for_acc_11_psp_sva);
                acc_4_psp_sva = conv_s2s_13_14(conv_s2s_12_13(conv_s2s_24_12(conv_s2s_3_12(ACC_GY_for_slc_gy_psp_sva)
                    * conv_u2s_10_12(ACC_GY_for_mux_3_nl))) + conv_s2s_12_13(conv_s2s_24_12(conv_s2s_3_12(ACC_GY_for_slc_gy_psp_sva)
                    * conv_u2s_10_12(fslr_10_90_7(regs_operator_3_slc_regs_regs_cse_sva,
                    ({(conv_u2u_4_5(ACC_GY_for_acc_11_psp_sva[4:1]) + 5'b101) , (ACC_GY_for_acc_11_psp_sva[0])
                    , 1'b0})))))) + conv_s2s_12_14(conv_s2s_24_12(conv_s2s_3_12(ACC_GY_for_slc_gy_psp_sva)
                    * conv_u2s_10_12(ACC_GY_for_mux_4_nl)));
                acc_imod_3_sva = conv_u2s_4_5(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_4_psp_sva[2])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_4_psp_sva[3])) , (acc_4_psp_sva[10])}))))
                    , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_4_psp_sva[4])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_4_psp_sva[5])) , (~ (acc_4_psp_sva[9]))}))))
                    , (acc_4_psp_sva[12])})))) , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_4_psp_sva[6])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_4_psp_sva[7])) , (acc_4_psp_sva[8])}))))
                    , 1'b1}) + conv_u2u_2_4({(~ (acc_4_psp_sva[1])) , (~ (acc_4_psp_sva[11]))}))))
                    , (acc_4_psp_sva[13])})))) + conv_s2s_4_5({3'b101 , (acc_4_psp_sva[0])});
                acc_imod_4_sva = (readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(acc_imod_3_sva[2])
                    , 1'b1}) + conv_u2u_2_3({(~ (acc_imod_3_sva[3])) , 1'b1}))))
                    , 1'b1}) + conv_u2u_2_4({(~ (acc_imod_3_sva[1])) , (~ (acc_imod_3_sva[4]))}))))
                    + ({2'b10 , (acc_imod_3_sva[0])});
                acc_imod_5_sva = readslicef_3_2_1((({1'b1 , (acc_imod_4_sva[0]) ,
                    1'b1}) + conv_u2s_2_3({(~ (acc_imod_4_sva[1])) , (~ (acc_imod_4_sva[2]))})));
                ACC_GY_for_mux_5_nl = MUX_v_16_4_2({avg_y_0_lpi_1_dfm , avg_y_1_lpi_1_dfm
                    , avg_y_2_lpi_1_dfm , 16'b0}, FRAME_a_6_lpi_1);
                ACC_GY_for_acc_24_ctmp_sva = conv_s2s_13_16((conv_s2s_12_13(conv_u2s_10_12(({(acc_4_psp_sva[11])
                    , 1'b0 , (acc_4_psp_sva[11]) , 1'b0 , (acc_4_psp_sva[11]) , 1'b0
                    , (acc_4_psp_sva[11]) , 1'b0 , (signext_2_1(acc_4_psp_sva[13]))})
                    + conv_u2u_9_10(conv_u2u_8_9({(acc_4_psp_sva[9]) , 1'b0 , (acc_4_psp_sva[9])
                    , 1'b0 , (acc_4_psp_sva[9]) , 1'b0 , (signext_2_1(acc_4_psp_sva[13]))})
                    + conv_u2u_7_9({(acc_4_psp_sva[8]) , 1'b0 , (acc_4_psp_sva[8])
                    , 1'b0 , (acc_4_psp_sva[8]) , 1'b0 , (acc_4_psp_sva[8])}))) +
                    conv_s2s_10_12(conv_u2s_9_10({(acc_4_psp_sva[10]) , 1'b0 , (acc_4_psp_sva[10])
                    , 1'b0 , (acc_4_psp_sva[10]) , 1'b0 , (acc_4_psp_sva[10]) , 1'b0
                    , (acc_4_psp_sva[10])}) + conv_s2s_8_10(conv_u2s_6_8(conv_u2u_5_6(readslicef_6_5_1((conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[5])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[7]) , (acc_imod_3_sva[2])})))))
                    , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[9])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[11]) , (acc_imod_3_sva[1])})))))
                    , (~ (acc_imod_4_sva[2]))})))) , 1'b1}) + conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[13])
                    , 1'b1})) + conv_u2u_3_4(signext_3_2({(acc_4_psp_sva[13]) , (acc_4_psp_sva[4])})))))
                    , 1'b1}) + conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(acc_4_psp_sva[3])
                    , (acc_4_psp_sva[1]) , 1'b1}) + conv_u2u_3_4({(acc_imod_3_sva[3])
                    , (acc_4_psp_sva[2]) , 1'b1})))) , (acc_imod_4_sva[1])})))) ,
                    ((acc_4_psp_sva[13]) & (~ (acc_imod_5_sva[1])) & (acc_imod_5_sva[0]))}))))
                    + conv_u2u_5_6(readslicef_6_5_1((conv_u2u_5_6({(readslicef_5_4_1((conv_u2u_4_5({(~
                    (acc_imod_3_sva[4])) , 1'b1 , (~ (acc_imod_3_sva[4])) , 1'b1})
                    + conv_u2u_3_5(signext_3_2({(acc_4_psp_sva[13]) , (acc_imod_3_sva[3])})))))
                    , 1'b1}) + conv_u2u_5_6({(acc_4_psp_sva[7]) , (acc_4_psp_sva[4])
                    , (signext_2_1(acc_4_psp_sva[13])) , (~((acc_imod_5_sva[1]) &
                    (~ (acc_4_psp_sva[13]))))}))))) + conv_s2s_5_8({(~ (acc_4_psp_sva[6]))
                    , (conv_u2u_3_4({(acc_4_psp_sva[6]) , 1'b0 , (acc_4_psp_sva[6])})
                    + conv_u2u_3_4({2'b11 , (acc_4_psp_sva[3])}))})))) + conv_u2s_11_13({(acc_4_psp_sva[12])
                    , 1'b0 , (acc_4_psp_sva[12]) , 1'b0 , (acc_4_psp_sva[12]) , 1'b0
                    , (acc_4_psp_sva[12]) , 1'b0 , (acc_4_psp_sva[12]) , 1'b0 , (acc_4_psp_sva[12])}))
                    + ({(acc_4_psp_sva[13]) , 1'b0 , (acc_4_psp_sva[13]) , 1'b0 ,
                    (acc_4_psp_sva[13]) , 1'b0 , (acc_4_psp_sva[13]) , (acc_4_psp_sva[7])
                    , 1'b0 , (acc_4_psp_sva[5]) , 1'b0 , (signext_2_1(acc_4_psp_sva[13]))}))
                    + (ACC_GY_for_mux_5_nl);
                FRAME_a_6_sva = FRAME_a_6_lpi_1 + 2'b1;
                exit_ACC_GX_for_sva = ~((readslicef_3_1_2((({1'b1 , FRAME_a_5_sva})
                    + 3'b1))) | (readslicef_3_1_2((({1'b1 , FRAME_a_6_sva}) + 3'b1))));
                if ( exit_ACC_GX_for_sva ) begin
                  FRAME_i_3_sva = FRAME_i_3_lpi_1 + 2'b1;
                  FRAME_i_2_sva = FRAME_i_2_lpi_1 + 2'b1;
                  exit_ACC_GX_sva = ~((readslicef_3_1_2((({1'b1 , FRAME_i_3_sva})
                      + 3'b1))) | (readslicef_3_1_2((({1'b1 , FRAME_i_2_sva}) + 3'b1))));
                  FRAME_a_5_lpi_1_dfm = FRAME_a_5_sva & ({{1{exit_ACC_GX_sva}}, exit_ACC_GX_sva});
                  FRAME_a_6_lpi_1_dfm = FRAME_a_6_sva & ({{1{exit_ACC_GX_sva}}, exit_ACC_GX_sva});
                end
                exit_ACC_GX_1_sva_1 = exit_ACC_GX_for_sva & exit_ACC_GX_sva;
                FRAME_a_4_lpi_1_dfm = FRAME_a_4_lpi_1 & (signext_2_1(~ exit_ACC_GX_1_sva_1));
              end
            end
            else begin
              unequal_tmp = (SHIFT_i_1_lpi_1_dfm_2[1]) | (SHIFT_i_1_lpi_1_dfm_2[0]);
              case (SHIFT_i_1_lpi_1_dfm_2)
                2'b0 : begin
                  // NOP
                end
                default : begin
                  SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = MUX_v_90_2_2({regs_regs_1_sva
                      , regs_regs_0_sva}, SHIFT_i_1_lpi_1_dfm_2[0]);
                end
              endcase
              SHIFT_acc_1_psp = SHIFT_i_1_lpi_1_dfm_2 + 2'b11;
              FRAME_i_2_lpi_1_dfm_2 = FRAME_i_2_lpi_1 & (signext_2_1(~ (SHIFT_acc_1_psp[1])));
              FRAME_a_5_lpi_1_dfm_3 = FRAME_a_5_lpi_1 & (signext_2_1(~ (SHIFT_acc_1_psp[1])));
              FRAME_a_6_lpi_1_dfm_3 = FRAME_a_6_lpi_1 & (signext_2_1(~ (SHIFT_acc_1_psp[1])));
              FRAME_i_3_lpi_1_dfm_2 = FRAME_i_3_lpi_1 & (signext_2_1(~ (SHIFT_acc_1_psp[1])));
            end
            regs_regs_0_sva = MUX_v_90_2_2({regs_operator_din_lpi_1_dfm , regs_regs_0_sva},
                unequal_tmp | exit_SHIFT_lpi_1_dfm);
            regs_regs_1_sva = MUX_v_90_2_2({regs_regs_1_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (SHIFT_i_1_lpi_1_dfm_2[0]) & unequal_tmp & (~ exit_SHIFT_lpi_1_dfm));
            regs_regs_2_sva = MUX_v_90_2_2({regs_regs_2_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (~ (SHIFT_i_1_lpi_1_dfm_2[0])) & unequal_tmp & (~ exit_SHIFT_lpi_1_dfm));
            SHIFT_nand_cse = ~(exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm);
            redx_lpi_1 = MUX_v_16_2_2({redx_sva_1 , redx_lpi_1_dfm}, SHIFT_nand_cse);
            greenx_lpi_1 = MUX_v_16_2_2({greenx_sva_1 , greenx_lpi_1_dfm}, SHIFT_nand_cse);
            bluex_lpi_1 = MUX_v_16_2_2({bluex_sva_1 , bluex_lpi_1_dfm}, SHIFT_nand_cse);
            redy_lpi_1 = MUX_v_16_2_2({redy_sva_1 , redy_lpi_1_dfm}, SHIFT_nand_cse);
            greeny_lpi_1 = MUX_v_16_2_2({greeny_sva_1 , greeny_lpi_1_dfm}, SHIFT_nand_cse);
            bluey_lpi_1 = MUX_v_16_2_2({bluey_sva_1 , bluey_lpi_1_dfm}, SHIFT_nand_cse);
            avg_x_0_lpi_1 = MUX_v_16_2_2({avg_x_0_lpi_1_dfm , ACC_GX_for_acc_24_ctmp_sva},
                (~((FRAME_a_5_lpi_1[1]) | (FRAME_a_5_lpi_1[0]))) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            avg_x_1_lpi_1 = MUX_v_16_2_2({avg_x_1_lpi_1_dfm , ACC_GX_for_acc_24_ctmp_sva},
                (~ (FRAME_a_5_lpi_1[1])) & (FRAME_a_5_lpi_1[0]) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            avg_x_2_lpi_1 = MUX_v_16_2_2({avg_x_2_lpi_1_dfm , ACC_GX_for_acc_24_ctmp_sva},
                (FRAME_a_5_lpi_1[1]) & (~ (FRAME_a_5_lpi_1[0])) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            avg_y_0_lpi_1 = MUX_v_16_2_2({avg_y_0_lpi_1_dfm , ACC_GY_for_acc_24_ctmp_sva},
                (~((FRAME_a_6_lpi_1[1]) | (FRAME_a_6_lpi_1[0]))) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            avg_y_1_lpi_1 = MUX_v_16_2_2({avg_y_1_lpi_1_dfm , ACC_GY_for_acc_24_ctmp_sva},
                (~ (FRAME_a_6_lpi_1[1])) & (FRAME_a_6_lpi_1[0]) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            avg_y_2_lpi_1 = MUX_v_16_2_2({avg_y_2_lpi_1_dfm , ACC_GY_for_acc_24_ctmp_sva},
                (FRAME_a_6_lpi_1[1]) & (~ (FRAME_a_6_lpi_1[0])) & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm);
            SHIFT_and_32_cse = exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            FRAME_a_4_lpi_1 = MUX1HOT_v_2_3_2({FRAME_a_4_sva , FRAME_a_4_lpi_1_dfm
                , FRAME_a_4_lpi_1}, {SHIFT_and_32_cse , ((~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm) , (~ exit_SHIFT_lpi_1_dfm)});
            ACC_GX_and_6_tmp = exit_ACC_GX_for_sva & (~ exit_ACC_GX_1_lpi_1_dfm);
            SHIFT_and_47_cse = (~ ACC_GX_and_6_tmp) & exit_SHIFT_lpi_1_dfm;
            SHIFT_and_48_cse = ACC_GX_and_6_tmp & exit_SHIFT_lpi_1_dfm;
            FRAME_i_2_lpi_1 = MUX1HOT_v_2_3_2({FRAME_i_2_lpi_1_dfm_2 , FRAME_i_2_lpi_1
                , FRAME_i_2_sva}, {(~ exit_SHIFT_lpi_1_dfm) , SHIFT_and_47_cse ,
                SHIFT_and_48_cse});
            SHIFT_i_1_lpi_3 = MUX_v_2_2_2({SHIFT_acc_1_psp , SHIFT_i_1_lpi_1_dfm_2},
                exit_SHIFT_lpi_1_dfm);
            ACC_GX_and_2_cse = exit_ACC_GX_for_sva & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm;
            SHIFT_and_42_cse = (~(exit_ACC_GX_for_sva | exit_ACC_GX_1_lpi_1_dfm))
                & exit_SHIFT_lpi_1_dfm;
            FRAME_a_5_lpi_1 = MUX1HOT_v_2_4_2({FRAME_a_5_lpi_1_dfm_3 , FRAME_a_5_lpi_1
                , FRAME_a_5_lpi_1_dfm , FRAME_a_5_sva}, {(~ exit_SHIFT_lpi_1_dfm)
                , SHIFT_and_32_cse , ACC_GX_and_2_cse , SHIFT_and_42_cse});
            FRAME_a_6_lpi_1 = MUX1HOT_v_2_4_2({FRAME_a_6_lpi_1_dfm_3 , FRAME_a_6_lpi_1
                , FRAME_a_6_lpi_1_dfm , FRAME_a_6_sva}, {(~ exit_SHIFT_lpi_1_dfm)
                , SHIFT_and_32_cse , ACC_GX_and_2_cse , SHIFT_and_42_cse});
            FRAME_i_3_lpi_1 = MUX1HOT_v_2_3_2({FRAME_i_3_lpi_1_dfm_2 , FRAME_i_3_lpi_1
                , FRAME_i_3_sva}, {(~ exit_SHIFT_lpi_1_dfm) , SHIFT_and_47_cse ,
                SHIFT_and_48_cse});
            exit_ACC3_sva = exit_ACC3_sva_2 & exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            ACC_GX_mux_54_nl = MUX_s_1_2_2({exit_ACC_GX_1_sva_1 , exit_ACC_GX_1_lpi_1_dfm},
                exit_ACC_GX_1_lpi_1_dfm);
            exit_ACC_GX_1_lpi_1 = MUX_s_1_2_2({exit_ACC_GX_1_lpi_1_dfm , (ACC_GX_mux_54_nl)},
                exit_SHIFT_lpi_1_dfm);
            exit_SHIFT_lpi_1 = MUX_s_1_2_2({(SHIFT_acc_1_psp[1]) , exit_SHIFT_lpi_1_dfm},
                exit_SHIFT_lpi_1_dfm);
          end
        end
      end
    end
    SHIFT_and_48_cse = 1'b0;
    SHIFT_and_47_cse = 1'b0;
    SHIFT_and_42_cse = 1'b0;
    ACC_GX_and_2_cse = 1'b0;
    SHIFT_and_32_cse = 1'b0;
    SHIFT_nand_cse = 1'b0;
    ACC_GY_for_acc_25_sdt = 3'b0;
    ACC_GX_for_acc_25_sdt = 3'b0;
    SHIFT_i_1_lpi_1_dfm_2 = 2'b0;
    SHIFT_i_1_lpi_3 = 2'b0;
    ACC_GX_and_6_tmp = 1'b0;
    SHIFT_acc_1_psp = 2'b0;
    FRAME_i_3_lpi_1_dfm_2 = 2'b0;
    FRAME_a_6_lpi_1_dfm_3 = 2'b0;
    FRAME_a_5_lpi_1_dfm_3 = 2'b0;
    FRAME_i_2_lpi_1_dfm_2 = 2'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 90'b0;
    unequal_tmp = 1'b0;
    FRAME_a_4_lpi_1_dfm = 2'b0;
    exit_ACC_GX_1_sva_1 = 1'b0;
    FRAME_a_6_lpi_1_dfm = 2'b0;
    FRAME_a_5_lpi_1_dfm = 2'b0;
    exit_ACC_GX_sva = 1'b0;
    FRAME_i_2_sva = 2'b0;
    FRAME_i_3_sva = 2'b0;
    exit_ACC_GX_for_sva = 1'b0;
    FRAME_a_6_sva = 2'b0;
    ACC_GY_for_acc_24_ctmp_sva = 16'b0;
    acc_imod_5_sva = 2'b0;
    acc_imod_4_sva = 3'b0;
    acc_imod_3_sva = 5'b0;
    acc_4_psp_sva = 14'b0;
    regs_operator_3_slc_regs_regs_cse_sva = 90'b0;
    ACC_GY_for_slc_gy_psp_sva = 3'b0;
    ACC_GY_for_acc_11_psp_sva = 5'b0;
    FRAME_a_5_sva = 2'b0;
    ACC_GX_for_acc_24_ctmp_sva = 16'b0;
    acc_imod_2_sva = 2'b0;
    acc_imod_1_sva = 3'b0;
    acc_imod_sva = 5'b0;
    acc_psp_sva = 14'b0;
    regs_operator_slc_regs_regs_cse_sva = 90'b0;
    ACC_GX_for_slc_gx_psp_sva = 3'b0;
    ACC_GX_for_acc_11_psp_sva = 5'b0;
    FRAME_ac_int_cctor_15_sva = 16'b0;
    acc_imod_7_sva = 3'b0;
    acc_imod_6_sva = 5'b0;
    acc_8_psp_sva = 17'b0;
    AbsAndMax_AbsAndMax_return_8_sva_1 = 16'b0;
    AbsAndMax_8_slc_svs = 1'b0;
    AbsAndMax_x_8_sva = 16'b0;
    AbsAndMax_AbsAndMax_return_7_sva_1 = 16'b0;
    AbsAndMax_7_slc_svs = 1'b0;
    AbsAndMax_x_7_sva = 16'b0;
    AbsAndMax_AbsAndMax_return_6_sva_1 = 16'b0;
    AbsAndMax_6_slc_svs = 1'b0;
    AbsAndMax_x_6_sva = 16'b0;
    AbsAndMax_AbsAndMax_return_5_sva_1 = 16'b0;
    AbsAndMax_5_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_4_sva_1 = 16'b0;
    AbsAndMax_4_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_3_sva_1 = 16'b0;
    AbsAndMax_3_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
    AbsAndMax_2_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_1_sva_1 = 16'b0;
    AbsAndMax_1_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_sva_1 = 16'b0;
    AbsAndMax_slc_svs = 1'b0;
    exit_ACC3_sva_2 = 1'b0;
    FRAME_a_4_sva = 2'b0;
    greeny_sva_1 = 16'b0;
    greenx_sva_1 = 16'b0;
    bluey_sva_1 = 16'b0;
    bluex_sva_1 = 16'b0;
    redy_sva_1 = 16'b0;
    ACC3_slc_avg_y_cse_sva = 16'b0;
    redx_sva_1 = 16'b0;
    ACC3_slc_avg_x_cse_sva = 16'b0;
    exit_SHIFT_lpi_1_dfm = 1'b0;
    exit_ACC_GX_1_lpi_1_dfm = 1'b0;
    regs_operator_din_lpi_1_dfm = 90'b0;
    avg_y_2_lpi_1_dfm = 16'b0;
    avg_y_1_lpi_1_dfm = 16'b0;
    avg_y_0_lpi_1_dfm = 16'b0;
    avg_x_2_lpi_1_dfm = 16'b0;
    avg_x_1_lpi_1_dfm = 16'b0;
    avg_x_0_lpi_1_dfm = 16'b0;
    bluey_lpi_1_dfm = 16'b0;
    greeny_lpi_1_dfm = 16'b0;
    redy_lpi_1_dfm = 16'b0;
    bluex_lpi_1_dfm = 16'b0;
    greenx_lpi_1_dfm = 16'b0;
    redx_lpi_1_dfm = 16'b0;
    regs_operator_din_sva = 90'b0;
    exit_ACC3_sva = 1'b0;
    regs_regs_2_sva = 90'b0;
    regs_regs_0_sva = 90'b0;
    regs_regs_1_sva = 90'b0;
    FRAME_i_2_lpi_1 = 2'b0;
    FRAME_i_3_lpi_1 = 2'b0;
    FRAME_a_6_lpi_1 = 2'b0;
    FRAME_a_5_lpi_1 = 2'b0;
    FRAME_a_4_lpi_1 = 2'b0;
    exit_SHIFT_lpi_1 = 1'b0;
    exit_ACC_GX_1_lpi_1 = 1'b0;
    avg_x_2_lpi_1 = 16'b0;
    avg_x_0_lpi_1 = 16'b0;
    avg_x_1_lpi_1 = 16'b0;
    avg_y_2_lpi_1 = 16'b0;
    avg_y_0_lpi_1 = 16'b0;
    avg_y_1_lpi_1 = 16'b0;
    bluey_lpi_1 = 16'b0;
    bluex_lpi_1 = 16'b0;
    greeny_lpi_1 = 16'b0;
    greenx_lpi_1 = 16'b0;
    redy_lpi_1 = 16'b0;
    redx_lpi_1 = 16'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [15:0] signext_16_1;
    input [0:0] vector;
  begin
    signext_16_1= {{15{vector[0]}}, vector};
  end
  endfunction


  function [89:0] MUX_v_90_2_2;
    input [179:0] inputs;
    input [0:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[179:90];
      end
      1'b1 : begin
        result = inputs[89:0];
      end
      default : begin
        result = inputs[179:90];
      end
    endcase
    MUX_v_90_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_4_2;
    input [63:0] inputs;
    input [1:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[63:48];
      end
      2'b01 : begin
        result = inputs[47:32];
      end
      2'b10 : begin
        result = inputs[31:16];
      end
      2'b11 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[63:48];
      end
    endcase
    MUX_v_16_4_2 = result;
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX1HOT_v_16_3_2;
    input [47:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function [2:0] MUX_v_3_16_2;
    input [47:0] inputs;
    input [3:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[47:45];
      end
      4'b0001 : begin
        result = inputs[44:42];
      end
      4'b0010 : begin
        result = inputs[41:39];
      end
      4'b0011 : begin
        result = inputs[38:36];
      end
      4'b0100 : begin
        result = inputs[35:33];
      end
      4'b0101 : begin
        result = inputs[32:30];
      end
      4'b0110 : begin
        result = inputs[29:27];
      end
      4'b0111 : begin
        result = inputs[26:24];
      end
      4'b1000 : begin
        result = inputs[23:21];
      end
      4'b1001 : begin
        result = inputs[20:18];
      end
      4'b1010 : begin
        result = inputs[17:15];
      end
      4'b1011 : begin
        result = inputs[14:12];
      end
      4'b1100 : begin
        result = inputs[11:9];
      end
      4'b1101 : begin
        result = inputs[8:6];
      end
      4'b1110 : begin
        result = inputs[5:3];
      end
      4'b1111 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[47:45];
      end
    endcase
    MUX_v_3_16_2 = result;
  end
  endfunction


  function [89:0] MUX_v_90_4_2;
    input [359:0] inputs;
    input [1:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[359:270];
      end
      2'b01 : begin
        result = inputs[269:180];
      end
      2'b10 : begin
        result = inputs[179:90];
      end
      2'b11 : begin
        result = inputs[89:0];
      end
      default : begin
        result = inputs[359:270];
      end
    endcase
    MUX_v_90_4_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_32_2;
    input [319:0] inputs;
    input [4:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = inputs[319:310];
      end
      5'b00001 : begin
        result = inputs[309:300];
      end
      5'b00010 : begin
        result = inputs[299:290];
      end
      5'b00011 : begin
        result = inputs[289:280];
      end
      5'b00100 : begin
        result = inputs[279:270];
      end
      5'b00101 : begin
        result = inputs[269:260];
      end
      5'b00110 : begin
        result = inputs[259:250];
      end
      5'b00111 : begin
        result = inputs[249:240];
      end
      5'b01000 : begin
        result = inputs[239:230];
      end
      5'b01001 : begin
        result = inputs[229:220];
      end
      5'b01010 : begin
        result = inputs[219:210];
      end
      5'b01011 : begin
        result = inputs[209:200];
      end
      5'b01100 : begin
        result = inputs[199:190];
      end
      5'b01101 : begin
        result = inputs[189:180];
      end
      5'b01110 : begin
        result = inputs[179:170];
      end
      5'b01111 : begin
        result = inputs[169:160];
      end
      5'b10000 : begin
        result = inputs[159:150];
      end
      5'b10001 : begin
        result = inputs[149:140];
      end
      5'b10010 : begin
        result = inputs[139:130];
      end
      5'b10011 : begin
        result = inputs[129:120];
      end
      5'b10100 : begin
        result = inputs[119:110];
      end
      5'b10101 : begin
        result = inputs[109:100];
      end
      5'b10110 : begin
        result = inputs[99:90];
      end
      5'b10111 : begin
        result = inputs[89:80];
      end
      5'b11000 : begin
        result = inputs[79:70];
      end
      5'b11001 : begin
        result = inputs[69:60];
      end
      5'b11010 : begin
        result = inputs[59:50];
      end
      5'b11011 : begin
        result = inputs[49:40];
      end
      5'b11100 : begin
        result = inputs[39:30];
      end
      5'b11101 : begin
        result = inputs[29:20];
      end
      5'b11110 : begin
        result = inputs[19:10];
      end
      5'b11111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[319:310];
      end
    endcase
    MUX_v_10_32_2 = result;
  end
  endfunction


  function [9:0] fslr_10_90_7;
    input [89:0] data;
    input [6:0] shft;
  begin
    fslr_10_90_7 = data >> shft;
  end
  endfunction


  function [2:0] signext_3_2;
    input [1:0] vector;
  begin
    signext_3_2= {{1{vector[1]}}, vector};
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [1:0] MUX1HOT_v_2_4_2;
    input [7:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function  [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function  [16:0] conv_u2u_16_17 ;
    input [15:0]  vector ;
  begin
    conv_u2u_16_17 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [5:0] conv_s2s_5_6 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_6 = {vector[4], vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [15:0] conv_u2u_14_16 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_16 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [15:0] conv_s2u_15_16 ;
    input signed [14:0]  vector ;
  begin
    conv_s2u_15_16 = {vector[14], vector};
  end
  endfunction


  function signed [14:0] conv_u2s_13_15 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_15 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_24_12 ;
    input [23:0]  vector ;
  begin
    conv_u2u_24_12 = vector[11:0];
  end
  endfunction


  function  [11:0] conv_u2u_2_12 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_12 = {{10{1'b0}}, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_9_12 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_12 = {{3{1'b0}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_u2u_4_6 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_6 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [14:0] conv_s2s_13_15 ;
    input signed [12:0]  vector ;
  begin
    conv_s2s_13_15 = {{2{vector[12]}}, vector};
  end
  endfunction


  function signed [12:0] conv_u2s_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_13 = {1'b0, vector};
  end
  endfunction


  function signed [12:0] conv_s2s_11_13 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_8_10 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_s2s_5_8 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_8 = {{3{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_s2u_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [13:0] conv_s2s_13_14 ;
    input signed [12:0]  vector ;
  begin
    conv_s2s_13_14 = {vector[12], vector};
  end
  endfunction


  function signed [12:0] conv_s2s_12_13 ;
    input signed [11:0]  vector ;
  begin
    conv_s2s_12_13 = {vector[11], vector};
  end
  endfunction


  function signed [11:0] conv_s2s_24_12 ;
    input signed [23:0]  vector ;
  begin
    conv_s2s_24_12 = vector[11:0];
  end
  endfunction


  function signed [11:0] conv_s2s_3_12 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_12 = {{9{vector[2]}}, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [13:0] conv_s2s_12_14 ;
    input signed [11:0]  vector ;
  begin
    conv_s2s_12_14 = {{2{vector[11]}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [15:0] conv_s2s_13_16 ;
    input signed [12:0]  vector ;
  begin
    conv_s2s_13_16 = {{3{vector[12]}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_7_9 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_9 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [11:0] conv_s2s_10_12 ;
    input signed [9:0]  vector ;
  begin
    conv_s2s_10_12 = {{2{vector[9]}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [12:0] conv_u2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_13 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edge_detect
//  Generated from file(s):
//   66) $PROJECT_HOME/../edge_detect_c/edge4.c
// ------------------------------------------------------------------


module edge_detect (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [89:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [89:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(90)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  edge_detect_core edge_detect_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



