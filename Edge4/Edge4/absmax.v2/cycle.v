// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-020
//  Generated date: Mon May 11 13:49:58 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    absmax_core
// ------------------------------------------------------------------


module absmax_core (
  clk, en, arst_n, x_rsc_mgc_in_wire_d, absmax_return_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [15:0] x_rsc_mgc_in_wire_d;
  output [15:0] absmax_return_rsc_mgc_out_stdreg_d;
  reg [15:0] absmax_return_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [15:0] x_1_sva;
    reg slc_svs;
    reg else_slc_svs;
    reg [15:0] absmax_return_sva_2;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        else_slc_svs = 1'b0;
        absmax_return_sva_2 = 16'b0;
        x_1_sva = x_rsc_mgc_in_wire_d;
        slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (x_1_sva[15:10])) + 7'b1));
        if ( slc_svs ) begin
        end
        else begin
          else_slc_svs = readslicef_17_1_16((conv_s2s_16_17(~ x_1_sva) + 17'b1));
          if ( else_slc_svs ) begin
          end
          else begin
            absmax_return_sva_2 = (~ x_1_sva) + 16'b1;
          end
        end
        absmax_return_rsc_mgc_out_stdreg_d <= MUX1HOT_v_16_3_2({absmax_return_sva_2
            , ({6'b0, x_1_sva[9:0]}) , 16'b1111111111}, {(~(else_slc_svs | slc_svs))
            , (else_slc_svs & (~ slc_svs)) , slc_svs});
        begin : waitLoop1Exit
          forever begin : waitLoop1
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop1Exit;
          end
        end
        // C-Step 2 of Loop 'main'
      end
    end
    absmax_return_sva_2 = 16'b0;
    else_slc_svs = 1'b0;
    slc_svs = 1'b0;
    x_1_sva = 16'b0;
    absmax_return_rsc_mgc_out_stdreg_d <= 16'b0;
  end


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_17_1_16;
    input [16:0] vector;
    reg [16:0] tmp;
  begin
    tmp = vector >> 16;
    readslicef_17_1_16 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX1HOT_v_16_3_2;
    input [47:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function signed [16:0] conv_s2s_16_17 ;
    input signed [15:0]  vector ;
  begin
    conv_s2s_16_17 = {vector[15], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    absmax
//  Generated from file(s):
//   57) $PROJECT_HOME/../motionblur/motionblur1.c
//    7) $MGC_HOME/shared/include/ac_int.h
// ------------------------------------------------------------------


module absmax (
  x_rsc_z, absmax_return_rsc_z, clk, en, arst_n
);
  input [15:0] x_rsc_z;
  output [15:0] absmax_return_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [15:0] x_rsc_mgc_in_wire_d;
  wire [15:0] absmax_return_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(16)) x_rsc_mgc_in_wire (
      .d(x_rsc_mgc_in_wire_d),
      .z(x_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(16)) absmax_return_rsc_mgc_out_stdreg (
      .d(absmax_return_rsc_mgc_out_stdreg_d),
      .z(absmax_return_rsc_z)
    );
  absmax_core absmax_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .x_rsc_mgc_in_wire_d(x_rsc_mgc_in_wire_d),
      .absmax_return_rsc_mgc_out_stdreg_d(absmax_return_rsc_mgc_out_stdreg_d)
    );
endmodule



