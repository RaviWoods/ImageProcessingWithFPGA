// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-020
//  Generated date: Mon May 11 13:50:02 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    absmax_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module absmax_core_fsm (
  clk, en, arst_n, fsm_output
);
  input clk;
  input en;
  input arst_n;
  output [1:0] fsm_output;
  reg [1:0] fsm_output;


  // FSM State Type Declaration for absmax_core_fsm_1
  parameter
    st_main = 1'd0,
    st_main_1 = 1'd1,
    state_x = 1'b0;

  reg [0:0] state_var;
  reg [0:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : absmax_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 2'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 2'b10;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 2'b00;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    absmax_core
// ------------------------------------------------------------------


module absmax_core (
  clk, en, arst_n, x_rsc_mgc_in_wire_d, absmax_return_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [15:0] x_rsc_mgc_in_wire_d;
  output [15:0] absmax_return_rsc_mgc_out_stdreg_d;
  reg [15:0] absmax_return_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [1:0] fsm_output;
  wire [16:0] else_acc_itm;
  wire [17:0] nl_else_acc_itm;
  wire [6:0] if_acc_itm;
  wire [7:0] nl_if_acc_itm;


  // Interconnect Declarations for Component Instantiations 
  absmax_core_fsm absmax_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output)
    );
  assign nl_else_acc_itm = conv_s2s_16_17(~ x_rsc_mgc_in_wire_d) + 17'b1;
  assign else_acc_itm = nl_else_acc_itm[16:0];
  assign nl_if_acc_itm = conv_s2u_6_7(~ (x_rsc_mgc_in_wire_d[15:10])) + 7'b1;
  assign if_acc_itm = nl_if_acc_itm[6:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      absmax_return_rsc_mgc_out_stdreg_d <= 16'b0;
    end
    else begin
      if ( en ) begin
        absmax_return_rsc_mgc_out_stdreg_d <= MUX1HOT_v_16_4_2({absmax_return_rsc_mgc_out_stdreg_d
            , ((~ x_rsc_mgc_in_wire_d) + 16'b1) , ({6'b0 , (x_rsc_mgc_in_wire_d[9:0])})
            , 16'b1111111111}, {(~ (fsm_output[0])) , ((~((else_acc_itm[16]) | (if_acc_itm[6])))
            & (fsm_output[0])) , ((else_acc_itm[16]) & (~ (if_acc_itm[6])) & (fsm_output[0]))
            , ((if_acc_itm[6]) & (fsm_output[0]))});
      end
    end
  end

  function [15:0] MUX1HOT_v_16_4_2;
    input [63:0] inputs;
    input [3:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_4_2 = result;
  end
  endfunction


  function signed [16:0] conv_s2s_16_17 ;
    input signed [15:0]  vector ;
  begin
    conv_s2s_16_17 = {vector[15], vector};
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    absmax
//  Generated from file(s):
//   57) $PROJECT_HOME/../motionblur/motionblur1.c
//    7) $MGC_HOME/shared/include/ac_int.h
// ------------------------------------------------------------------


module absmax (
  x_rsc_z, absmax_return_rsc_z, clk, en, arst_n
);
  input [15:0] x_rsc_z;
  output [15:0] absmax_return_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [15:0] x_rsc_mgc_in_wire_d;
  wire [15:0] absmax_return_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(16)) x_rsc_mgc_in_wire (
      .d(x_rsc_mgc_in_wire_d),
      .z(x_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(16)) absmax_return_rsc_mgc_out_stdreg (
      .d(absmax_return_rsc_mgc_out_stdreg_d),
      .z(absmax_return_rsc_z)
    );
  absmax_core absmax_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .x_rsc_mgc_in_wire_d(x_rsc_mgc_in_wire_d),
      .absmax_return_rsc_mgc_out_stdreg_d(absmax_return_rsc_mgc_out_stdreg_d)
    );
endmodule



