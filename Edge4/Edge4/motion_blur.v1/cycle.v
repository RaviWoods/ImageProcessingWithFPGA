// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-020
//  Generated date: Mon May 11 13:50:54 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    motion_blur_core
// ------------------------------------------------------------------


module motion_blur_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [149:0] regs_regs_0_sva;
    reg [149:0] regs_regs_0_lpi_2;
    reg [15:0] red_1_sva;
    reg [15:0] green_1_sva;
    reg [15:0] blue_1_sva;
    reg [15:0] bx_2_sva;
    reg [15:0] bx_1_sva;
    reg [15:0] bx_3_sva;
    reg [15:0] bx_0_sva;
    reg [15:0] gx_2_sva;
    reg [15:0] gx_1_sva;
    reg [15:0] gx_3_sva;
    reg [15:0] gx_0_sva;
    reg [15:0] rx_2_sva;
    reg [15:0] rx_1_sva;
    reg [15:0] rx_3_sva;
    reg [15:0] rx_0_sva;
    reg [149:0] regs_operator_din_sva;
    reg unequal_tmp;
    reg [149:0] regs_regs_0_lpi_2_dfm;
    reg [2:0] i_4_sva;
    reg [15:0] rx_0_sva_1;
    reg [15:0] gx_0_sva_1;
    reg [15:0] bx_0_sva_1;
    reg equal_tmp;
    reg [15:0] rx_1_sva_1;
    reg [15:0] gx_1_sva_1;
    reg [15:0] bx_1_sva_1;
    reg equal_tmp_1;
    reg [15:0] rx_2_sva_1;
    reg [15:0] gx_2_sva_1;
    reg [15:0] bx_2_sva_1;
    reg equal_tmp_2;
    reg [15:0] rx_3_sva_1;
    reg [15:0] gx_3_sva_1;
    reg [15:0] bx_3_sva_1;
    reg equal_tmp_3;
    reg [15:0] rx_0_sva_dfm;
    reg [15:0] rx_1_sva_dfm;
    reg [15:0] rx_2_sva_dfm;
    reg [15:0] rx_3_sva_dfm;
    reg [15:0] gx_0_sva_dfm;
    reg [15:0] gx_1_sva_dfm;
    reg [15:0] gx_2_sva_dfm;
    reg [15:0] gx_3_sva_dfm;
    reg [15:0] bx_0_sva_dfm;
    reg [15:0] bx_1_sva_dfm;
    reg [15:0] bx_2_sva_dfm;
    reg [15:0] bx_3_sva_dfm;
    reg [9:0] rx_4_1_sva_dfm;
    reg [9:0] gx_4_1_sva_dfm;
    reg [9:0] bx_4_1_sva_dfm;
    reg [2:0] i_4_sva_1;
    reg [2:0] i_3_sva;
    reg [15:0] red_1_sva_1;
    reg [15:0] green_1_sva_1;
    reg [15:0] blue_1_sva_1;
    reg [2:0] i_3_sva_1;
    reg [4:0] acc_imod_sva;
    reg [13:0] FRAME_acc_2_psp_sva;
    reg [4:0] acc_imod_2_sva;
    reg [13:0] FRAME_acc_3_psp_sva;
    reg [4:0] acc_imod_4_sva;
    reg [13:0] FRAME_acc_4_psp_sva;
    reg absmax_slc_svs;
    reg [9:0] absmax_absmax_return_3_lpi_1_dfm;
    reg absmax_1_slc_svs;
    reg [9:0] absmax_absmax_return_6_lpi_1_dfm;
    reg absmax_2_slc_svs;
    reg [9:0] absmax_absmax_return_7_lpi_1_dfm;
    reg [2:0] SHIFT_acc_1_psp;
    reg [4:0] FRAME_acc_15_itm;
    reg [6:0] FRAME_acc_16_itm;
    reg [8:0] FRAME_acc_17_itm;
    reg [10:0] FRAME_acc_18_itm;
    reg [12:0] FRAME_acc_19_itm;
    reg [4:0] FRAME_acc_30_itm;
    reg [6:0] FRAME_acc_31_itm;
    reg [8:0] FRAME_acc_32_itm;
    reg [10:0] FRAME_acc_33_itm;
    reg [12:0] FRAME_acc_34_itm;
    reg [6:0] FRAME_acc_46_itm;
    reg [8:0] FRAME_acc_47_itm;
    reg [10:0] FRAME_acc_48_itm;
    reg [12:0] FRAME_acc_49_itm;
    reg [9:0] absmax_2_or_itm;
    reg [9:0] absmax_1_or_itm;
    reg [119:0] regs_regs_2_sva_sg1;
    reg [119:0] regs_regs_1_sva_sg1;
    reg [119:0] regs_regs_3_sva_sg1;
    reg [29:0] regs_regs_4_sva_sg1;
    reg [119:0] regs_regs_2_lpi_2_sg1;
    reg [119:0] regs_regs_1_lpi_2_sg1;
    reg [119:0] regs_regs_3_lpi_2_sg1;
    reg [29:0] regs_regs_4_lpi_2_sg1;
    reg [119:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1;
    reg [119:0] regs_regs_1_lpi_2_dfm_sg1;
    reg [119:0] regs_regs_2_lpi_2_dfm_sg1;
    reg [119:0] regs_regs_3_lpi_2_dfm_sg1;
    reg [29:0] regs_regs_4_lpi_2_dfm_sg1;
    reg ACC1_or_cse;
    reg SHIFT_i_1_sva_2_sg1;
    reg [1:0] SHIFT_i_1_sva_3;

    reg[2:0] select_0;
    reg[15:0] ACC2_mux_nl;
    reg[15:0] ACC2_mux_1_nl;
    reg[15:0] ACC2_mux_2_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        regs_regs_2_sva_sg1 = 120'b0;
        regs_regs_1_sva_sg1 = 120'b0;
        regs_regs_3_sva_sg1 = 120'b0;
        regs_regs_0_sva = 150'b0;
        regs_regs_4_sva_sg1 = 30'b0;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            regs_regs_4_lpi_2_sg1 = regs_regs_4_sva_sg1;
            regs_regs_3_lpi_2_sg1 = regs_regs_3_sva_sg1;
            regs_regs_1_lpi_2_sg1 = regs_regs_1_sva_sg1;
            regs_regs_2_lpi_2_sg1 = regs_regs_2_sva_sg1;
            regs_regs_0_lpi_2 = regs_regs_0_sva;
            red_1_sva = 16'b0;
            green_1_sva = 16'b0;
            blue_1_sva = 16'b0;
            bx_2_sva = 16'b0;
            bx_1_sva = 16'b0;
            bx_3_sva = 16'b0;
            bx_0_sva = 16'b0;
            gx_2_sva = 16'b0;
            gx_1_sva = 16'b0;
            gx_3_sva = 16'b0;
            gx_0_sva = 16'b0;
            rx_2_sva = 16'b0;
            rx_1_sva = 16'b0;
            rx_3_sva = 16'b0;
            rx_0_sva = 16'b0;
            SHIFT_i_1_sva_3 = 2'b0;
            SHIFT_i_1_sva_2_sg1 = 1'b1;
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            begin : SHIFTExit
              forever begin : SHIFT
                // C-Step 0 of Loop 'SHIFT'
                begin : waitLoop1Exit
                  forever begin : waitLoop1
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop1Exit;
                  end
                end
                // C-Step 1 of Loop 'SHIFT'
                SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = 120'b0;
                unequal_tmp = SHIFT_i_1_sva_2_sg1 | (SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]);
                select_0 = {SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3};
                case (select_0)
                  3'b0 : begin
                    // NOP
                  end
                  default : begin
                    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = MUX_v_120_4_2({(regs_regs_0_lpi_2[149:30])
                        , regs_regs_1_lpi_2_sg1 , regs_regs_2_lpi_2_sg1 , regs_regs_3_lpi_2_sg1},
                        SHIFT_i_1_sva_3 + 2'b11);
                  end
                endcase
                regs_regs_0_lpi_2_dfm = MUX_v_150_2_2({regs_operator_din_sva , regs_regs_0_lpi_2},
                    unequal_tmp);
                regs_regs_1_lpi_2_dfm_sg1 = MUX_v_120_2_2({regs_regs_1_lpi_2_sg1
                    , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1}, (~ (SHIFT_i_1_sva_3[1]))
                    & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_2_lpi_2_dfm_sg1 = MUX_v_120_2_2({regs_regs_2_lpi_2_sg1
                    , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1}, (SHIFT_i_1_sva_3[1])
                    & (~ (SHIFT_i_1_sva_3[0])) & unequal_tmp);
                regs_regs_3_lpi_2_dfm_sg1 = MUX_v_120_2_2({regs_regs_3_lpi_2_sg1
                    , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1}, (SHIFT_i_1_sva_3[1])
                    & (SHIFT_i_1_sva_3[0]) & unequal_tmp);
                regs_regs_4_lpi_2_dfm_sg1 = MUX_v_30_2_2({regs_regs_4_lpi_2_sg1 ,
                    (SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1[119:90])},
                    (~((SHIFT_i_1_sva_3[1]) | (SHIFT_i_1_sva_3[0]))) & unequal_tmp);
                SHIFT_acc_1_psp = ({SHIFT_i_1_sva_2_sg1 , SHIFT_i_1_sva_3}) + 3'b111;
                if ( SHIFT_acc_1_psp[2] )
                  disable SHIFTExit;
                regs_regs_0_lpi_2 = regs_regs_0_lpi_2_dfm;
                regs_regs_1_lpi_2_sg1 = regs_regs_1_lpi_2_dfm_sg1;
                regs_regs_2_lpi_2_sg1 = regs_regs_2_lpi_2_dfm_sg1;
                regs_regs_3_lpi_2_sg1 = regs_regs_3_lpi_2_dfm_sg1;
                regs_regs_4_lpi_2_sg1 = regs_regs_4_lpi_2_dfm_sg1;
                SHIFT_i_1_sva_3 = SHIFT_acc_1_psp[1:0];
                SHIFT_i_1_sva_2_sg1 = 1'b0;
              end
            end
            i_4_sva = 3'b0;
            begin : ACC1Exit
              forever begin : ACC1
                // C-Step 0 of Loop 'ACC1'
                begin : waitLoop2Exit
                  forever begin : waitLoop2
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop2Exit;
                  end
                end
                // C-Step 1 of Loop 'ACC1'
                bx_3_sva_1 = 16'b0;
                gx_3_sva_1 = 16'b0;
                rx_3_sva_1 = 16'b0;
                bx_2_sva_1 = 16'b0;
                gx_2_sva_1 = 16'b0;
                rx_2_sva_1 = 16'b0;
                bx_1_sva_1 = 16'b0;
                gx_1_sva_1 = 16'b0;
                rx_1_sva_1 = 16'b0;
                bx_0_sva_1 = 16'b0;
                gx_0_sva_1 = 16'b0;
                rx_0_sva_1 = 16'b0;
                equal_tmp = (i_4_sva[0]) & (~((i_4_sva[2]) | (i_4_sva[1])));
                equal_tmp_1 = (i_4_sva[1]) & (~((i_4_sva[2]) | (i_4_sva[0])));
                equal_tmp_2 = (i_4_sva[1]) & (i_4_sva[0]) & (~ (i_4_sva[2]));
                equal_tmp_3 = (i_4_sva[2]) & (~((i_4_sva[1]) | (i_4_sva[0])));
                case (i_4_sva)
                  3'b0 : begin
                    rx_0_sva_1 = rx_0_sva + conv_u2s_10_16(regs_regs_0_lpi_2_dfm[29:20]);
                    gx_0_sva_1 = gx_0_sva + conv_u2s_10_16(regs_regs_0_lpi_2_dfm[19:10]);
                    bx_0_sva_1 = bx_0_sva + conv_u2s_10_16(regs_regs_0_lpi_2_dfm[9:0]);
                  end
                  3'b1 : begin
                    rx_1_sva_1 = rx_1_sva + conv_u2s_10_16(regs_regs_1_lpi_2_dfm_sg1[29:20]);
                    gx_1_sva_1 = gx_1_sva + conv_u2s_10_16(regs_regs_1_lpi_2_dfm_sg1[19:10]);
                    bx_1_sva_1 = bx_1_sva + conv_u2s_10_16(regs_regs_1_lpi_2_dfm_sg1[9:0]);
                  end
                  3'b10 : begin
                    rx_2_sva_1 = rx_2_sva + conv_u2s_10_16(regs_regs_2_lpi_2_dfm_sg1[59:50]);
                    gx_2_sva_1 = gx_2_sva + conv_u2s_10_16(regs_regs_2_lpi_2_dfm_sg1[49:40]);
                    bx_2_sva_1 = bx_2_sva + conv_u2s_10_16(regs_regs_2_lpi_2_dfm_sg1[39:30]);
                  end
                  3'b11 : begin
                    rx_3_sva_1 = rx_3_sva + conv_u2s_10_16(regs_regs_3_lpi_2_dfm_sg1[89:80]);
                    gx_3_sva_1 = gx_3_sva + conv_u2s_10_16(regs_regs_3_lpi_2_dfm_sg1[79:70]);
                    bx_3_sva_1 = bx_3_sva + conv_u2s_10_16(regs_regs_3_lpi_2_dfm_sg1[69:60]);
                  end
                  default : begin
                    // NOP
                  end
                endcase
                ACC1_or_cse = equal_tmp | equal_tmp_1 | equal_tmp_2 | equal_tmp_3;
                rx_0_sva_dfm = MUX_v_16_2_2({rx_0_sva_1 , rx_0_sva}, ACC1_or_cse);
                rx_1_sva_dfm = MUX_v_16_2_2({rx_1_sva , rx_1_sva_1}, equal_tmp);
                rx_2_sva_dfm = MUX_v_16_2_2({rx_2_sva , rx_2_sva_1}, equal_tmp_1);
                rx_3_sva_dfm = MUX_v_16_2_2({rx_3_sva , rx_3_sva_1}, equal_tmp_2);
                gx_0_sva_dfm = MUX_v_16_2_2({gx_0_sva_1 , gx_0_sva}, ACC1_or_cse);
                gx_1_sva_dfm = MUX_v_16_2_2({gx_1_sva , gx_1_sva_1}, equal_tmp);
                gx_2_sva_dfm = MUX_v_16_2_2({gx_2_sva , gx_2_sva_1}, equal_tmp_1);
                gx_3_sva_dfm = MUX_v_16_2_2({gx_3_sva , gx_3_sva_1}, equal_tmp_2);
                bx_0_sva_dfm = MUX_v_16_2_2({bx_0_sva_1 , bx_0_sva}, ACC1_or_cse);
                bx_1_sva_dfm = MUX_v_16_2_2({bx_1_sva , bx_1_sva_1}, equal_tmp);
                bx_2_sva_dfm = MUX_v_16_2_2({bx_2_sva , bx_2_sva_1}, equal_tmp_1);
                bx_3_sva_dfm = MUX_v_16_2_2({bx_3_sva , bx_3_sva_1}, equal_tmp_2);
                rx_4_1_sva_dfm = (regs_regs_4_lpi_2_dfm_sg1[29:20]) & ({{9{equal_tmp_3}},
                    equal_tmp_3});
                gx_4_1_sva_dfm = (regs_regs_4_lpi_2_dfm_sg1[19:10]) & ({{9{equal_tmp_3}},
                    equal_tmp_3});
                bx_4_1_sva_dfm = (regs_regs_4_lpi_2_dfm_sg1[9:0]) & ({{9{equal_tmp_3}},
                    equal_tmp_3});
                i_4_sva_1 = i_4_sva + 3'b1;
                if ( ~ (readslicef_4_1_3((conv_u2s_3_4(i_4_sva_1) + 4'b1011))) )
                  disable ACC1Exit;
                rx_0_sva = rx_0_sva_dfm;
                rx_1_sva = rx_1_sva_dfm;
                rx_2_sva = rx_2_sva_dfm;
                rx_3_sva = rx_3_sva_dfm;
                gx_0_sva = gx_0_sva_dfm;
                gx_1_sva = gx_1_sva_dfm;
                gx_2_sva = gx_2_sva_dfm;
                gx_3_sva = gx_3_sva_dfm;
                bx_0_sva = bx_0_sva_dfm;
                bx_1_sva = bx_1_sva_dfm;
                bx_2_sva = bx_2_sva_dfm;
                bx_3_sva = bx_3_sva_dfm;
                i_4_sva = i_4_sva_1;
              end
            end
            i_3_sva = 3'b0;
            begin : ACC2Exit
              forever begin : ACC2
                // C-Step 0 of Loop 'ACC2'
                begin : waitLoop3Exit
                  forever begin : waitLoop3
                    @(posedge clk or negedge ( arst_n ));
                    if ( ~ arst_n )
                      disable core_rlpExit;
                    if ( en )
                      disable waitLoop3Exit;
                  end
                end
                // C-Step 1 of Loop 'ACC2'
                ACC2_mux_nl = MUX_v_16_8_2({rx_0_sva_dfm , rx_1_sva_dfm , rx_2_sva_dfm
                    , rx_3_sva_dfm , ({6'b0 , rx_4_1_sva_dfm}) , 16'b0 , 16'b0 ,
                    16'b0}, i_3_sva);
                red_1_sva_1 = red_1_sva + (ACC2_mux_nl);
                ACC2_mux_1_nl = MUX_v_16_8_2({gx_0_sva_dfm , gx_1_sva_dfm , gx_2_sva_dfm
                    , gx_3_sva_dfm , ({6'b0 , gx_4_1_sva_dfm}) , 16'b0 , 16'b0 ,
                    16'b0}, i_3_sva);
                green_1_sva_1 = green_1_sva + (ACC2_mux_1_nl);
                ACC2_mux_2_nl = MUX_v_16_8_2({bx_0_sva_dfm , bx_1_sva_dfm , bx_2_sva_dfm
                    , bx_3_sva_dfm , ({6'b0 , bx_4_1_sva_dfm}) , 16'b0 , 16'b0 ,
                    16'b0}, i_3_sva);
                blue_1_sva_1 = blue_1_sva + (ACC2_mux_2_nl);
                i_3_sva_1 = i_3_sva + 3'b1;
                if ( ~ (readslicef_4_1_3((conv_u2s_3_4(i_3_sva_1) + 4'b1011))) )
                  disable ACC2Exit;
                red_1_sva = red_1_sva_1;
                green_1_sva = green_1_sva_1;
                blue_1_sva = blue_1_sva_1;
                i_3_sva = i_3_sva_1;
              end
            end
            regs_regs_0_sva = regs_regs_0_lpi_2_dfm;
            regs_regs_1_sva_sg1 = regs_regs_1_lpi_2_dfm_sg1;
            regs_regs_2_sva_sg1 = regs_regs_2_lpi_2_dfm_sg1;
            regs_regs_3_sva_sg1 = regs_regs_3_lpi_2_dfm_sg1;
            regs_regs_4_sva_sg1 = regs_regs_4_lpi_2_dfm_sg1;
            begin : waitLoop4Exit
              forever begin : waitLoop4
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop4Exit;
              end
            end
            // C-Step 2 of Loop 'main'
            acc_imod_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(red_1_sva_1[5:4])
                + conv_u2u_2_3(~ (red_1_sva_1[7:6]))) + conv_u2u_3_4(conv_u2u_2_3(red_1_sva_1[9:8])
                + conv_u2u_2_3(~ (red_1_sva_1[11:10])))) + conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(red_1_sva_1[13:12])
                + conv_u2u_2_3(~ (red_1_sva_1[15:14]))) + conv_u2u_2_4(~ (red_1_sva_1[3:2]))))
                + ({3'b101 , (red_1_sva_1[1:0])});
            FRAME_acc_15_itm = conv_s2s_4_5(({2'b10 , (red_1_sva_1[3:2])}) + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(red_1_sva_1[5:4])
                , 1'b1}) + conv_u2u_3_4({(acc_imod_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(red_1_sva_1[5:4])
                , (acc_imod_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_sva[4])) , 1'b1
                , (~ (readslicef_4_1_3((({1'b1 , (acc_imod_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~
                (acc_imod_sva[3:2])) , (~ (acc_imod_sva[4]))})))))}));
            acc_imod_2_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(blue_1_sva_1[5:4])
                + conv_u2u_2_3(~ (blue_1_sva_1[7:6]))) + conv_u2u_3_4(conv_u2u_2_3(blue_1_sva_1[9:8])
                + conv_u2u_2_3(~ (blue_1_sva_1[11:10])))) + conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(blue_1_sva_1[13:12])
                + conv_u2u_2_3(~ (blue_1_sva_1[15:14]))) + conv_u2u_2_4(~ (blue_1_sva_1[3:2]))))
                + ({3'b101 , (blue_1_sva_1[1:0])});
            FRAME_acc_30_itm = conv_s2s_4_5(({2'b10 , (blue_1_sva_1[3:2])}) + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(blue_1_sva_1[5:4])
                , 1'b1}) + conv_u2u_3_4({(acc_imod_2_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(blue_1_sva_1[5:4])
                , (acc_imod_2_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_2_sva[4])) ,
                1'b1 , (~ (readslicef_4_1_3((({1'b1 , (acc_imod_2_sva[1:0]) , 1'b1})
                + conv_u2s_3_4({(~ (acc_imod_2_sva[3:2])) , (~ (acc_imod_2_sva[4]))})))))}));
            acc_imod_4_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(green_1_sva_1[5:4])
                + conv_u2u_2_3(~ (green_1_sva_1[7:6]))) + conv_u2u_3_4(conv_u2u_2_3(green_1_sva_1[9:8])
                + conv_u2u_2_3(~ (green_1_sva_1[11:10])))) + conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(green_1_sva_1[13:12])
                + conv_u2u_2_3(~ (green_1_sva_1[15:14]))) + conv_u2u_2_4(~ (green_1_sva_1[3:2]))))
                + ({3'b101 , (green_1_sva_1[1:0])});
            FRAME_acc_46_itm = conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(green_1_sva_1[7:6])
                * 6'b1101)) + conv_s2s_5_7(conv_s2s_4_5(({2'b10 , (green_1_sva_1[3:2])})
                + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(green_1_sva_1[5:4])
                , 1'b1}) + conv_u2u_3_4({(acc_imod_4_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(green_1_sva_1[5:4])
                , (acc_imod_4_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_4_sva[4])) ,
                1'b1 , (~ (readslicef_4_1_3((({1'b1 , (acc_imod_4_sva[1:0]) , 1'b1})
                + conv_u2s_3_4({(~ (acc_imod_4_sva[3:2])) , (~ (acc_imod_4_sva[4]))})))))})));
            begin : waitLoop5Exit
              forever begin : waitLoop5
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop5Exit;
              end
            end
            // C-Step 3 of Loop 'main'
            FRAME_acc_31_itm = conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(blue_1_sva_1[7:6])
                * 6'b1101)) + conv_s2s_5_7(FRAME_acc_30_itm);
            begin : waitLoop6Exit
              forever begin : waitLoop6
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop6Exit;
              end
            end
            // C-Step 4 of Loop 'main'
            FRAME_acc_16_itm = conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(red_1_sva_1[7:6])
                * 6'b1101)) + conv_s2s_5_7(FRAME_acc_15_itm);
            begin : waitLoop7Exit
              forever begin : waitLoop7
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop7Exit;
              end
            end
            // C-Step 5 of Loop 'main'
            FRAME_acc_47_itm = conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(green_1_sva_1[9:8])
                * 8'b110011)) + conv_s2s_7_9(FRAME_acc_46_itm);
            begin : waitLoop8Exit
              forever begin : waitLoop8
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop8Exit;
              end
            end
            // C-Step 6 of Loop 'main'
            FRAME_acc_32_itm = conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(blue_1_sva_1[9:8])
                * 8'b110011)) + conv_s2s_7_9(FRAME_acc_31_itm);
            begin : waitLoop9Exit
              forever begin : waitLoop9
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop9Exit;
              end
            end
            // C-Step 7 of Loop 'main'
            FRAME_acc_17_itm = conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(red_1_sva_1[9:8])
                * 8'b110011)) + conv_s2s_7_9(FRAME_acc_16_itm);
            begin : waitLoop10Exit
              forever begin : waitLoop10
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop10Exit;
              end
            end
            // C-Step 8 of Loop 'main'
            FRAME_acc_48_itm = conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(green_1_sva_1[11:10])
                * 10'b11001101)) + conv_s2s_9_11(FRAME_acc_47_itm);
            begin : waitLoop11Exit
              forever begin : waitLoop11
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop11Exit;
              end
            end
            // C-Step 9 of Loop 'main'
            FRAME_acc_33_itm = conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(blue_1_sva_1[11:10])
                * 10'b11001101)) + conv_s2s_9_11(FRAME_acc_32_itm);
            begin : waitLoop12Exit
              forever begin : waitLoop12
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop12Exit;
              end
            end
            // C-Step 10 of Loop 'main'
            FRAME_acc_18_itm = conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(red_1_sva_1[11:10])
                * 10'b11001101)) + conv_s2s_9_11(FRAME_acc_17_itm);
            begin : waitLoop13Exit
              forever begin : waitLoop13
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop13Exit;
              end
            end
            // C-Step 11 of Loop 'main'
            FRAME_acc_49_itm = conv_u2s_12_14(conv_u2s_24_13(conv_u2u_2_12(green_1_sva_1[13:12])
                * 12'b1100110011)) + conv_s2s_11_13(FRAME_acc_48_itm);
            begin : waitLoop14Exit
              forever begin : waitLoop14
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop14Exit;
              end
            end
            // C-Step 12 of Loop 'main'
            FRAME_acc_34_itm = conv_u2s_12_14(conv_u2s_24_13(conv_u2u_2_12(blue_1_sva_1[13:12])
                * 12'b1100110011)) + conv_s2s_11_13(FRAME_acc_33_itm);
            begin : waitLoop15Exit
              forever begin : waitLoop15
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop15Exit;
              end
            end
            // C-Step 13 of Loop 'main'
            FRAME_acc_19_itm = conv_u2s_12_14(conv_u2s_24_13(conv_u2u_2_12(red_1_sva_1[13:12])
                * 12'b1100110011)) + conv_s2s_11_13(FRAME_acc_18_itm);
            begin : waitLoop16Exit
              forever begin : waitLoop16
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop16Exit;
              end
            end
            // C-Step 14 of Loop 'main'
            absmax_absmax_return_6_lpi_1_dfm = 10'b0;
            FRAME_acc_4_psp_sva = conv_s2u_13_14(FRAME_acc_49_itm) + conv_u2u_28_14(conv_u2u_2_14(green_1_sva_1[15:14])
                * 14'b110011001101);
            absmax_1_slc_svs = readslicef_5_1_4((({1'b1 , (~ (FRAME_acc_4_psp_sva[13:10]))})
                + 5'b1));
            if ( absmax_1_slc_svs ) begin
            end
            else begin
              absmax_absmax_return_6_lpi_1_dfm = (FRAME_acc_4_psp_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
                  , (~ (FRAME_acc_4_psp_sva[9:0]))}) + 11'b1))));
            end
            absmax_1_or_itm = absmax_absmax_return_6_lpi_1_dfm | ({{9{absmax_1_slc_svs}},
                absmax_1_slc_svs});
            begin : waitLoop17Exit
              forever begin : waitLoop17
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop17Exit;
              end
            end
            // C-Step 15 of Loop 'main'
            absmax_absmax_return_7_lpi_1_dfm = 10'b0;
            FRAME_acc_3_psp_sva = conv_s2u_13_14(FRAME_acc_34_itm) + conv_u2u_28_14(conv_u2u_2_14(blue_1_sva_1[15:14])
                * 14'b110011001101);
            absmax_2_slc_svs = readslicef_5_1_4((({1'b1 , (~ (FRAME_acc_3_psp_sva[13:10]))})
                + 5'b1));
            if ( absmax_2_slc_svs ) begin
            end
            else begin
              absmax_absmax_return_7_lpi_1_dfm = (FRAME_acc_3_psp_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
                  , (~ (FRAME_acc_3_psp_sva[9:0]))}) + 11'b1))));
            end
            absmax_2_or_itm = absmax_absmax_return_7_lpi_1_dfm | ({{9{absmax_2_slc_svs}},
                absmax_2_slc_svs});
            begin : waitLoop18Exit
              forever begin : waitLoop18
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop18Exit;
              end
            end
            // C-Step 16 of Loop 'main'
            absmax_absmax_return_3_lpi_1_dfm = 10'b0;
            FRAME_acc_2_psp_sva = conv_s2u_13_14(FRAME_acc_19_itm) + conv_u2u_28_14(conv_u2u_2_14(red_1_sva_1[15:14])
                * 14'b110011001101);
            absmax_slc_svs = readslicef_5_1_4((({1'b1 , (~ (FRAME_acc_2_psp_sva[13:10]))})
                + 5'b1));
            if ( absmax_slc_svs ) begin
            end
            else begin
              absmax_absmax_return_3_lpi_1_dfm = (FRAME_acc_2_psp_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
                  , (~ (FRAME_acc_2_psp_sva[9:0]))}) + 11'b1))));
            end
            vout_rsc_mgc_out_stdreg_d <= {(absmax_absmax_return_3_lpi_1_dfm | ({{9{absmax_slc_svs}},
                absmax_slc_svs})) , absmax_2_or_itm , absmax_1_or_itm};
            begin : waitLoop19Exit
              forever begin : waitLoop19
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop19Exit;
              end
            end
            // C-Step 17 of Loop 'main'
          end
        end
      end
    end
    SHIFT_i_1_sva_3 = 2'b0;
    SHIFT_i_1_sva_2_sg1 = 1'b0;
    ACC1_or_cse = 1'b0;
    regs_regs_4_lpi_2_dfm_sg1 = 30'b0;
    regs_regs_3_lpi_2_dfm_sg1 = 120'b0;
    regs_regs_2_lpi_2_dfm_sg1 = 120'b0;
    regs_regs_1_lpi_2_dfm_sg1 = 120'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = 120'b0;
    regs_regs_4_lpi_2_sg1 = 30'b0;
    regs_regs_3_lpi_2_sg1 = 120'b0;
    regs_regs_1_lpi_2_sg1 = 120'b0;
    regs_regs_2_lpi_2_sg1 = 120'b0;
    regs_regs_4_sva_sg1 = 30'b0;
    regs_regs_3_sva_sg1 = 120'b0;
    regs_regs_1_sva_sg1 = 120'b0;
    regs_regs_2_sva_sg1 = 120'b0;
    absmax_1_or_itm = 10'b0;
    absmax_2_or_itm = 10'b0;
    FRAME_acc_49_itm = 13'b0;
    FRAME_acc_48_itm = 11'b0;
    FRAME_acc_47_itm = 9'b0;
    FRAME_acc_46_itm = 7'b0;
    FRAME_acc_34_itm = 13'b0;
    FRAME_acc_33_itm = 11'b0;
    FRAME_acc_32_itm = 9'b0;
    FRAME_acc_31_itm = 7'b0;
    FRAME_acc_30_itm = 5'b0;
    FRAME_acc_19_itm = 13'b0;
    FRAME_acc_18_itm = 11'b0;
    FRAME_acc_17_itm = 9'b0;
    FRAME_acc_16_itm = 7'b0;
    FRAME_acc_15_itm = 5'b0;
    SHIFT_acc_1_psp = 3'b0;
    absmax_absmax_return_7_lpi_1_dfm = 10'b0;
    absmax_2_slc_svs = 1'b0;
    absmax_absmax_return_6_lpi_1_dfm = 10'b0;
    absmax_1_slc_svs = 1'b0;
    absmax_absmax_return_3_lpi_1_dfm = 10'b0;
    absmax_slc_svs = 1'b0;
    FRAME_acc_4_psp_sva = 14'b0;
    acc_imod_4_sva = 5'b0;
    FRAME_acc_3_psp_sva = 14'b0;
    acc_imod_2_sva = 5'b0;
    FRAME_acc_2_psp_sva = 14'b0;
    acc_imod_sva = 5'b0;
    i_3_sva_1 = 3'b0;
    blue_1_sva_1 = 16'b0;
    green_1_sva_1 = 16'b0;
    red_1_sva_1 = 16'b0;
    i_3_sva = 3'b0;
    i_4_sva_1 = 3'b0;
    bx_4_1_sva_dfm = 10'b0;
    gx_4_1_sva_dfm = 10'b0;
    rx_4_1_sva_dfm = 10'b0;
    bx_3_sva_dfm = 16'b0;
    bx_2_sva_dfm = 16'b0;
    bx_1_sva_dfm = 16'b0;
    bx_0_sva_dfm = 16'b0;
    gx_3_sva_dfm = 16'b0;
    gx_2_sva_dfm = 16'b0;
    gx_1_sva_dfm = 16'b0;
    gx_0_sva_dfm = 16'b0;
    rx_3_sva_dfm = 16'b0;
    rx_2_sva_dfm = 16'b0;
    rx_1_sva_dfm = 16'b0;
    rx_0_sva_dfm = 16'b0;
    equal_tmp_3 = 1'b0;
    bx_3_sva_1 = 16'b0;
    gx_3_sva_1 = 16'b0;
    rx_3_sva_1 = 16'b0;
    equal_tmp_2 = 1'b0;
    bx_2_sva_1 = 16'b0;
    gx_2_sva_1 = 16'b0;
    rx_2_sva_1 = 16'b0;
    equal_tmp_1 = 1'b0;
    bx_1_sva_1 = 16'b0;
    gx_1_sva_1 = 16'b0;
    rx_1_sva_1 = 16'b0;
    equal_tmp = 1'b0;
    bx_0_sva_1 = 16'b0;
    gx_0_sva_1 = 16'b0;
    rx_0_sva_1 = 16'b0;
    i_4_sva = 3'b0;
    regs_regs_0_lpi_2_dfm = 150'b0;
    unequal_tmp = 1'b0;
    regs_operator_din_sva = 150'b0;
    rx_0_sva = 16'b0;
    rx_3_sva = 16'b0;
    rx_1_sva = 16'b0;
    rx_2_sva = 16'b0;
    gx_0_sva = 16'b0;
    gx_3_sva = 16'b0;
    gx_1_sva = 16'b0;
    gx_2_sva = 16'b0;
    bx_0_sva = 16'b0;
    bx_3_sva = 16'b0;
    bx_1_sva = 16'b0;
    bx_2_sva = 16'b0;
    blue_1_sva = 16'b0;
    green_1_sva = 16'b0;
    red_1_sva = 16'b0;
    regs_regs_0_lpi_2 = 150'b0;
    regs_regs_0_sva = 150'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [119:0] MUX_v_120_4_2;
    input [479:0] inputs;
    input [1:0] sel;
    reg [119:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[479:360];
      end
      2'b01 : begin
        result = inputs[359:240];
      end
      2'b10 : begin
        result = inputs[239:120];
      end
      2'b11 : begin
        result = inputs[119:0];
      end
      default : begin
        result = inputs[479:360];
      end
    endcase
    MUX_v_120_4_2 = result;
  end
  endfunction


  function [149:0] MUX_v_150_2_2;
    input [299:0] inputs;
    input [0:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[299:150];
      end
      1'b1 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[299:150];
      end
    endcase
    MUX_v_150_2_2 = result;
  end
  endfunction


  function [119:0] MUX_v_120_2_2;
    input [239:0] inputs;
    input [0:0] sel;
    reg [119:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[239:120];
      end
      1'b1 : begin
        result = inputs[119:0];
      end
      default : begin
        result = inputs[239:120];
      end
    endcase
    MUX_v_120_2_2 = result;
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX_v_16_8_2;
    input [127:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[127:112];
      end
      3'b001 : begin
        result = inputs[111:96];
      end
      3'b010 : begin
        result = inputs[95:80];
      end
      3'b011 : begin
        result = inputs[79:64];
      end
      3'b100 : begin
        result = inputs[63:48];
      end
      3'b101 : begin
        result = inputs[47:32];
      end
      3'b110 : begin
        result = inputs[31:16];
      end
      3'b111 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[127:112];
      end
    endcase
    MUX_v_16_8_2 = result;
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [0:0] readslicef_5_1_4;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_5_1_4 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function signed [15:0] conv_u2s_10_16 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_16 = {{6{1'b0}}, vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_12_7 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_7 = vector[6:0];
  end
  endfunction


  function  [5:0] conv_u2u_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_8_10 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_10 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_16_9 ;
    input [15:0]  vector ;
  begin
    conv_u2s_16_9 = vector[8:0];
  end
  endfunction


  function  [7:0] conv_u2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_8 = {{6{1'b0}}, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_20_11 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_11 = vector[10:0];
  end
  endfunction


  function  [9:0] conv_u2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_10 = {{8{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [13:0] conv_u2s_12_14 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_14 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [12:0] conv_u2s_24_13 ;
    input [23:0]  vector ;
  begin
    conv_u2s_24_13 = vector[12:0];
  end
  endfunction


  function  [11:0] conv_u2u_2_12 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_12 = {{10{1'b0}}, vector};
  end
  endfunction


  function signed [12:0] conv_s2s_11_13 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function  [13:0] conv_s2u_13_14 ;
    input signed [12:0]  vector ;
  begin
    conv_s2u_13_14 = {vector[12], vector};
  end
  endfunction


  function  [13:0] conv_u2u_28_14 ;
    input [27:0]  vector ;
  begin
    conv_u2u_28_14 = vector[13:0];
  end
  endfunction


  function  [13:0] conv_u2u_2_14 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_14 = {{12{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    motion_blur
//  Generated from file(s):
//   57) $PROJECT_HOME/../motionblur/motionblur1.c
// ------------------------------------------------------------------


module motion_blur (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  motion_blur_core motion_blur_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



