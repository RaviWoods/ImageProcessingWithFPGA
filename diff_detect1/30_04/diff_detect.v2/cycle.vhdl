-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   rbw14@EEWS104A-015
--  Generated date: Thu Apr 30 13:04:26 2015
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    diff_detect_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.diff_detect_mux_pkg.ALL;


ENTITY diff_detect_core IS
  PORT(
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_0_0_mgc_in_wire_d : IN STD_LOGIC_VECTOR (29 DOWNTO 0)
  );
END diff_detect_core;

ARCHITECTURE v2 OF diff_detect_core IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  core : PROCESS
    -- Interconnect Declarations
    VARIABLE exit_SHIFT_lpi_1 : STD_LOGIC;
    VARIABLE i_1_lpi_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE exit_ACC1_sva : STD_LOGIC;
    VARIABLE regs_operator_din_1_lpi_1_dfm : STD_LOGIC_VECTOR (29 DOWNTO 0);
    VARIABLE exit_SHIFT_lpi_1_dfm : STD_LOGIC;
    VARIABLE ACC1_slc_1_svs : STD_LOGIC;
    VARIABLE abs_a_4_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE ACC1_land_1_sva_1 : STD_LOGIC;
    VARIABLE ACC1_land_1_lpi_1_dfm : STD_LOGIC;
    VARIABLE abs_a_5_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
    VARIABLE ACC1_land_sva_1 : STD_LOGIC;
    VARIABLE i_1_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE exit_ACC1_sva_2 : STD_LOGIC;
    VARIABLE unequal_tmp : STD_LOGIC;
    VARIABLE i_1_lpi_1_dfm : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE SHIFT_acc_1_psp : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE SHIFT_i_1_lpi_3 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE SHIFT_and_8_ssc : STD_LOGIC;
    VARIABLE regs_regs_2_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
    VARIABLE regs_regs_2_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
    VARIABLE SHIFT_and_7_ssc : STD_LOGIC;
    VARIABLE regs_regs_1_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
    VARIABLE regs_regs_1_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
    VARIABLE SHIFT_and_9_ssc : STD_LOGIC;
    VARIABLE regs_regs_3_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
    VARIABLE regs_regs_3_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
    VARIABLE SHIFT_or_5_ssc : STD_LOGIC;
    VARIABLE regs_regs_0_1_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
    VARIABLE regs_regs_0_1_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
    VARIABLE SHIFT_and_10_ssc : STD_LOGIC;
    VARIABLE regs_regs_4_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
    VARIABLE regs_regs_4_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
    VARIABLE SHIFT_i_1_lpi_1_dfm_2 : STD_LOGIC_VECTOR (2 DOWNTO 0);
    VARIABLE SHIFT_if_else_else_else_acc_ssc : STD_LOGIC_VECTOR (1 DOWNTO 0);
    VARIABLE SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 : STD_LOGIC_VECTOR
        (7 DOWNTO 0);
    VARIABLE SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 : STD_LOGIC_VECTOR
        (19 DOWNTO 0);

    VARIABLE regs_operator_mux_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  BEGIN
    core_rlp : LOOP
      -- C-Step 0 of Loop 'core_rlp'
      i_1_lpi_1 := STD_LOGIC_VECTOR'("000");
      exit_SHIFT_lpi_1 := '0';
      SHIFT_i_1_lpi_3 := STD_LOGIC_VECTOR'("000");
      regs_regs_2_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_2_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
      regs_regs_1_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_1_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
      regs_regs_3_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_3_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
      regs_regs_0_1_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_0_1_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
      regs_regs_4_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_4_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
      exit_ACC1_sva := '1';
      main : LOOP
        -- C-Step 0 of Loop 'main'
        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( arst_n
            = '0' );
        EXIT core_rlp WHEN ( arst_n = '0' );
        -- C-Step 1 of Loop 'main'
        unequal_tmp := '0';
        SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 := STD_LOGIC_VECTOR'("00000000000000000000");
        SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
        SHIFT_acc_1_psp := STD_LOGIC_VECTOR'("000");
        i_1_lpi_1_dfm := STD_LOGIC_VECTOR'("000");
        exit_ACC1_sva_2 := '0';
        i_1_sva := STD_LOGIC_VECTOR'("000");
        ACC1_land_sva_1 := '0';
        ACC1_land_1_sva_1 := '0';
        IF ( exit_ACC1_sva = '1' ) THEN
          SHIFT_i_1_lpi_1_dfm_2 := STD_LOGIC_VECTOR'("100");
          regs_operator_din_1_lpi_1_dfm := vin_rsc_0_0_mgc_in_wire_d;
        ELSE
          SHIFT_i_1_lpi_1_dfm_2 := SHIFT_i_1_lpi_3;
        END IF;
        exit_SHIFT_lpi_1_dfm := exit_SHIFT_lpi_1 AND (NOT exit_ACC1_sva);
        IF ( exit_SHIFT_lpi_1_dfm = '1' ) THEN
          regs_operator_mux_nl := MUX_v_8_8_2(regs_regs_0_1_sva_sg2 & regs_regs_1_sva_sg2
              & regs_regs_2_sva_sg2 & regs_regs_3_sva_sg2 & regs_regs_4_sva_sg2 &
              STD_LOGIC_VECTOR'("00000000") & STD_LOGIC_VECTOR'("00000000") & STD_LOGIC_VECTOR'("00000000"),
              i_1_lpi_1);
          ACC1_slc_1_svs := readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED(NOT
              (regs_operator_mux_nl)), 9) + CONV_SIGNED(SIGNED'("1011"), 9), 9)),
              8);
          IF ( ACC1_slc_1_svs = '1' ) THEN
            abs_a_4_sva := MUX_v_10_8_2((regs_regs_0_1_sva_2(19 DOWNTO 10)) & (regs_regs_1_sva_2(19
                DOWNTO 10)) & (regs_regs_2_sva_2(19 DOWNTO 10)) & (regs_regs_3_sva_2(19
                DOWNTO 10)) & (regs_regs_4_sva_2(19 DOWNTO 10)) & STD_LOGIC_VECTOR'("0000000000")
                & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000"),
                i_1_lpi_1);
            ACC1_land_1_sva_1 := readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED((abs_a_4_sva(9
                DOWNTO 2)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
                & (NOT abs_a_4_sva)) + CONV_SIGNED(CONV_UNSIGNED('1', 1), 11), 11)),
                10), 1),8))), 9) + CONV_SIGNED(SIGNED'("1011"), 9), 9)), 8);
          END IF;
          ACC1_land_1_lpi_1_dfm := ACC1_land_1_sva_1 AND ACC1_slc_1_svs;
          IF ( ACC1_land_1_lpi_1_dfm = '1' ) THEN
            abs_a_5_sva := MUX_v_10_8_2((regs_regs_0_1_sva_2(9 DOWNTO 0)) & (regs_regs_1_sva_2(9
                DOWNTO 0)) & (regs_regs_2_sva_2(9 DOWNTO 0)) & (regs_regs_3_sva_2(9
                DOWNTO 0)) & (regs_regs_4_sva_2(9 DOWNTO 0)) & STD_LOGIC_VECTOR'("0000000000")
                & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000"),
                i_1_lpi_1);
            ACC1_land_sva_1 := readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED((abs_a_5_sva(9
                DOWNTO 2)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
                & (NOT abs_a_5_sva)) + CONV_SIGNED(CONV_UNSIGNED('1', 1), 11), 11)),
                10), 1),8))), 9) + CONV_SIGNED(SIGNED'("1011"), 9), 9)), 8);
          END IF;
          vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2(regs_operator_din_1_lpi_1_dfm
              & STD_LOGIC_VECTOR'("111111111100000000000000000000"), ACC1_land_sva_1
              AND ACC1_land_1_lpi_1_dfm);
          i_1_sva := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_1_lpi_1) + CONV_UNSIGNED(CONV_UNSIGNED('1',
              1), 3), 3));
          exit_ACC1_sva_2 := NOT (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED(i_1_sva),
              4) + SIGNED'("1011"), 4)), 3));
        ELSE
          unequal_tmp := (SHIFT_i_1_lpi_1_dfm_2(2)) OR (SHIFT_i_1_lpi_1_dfm_2(1))
              OR (SHIFT_i_1_lpi_1_dfm_2(0));
          CASE SHIFT_i_1_lpi_1_dfm_2 IS
            WHEN "000" =>
              -- NOP
            WHEN OTHERS =>
              SHIFT_if_else_else_else_acc_ssc := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(SHIFT_i_1_lpi_1_dfm_2(1
                  DOWNTO 0)) + CONV_UNSIGNED(CONV_SIGNED('1', 1), 2), 2));
              SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 := MUX_v_20_4_2(regs_regs_0_1_sva_2
                  & regs_regs_1_sva_2 & regs_regs_2_sva_2 & regs_regs_3_sva_2, SHIFT_if_else_else_else_acc_ssc);
              SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 := MUX_v_8_4_2(regs_regs_0_1_sva_sg2
                  & regs_regs_1_sva_sg2 & regs_regs_2_sva_sg2 & regs_regs_3_sva_sg2,
                  SHIFT_if_else_else_else_acc_ssc);
          END CASE;
          SHIFT_acc_1_psp := STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(SHIFT_i_1_lpi_1_dfm_2)
              + CONV_SIGNED(CONV_SIGNED('1', 1), 3), 3));
          i_1_lpi_1_dfm := i_1_lpi_1 AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
              (SHIFT_acc_1_psp(2)), 1),3));
        END IF;
        SHIFT_and_7_ssc := (NOT (SHIFT_i_1_lpi_1_dfm_2(1))) AND (SHIFT_i_1_lpi_1_dfm_2(0))
            AND unequal_tmp AND (NOT exit_SHIFT_lpi_1_dfm);
        regs_regs_1_sva_2 := MUX_v_20_2_2(regs_regs_1_sva_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1,
            SHIFT_and_7_ssc);
        regs_regs_1_sva_sg2 := MUX_v_8_2_2(regs_regs_1_sva_sg2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2,
            SHIFT_and_7_ssc);
        SHIFT_and_8_ssc := (SHIFT_i_1_lpi_1_dfm_2(1)) AND (NOT (SHIFT_i_1_lpi_1_dfm_2(0)))
            AND unequal_tmp AND (NOT exit_SHIFT_lpi_1_dfm);
        regs_regs_2_sva_2 := MUX_v_20_2_2(regs_regs_2_sva_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1,
            SHIFT_and_8_ssc);
        regs_regs_2_sva_sg2 := MUX_v_8_2_2(regs_regs_2_sva_sg2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2,
            SHIFT_and_8_ssc);
        SHIFT_and_9_ssc := (SHIFT_i_1_lpi_1_dfm_2(1)) AND (SHIFT_i_1_lpi_1_dfm_2(0))
            AND unequal_tmp AND (NOT exit_SHIFT_lpi_1_dfm);
        regs_regs_3_sva_2 := MUX_v_20_2_2(regs_regs_3_sva_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1,
            SHIFT_and_9_ssc);
        regs_regs_3_sva_sg2 := MUX_v_8_2_2(regs_regs_3_sva_sg2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2,
            SHIFT_and_9_ssc);
        SHIFT_and_10_ssc := (NOT((SHIFT_i_1_lpi_1_dfm_2(1)) OR (SHIFT_i_1_lpi_1_dfm_2(0))))
            AND unequal_tmp AND (NOT exit_SHIFT_lpi_1_dfm);
        regs_regs_4_sva_2 := MUX_v_20_2_2(regs_regs_4_sva_2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1,
            SHIFT_and_10_ssc);
        regs_regs_4_sva_sg2 := MUX_v_8_2_2(regs_regs_4_sva_sg2 & SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2,
            SHIFT_and_10_ssc);
        i_1_lpi_1 := MUX_v_3_2_2(i_1_lpi_1_dfm & i_1_sva, exit_SHIFT_lpi_1_dfm);
        SHIFT_i_1_lpi_3 := MUX_v_3_2_2(SHIFT_acc_1_psp & SHIFT_i_1_lpi_1_dfm_2, exit_SHIFT_lpi_1_dfm);
        SHIFT_or_5_ssc := unequal_tmp OR exit_SHIFT_lpi_1_dfm;
        regs_regs_0_1_sva_2 := MUX_v_20_2_2((regs_operator_din_1_lpi_1_dfm(19 DOWNTO
            0)) & regs_regs_0_1_sva_2, SHIFT_or_5_ssc);
        regs_regs_0_1_sva_sg2 := MUX_v_8_2_2((regs_operator_din_1_lpi_1_dfm(29 DOWNTO
            22)) & regs_regs_0_1_sva_sg2, SHIFT_or_5_ssc);
        exit_ACC1_sva := exit_ACC1_sva_2 AND exit_SHIFT_lpi_1_dfm;
        exit_SHIFT_lpi_1 := MUX_s_1_2_2(STD_LOGIC_VECTOR'((SHIFT_acc_1_psp(2)) &
            exit_SHIFT_lpi_1_dfm), exit_SHIFT_lpi_1_dfm);
      END LOOP main;

    END LOOP core_rlp;

    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 := STD_LOGIC_VECTOR'("00000000000000000000");
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_if_else_else_else_acc_ssc := STD_LOGIC_VECTOR'("00");
    SHIFT_i_1_lpi_1_dfm_2 := STD_LOGIC_VECTOR'("000");
    regs_regs_4_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
    regs_regs_4_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_and_10_ssc := '0';
    regs_regs_0_1_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
    regs_regs_0_1_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_or_5_ssc := '0';
    regs_regs_3_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
    regs_regs_3_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_and_9_ssc := '0';
    regs_regs_1_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
    regs_regs_1_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_and_7_ssc := '0';
    regs_regs_2_sva_2 := STD_LOGIC_VECTOR'("00000000000000000000");
    regs_regs_2_sva_sg2 := STD_LOGIC_VECTOR'("00000000");
    SHIFT_and_8_ssc := '0';
    SHIFT_i_1_lpi_3 := STD_LOGIC_VECTOR'("000");
    SHIFT_acc_1_psp := STD_LOGIC_VECTOR'("000");
    i_1_lpi_1_dfm := STD_LOGIC_VECTOR'("000");
    unequal_tmp := '0';
    exit_ACC1_sva_2 := '0';
    i_1_sva := STD_LOGIC_VECTOR'("000");
    ACC1_land_sva_1 := '0';
    abs_a_5_sva := STD_LOGIC_VECTOR'("0000000000");
    ACC1_land_1_lpi_1_dfm := '0';
    ACC1_land_1_sva_1 := '0';
    abs_a_4_sva := STD_LOGIC_VECTOR'("0000000000");
    ACC1_slc_1_svs := '0';
    exit_SHIFT_lpi_1_dfm := '0';
    regs_operator_din_1_lpi_1_dfm := STD_LOGIC_VECTOR'("000000000000000000000000000000");
    exit_ACC1_sva := '0';
    i_1_lpi_1 := STD_LOGIC_VECTOR'("000");
    exit_SHIFT_lpi_1 := '0';
    vout_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("000000000000000000000000000000");
  END PROCESS core;

END v2;

-- ------------------------------------------------------------------
--  Design Unit:    diff_detect
--  Generated from file(s):
--    2) $PROJECT_HOME/../../diff_detect1/diff_detect.c
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.diff_detect_mux_pkg.ALL;


ENTITY diff_detect IS
  PORT(
    vin_rsc_0_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_1_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_2_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_3_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_4_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vout_rsc_z : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC
  );
END diff_detect;

ARCHITECTURE v2 OF diff_detect IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_0_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_1_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_2_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_3_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_4_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vout_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vout_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_0_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_0_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_1_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_1_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_2_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_2_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_3_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_3_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_4_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_4_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  COMPONENT diff_detect_core
    PORT(
      clk : IN STD_LOGIC;
      en : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
      vin_rsc_0_0_mgc_in_wire_d : IN STD_LOGIC_VECTOR (29 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO
      0);
  SIGNAL diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments

  vout_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 2,
      width => 30
      )
    PORT MAP(
      d => vout_rsc_mgc_out_stdreg_d_1,
      z => vout_rsc_mgc_out_stdreg_z
    );
  vout_rsc_mgc_out_stdreg_d_1 <= vout_rsc_mgc_out_stdreg_d;
  vout_rsc_z <= vout_rsc_mgc_out_stdreg_z;

  vin_rsc_0_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 4,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_0_0_mgc_in_wire_d_1,
      z => vin_rsc_0_0_mgc_in_wire_z
    );
  vin_rsc_0_0_mgc_in_wire_d <= vin_rsc_0_0_mgc_in_wire_d_1;
  vin_rsc_0_0_mgc_in_wire_z <= vin_rsc_0_0_z;

  vin_rsc_1_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 5,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_1_0_mgc_in_wire_d_1,
      z => vin_rsc_1_0_mgc_in_wire_z
    );
  vin_rsc_1_0_mgc_in_wire_d <= vin_rsc_1_0_mgc_in_wire_d_1;
  vin_rsc_1_0_mgc_in_wire_z <= vin_rsc_1_0_z;

  vin_rsc_2_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 6,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_2_0_mgc_in_wire_d_1,
      z => vin_rsc_2_0_mgc_in_wire_z
    );
  vin_rsc_2_0_mgc_in_wire_d <= vin_rsc_2_0_mgc_in_wire_d_1;
  vin_rsc_2_0_mgc_in_wire_z <= vin_rsc_2_0_z;

  vin_rsc_3_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 7,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_3_0_mgc_in_wire_d_1,
      z => vin_rsc_3_0_mgc_in_wire_z
    );
  vin_rsc_3_0_mgc_in_wire_d <= vin_rsc_3_0_mgc_in_wire_d_1;
  vin_rsc_3_0_mgc_in_wire_z <= vin_rsc_3_0_z;

  vin_rsc_4_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 8,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_4_0_mgc_in_wire_d_1,
      z => vin_rsc_4_0_mgc_in_wire_z
    );
  vin_rsc_4_0_mgc_in_wire_d <= vin_rsc_4_0_mgc_in_wire_d_1;
  vin_rsc_4_0_mgc_in_wire_z <= vin_rsc_4_0_z;

  diff_detect_core_inst : diff_detect_core
    PORT MAP(
      clk => clk,
      en => en,
      arst_n => arst_n,
      vout_rsc_mgc_out_stdreg_d => diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d,
      vin_rsc_0_0_mgc_in_wire_d => diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d
    );
  vout_rsc_mgc_out_stdreg_d <= diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d;
  diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d <= vin_rsc_0_0_mgc_in_wire_d;

END v2;



