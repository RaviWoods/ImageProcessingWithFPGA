-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   rbw14@EEWS104A-015
--  Generated date: Thu Apr 30 13:04:29 2015
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    diff_detect_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.diff_detect_mux_pkg.ALL;


ENTITY diff_detect_core IS
  PORT(
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC;
    vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_0_0_mgc_in_wire_d : IN STD_LOGIC_VECTOR (29 DOWNTO 0)
  );
END diff_detect_core;

ARCHITECTURE v2 OF diff_detect_core IS
  -- Default Constants

  -- Output Reader Declarations
  SIGNAL vout_rsc_mgc_out_stdreg_d_drv : STD_LOGIC_VECTOR (29 DOWNTO 0);

  -- Interconnect Declarations
  SIGNAL or_dcpl : STD_LOGIC;
  SIGNAL and_dcpl_1 : STD_LOGIC;
  SIGNAL or_dcpl_29 : STD_LOGIC;
  SIGNAL exit_SHIFT_lpi_1 : STD_LOGIC;
  SIGNAL i_1_lpi_1 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL exit_ACC1_sva : STD_LOGIC;
  SIGNAL regs_operator_din_1_lpi_1_dfm : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL SHIFT_i_1_lpi_3 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL regs_regs_2_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL regs_regs_2_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL regs_regs_1_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL regs_regs_1_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL regs_regs_3_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL regs_regs_3_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL regs_regs_0_1_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL regs_regs_0_1_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL regs_regs_4_sva_sg2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL regs_regs_4_sva_2 : STD_LOGIC_VECTOR (19 DOWNTO 0);
  SIGNAL or_30_cse : STD_LOGIC;
  SIGNAL or_33_cse : STD_LOGIC;
  SIGNAL or_36_cse : STD_LOGIC;
  SIGNAL and_13_cse : STD_LOGIC;
  SIGNAL or_40_cse : STD_LOGIC;
  SIGNAL ACC1_if_acc_2_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL ACC1_if_acc_1_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL ACC1_if_acc_itm : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL SHIFT_i_1_lpi_1_dfm_2_mx0 : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL abs_a_5_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL abs_a_4_sva : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL exit_SHIFT_lpi_1_dfm : STD_LOGIC;
  SIGNAL SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 : STD_LOGIC_VECTOR (7
      DOWNTO 0);
  SIGNAL SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 : STD_LOGIC_VECTOR (19
      DOWNTO 0);
  SIGNAL SHIFT_if_else_else_else_acc_ssc : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL i_1_sva : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL SHIFT_acc_1_psp : STD_LOGIC_VECTOR (2 DOWNTO 0);

  SIGNAL regs_operator_mux_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
BEGIN
  -- Default Constant Signal Assignments

  -- Output Reader Assignments
  vout_rsc_mgc_out_stdreg_d <= vout_rsc_mgc_out_stdreg_d_drv;

  and_13_cse <= NOT((NOT(exit_SHIFT_lpi_1 OR (SHIFT_i_1_lpi_3(0)) OR (SHIFT_i_1_lpi_3(1))
      OR (NOT (SHIFT_i_1_lpi_3(2))))) OR exit_ACC1_sva);
  or_40_cse <= or_dcpl_29 OR (SHIFT_i_1_lpi_3(0)) OR (SHIFT_i_1_lpi_3(1)) OR (SHIFT_i_1_lpi_3(2));
  SHIFT_i_1_lpi_1_dfm_2_mx0 <= MUX_v_3_2_2(SHIFT_i_1_lpi_3 & STD_LOGIC_VECTOR'("100"),
      exit_ACC1_sva);
  abs_a_5_sva <= MUX_v_10_8_2((regs_regs_0_1_sva_2(9 DOWNTO 0)) & (regs_regs_1_sva_2(9
      DOWNTO 0)) & (regs_regs_2_sva_2(9 DOWNTO 0)) & (regs_regs_3_sva_2(9 DOWNTO
      0)) & (regs_regs_4_sva_2(9 DOWNTO 0)) & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000")
      & STD_LOGIC_VECTOR'("0000000000"), i_1_lpi_1);
  abs_a_4_sva <= MUX_v_10_8_2((regs_regs_0_1_sva_2(19 DOWNTO 10)) & (regs_regs_1_sva_2(19
      DOWNTO 10)) & (regs_regs_2_sva_2(19 DOWNTO 10)) & (regs_regs_3_sva_2(19 DOWNTO
      10)) & (regs_regs_4_sva_2(19 DOWNTO 10)) & STD_LOGIC_VECTOR'("0000000000")
      & STD_LOGIC_VECTOR'("0000000000") & STD_LOGIC_VECTOR'("0000000000"), i_1_lpi_1);
  exit_SHIFT_lpi_1_dfm <= exit_SHIFT_lpi_1 AND (NOT exit_ACC1_sva);
  SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2 <= MUX_v_8_4_2(regs_regs_0_1_sva_sg2
      & regs_regs_1_sva_sg2 & regs_regs_2_sva_sg2 & regs_regs_3_sva_sg2, SHIFT_if_else_else_else_acc_ssc);
  SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1 <= MUX_v_20_4_2(regs_regs_0_1_sva_2
      & regs_regs_1_sva_2 & regs_regs_2_sva_2 & regs_regs_3_sva_2, SHIFT_if_else_else_else_acc_ssc);
  SHIFT_if_else_else_else_acc_ssc <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(SHIFT_i_1_lpi_1_dfm_2_mx0(1
      DOWNTO 0)) + CONV_UNSIGNED(CONV_SIGNED('1', 1), 2), 2));
  i_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(i_1_lpi_1) + CONV_UNSIGNED(CONV_UNSIGNED('1',
      1), 3), 3));
  SHIFT_acc_1_psp <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(SHIFT_i_1_lpi_1_dfm_2_mx0)
      + CONV_SIGNED(CONV_SIGNED('1', 1), 3), 3));
  ACC1_if_acc_2_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED((abs_a_5_sva(9
      DOWNTO 2)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
      & (NOT abs_a_5_sva)) + CONV_SIGNED(CONV_UNSIGNED('1', 1), 11), 11)), 10), 1),8))),
      9) + CONV_SIGNED(SIGNED'("1011"), 9), 9));
  ACC1_if_acc_1_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED((abs_a_4_sva(9
      DOWNTO 2)) AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(TO_STDLOGICVECTOR('1')
      & (NOT abs_a_4_sva)) + CONV_SIGNED(CONV_UNSIGNED('1', 1), 11), 11)), 10), 1),8))),
      9) + CONV_SIGNED(SIGNED'("1011"), 9), 9));
  regs_operator_mux_nl <= MUX_v_8_8_2(regs_regs_0_1_sva_sg2 & regs_regs_1_sva_sg2
      & regs_regs_2_sva_sg2 & regs_regs_3_sva_sg2 & regs_regs_4_sva_sg2 & STD_LOGIC_VECTOR'("00000000")
      & STD_LOGIC_VECTOR'("00000000") & STD_LOGIC_VECTOR'("00000000"), i_1_lpi_1);
  ACC1_if_acc_itm <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(UNSIGNED(NOT (regs_operator_mux_nl)),
      9) + CONV_SIGNED(SIGNED'("1011"), 9), 9));
  or_dcpl <= exit_ACC1_sva OR (NOT exit_SHIFT_lpi_1);
  and_dcpl_1 <= (NOT exit_ACC1_sva) AND exit_SHIFT_lpi_1;
  or_dcpl_29 <= exit_ACC1_sva OR exit_SHIFT_lpi_1;
  or_30_cse <= or_dcpl_29 OR (NOT((SHIFT_i_1_lpi_3(0)) AND (SHIFT_i_1_lpi_3(1))));
  or_33_cse <= or_dcpl_29 OR (SHIFT_i_1_lpi_3(0)) OR (NOT (SHIFT_i_1_lpi_3(1)));
  or_36_cse <= or_dcpl_29 OR (NOT (SHIFT_i_1_lpi_3(0))) OR (SHIFT_i_1_lpi_3(1));
  PROCESS (clk, arst_n)
  BEGIN
    IF ( arst_n = '0' ) THEN
      regs_operator_din_1_lpi_1_dfm <= STD_LOGIC_VECTOR'("000000000000000000000000000000");
      SHIFT_i_1_lpi_3 <= STD_LOGIC_VECTOR'("000");
      vout_rsc_mgc_out_stdreg_d_drv <= STD_LOGIC_VECTOR'("000000000000000000000000000000");
      regs_regs_4_sva_2 <= STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_3_sva_2 <= STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_2_sva_2 <= STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_1_sva_2 <= STD_LOGIC_VECTOR'("00000000000000000000");
      regs_regs_0_1_sva_2 <= STD_LOGIC_VECTOR'("00000000000000000000");
      i_1_lpi_1 <= STD_LOGIC_VECTOR'("000");
      regs_regs_4_sva_sg2 <= STD_LOGIC_VECTOR'("00000000");
      regs_regs_3_sva_sg2 <= STD_LOGIC_VECTOR'("00000000");
      regs_regs_2_sva_sg2 <= STD_LOGIC_VECTOR'("00000000");
      regs_regs_1_sva_sg2 <= STD_LOGIC_VECTOR'("00000000");
      regs_regs_0_1_sva_sg2 <= STD_LOGIC_VECTOR'("00000000");
      exit_SHIFT_lpi_1 <= '0';
      exit_ACC1_sva <= '1';
    ELSIF clk'EVENT AND ( clk = '1' ) THEN
      IF ( en = '1' ) THEN
        regs_operator_din_1_lpi_1_dfm <= MUX_v_30_2_2(regs_operator_din_1_lpi_1_dfm
            & vin_rsc_0_0_mgc_in_wire_d, exit_ACC1_sva);
        SHIFT_i_1_lpi_3 <= MUX_v_3_2_2(SHIFT_acc_1_psp & SHIFT_i_1_lpi_3, and_dcpl_1);
        vout_rsc_mgc_out_stdreg_d_drv <= MUX1HOT_v_30_3_2(STD_LOGIC_VECTOR'("111111111100000000000000000000")
            & regs_operator_din_1_lpi_1_dfm & vout_rsc_mgc_out_stdreg_d_drv, STD_LOGIC_VECTOR'((and_dcpl_1
            AND (ACC1_if_acc_itm(8)) AND (ACC1_if_acc_1_itm(8)) AND (ACC1_if_acc_2_itm(8)))
            & ((NOT((ACC1_if_acc_itm(8)) AND (ACC1_if_acc_1_itm(8)) AND (ACC1_if_acc_2_itm(8))))
            AND and_dcpl_1) & or_dcpl));
        regs_regs_4_sva_2 <= MUX_v_20_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1
            & regs_regs_4_sva_2, and_13_cse);
        regs_regs_3_sva_2 <= MUX_v_20_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1
            & regs_regs_3_sva_2, or_30_cse);
        regs_regs_2_sva_2 <= MUX_v_20_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1
            & regs_regs_2_sva_2, or_33_cse);
        regs_regs_1_sva_2 <= MUX_v_20_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_1
            & regs_regs_1_sva_2, or_36_cse);
        regs_regs_0_1_sva_2 <= MUX_v_20_2_2((regs_operator_din_1_lpi_1_dfm(19 DOWNTO
            0)) & regs_regs_0_1_sva_2, or_40_cse);
        i_1_lpi_1 <= MUX_v_3_2_2(i_1_sva & (i_1_lpi_1 AND STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(NOT
            (SHIFT_acc_1_psp(2)), 1),3))), or_dcpl);
        regs_regs_4_sva_sg2 <= MUX_v_8_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2
            & regs_regs_4_sva_sg2, and_13_cse);
        regs_regs_3_sva_sg2 <= MUX_v_8_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2
            & regs_regs_3_sva_sg2, or_30_cse);
        regs_regs_2_sva_sg2 <= MUX_v_8_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2
            & regs_regs_2_sva_sg2, or_33_cse);
        regs_regs_1_sva_sg2 <= MUX_v_8_2_2(SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg2
            & regs_regs_1_sva_sg2, or_36_cse);
        regs_regs_0_1_sva_sg2 <= MUX_v_8_2_2((regs_operator_din_1_lpi_1_dfm(29 DOWNTO
            22)) & regs_regs_0_1_sva_sg2, or_40_cse);
        exit_SHIFT_lpi_1 <= MUX_s_1_2_2(STD_LOGIC_VECTOR'(exit_SHIFT_lpi_1_dfm &
            (SHIFT_acc_1_psp(2))), or_dcpl);
        exit_ACC1_sva <= (NOT (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(i_1_sva)
            + CONV_SIGNED(UNSIGNED'("11"), 3), 3)), 2))) AND exit_SHIFT_lpi_1_dfm;
      END IF;
    END IF;
  END PROCESS;
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    diff_detect
--  Generated from file(s):
--    2) $PROJECT_HOME/../../diff_detect1/diff_detect.c
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.diff_detect_mux_pkg.ALL;


ENTITY diff_detect IS
  PORT(
    vin_rsc_0_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_1_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_2_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_3_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vin_rsc_4_0_z : IN STD_LOGIC_VECTOR (29 DOWNTO 0);
    vout_rsc_z : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    arst_n : IN STD_LOGIC
  );
END diff_detect;

ARCHITECTURE v2 OF diff_detect IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_0_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_1_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_2_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_3_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_4_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vout_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vout_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_0_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_0_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_1_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_1_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_2_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_2_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_3_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_3_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  SIGNAL vin_rsc_4_0_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (29 DOWNTO 0);
  SIGNAL vin_rsc_4_0_mgc_in_wire_z : STD_LOGIC_VECTOR (29 DOWNTO 0);

  COMPONENT diff_detect_core
    PORT(
      clk : IN STD_LOGIC;
      en : IN STD_LOGIC;
      arst_n : IN STD_LOGIC;
      vout_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (29 DOWNTO 0);
      vin_rsc_0_0_mgc_in_wire_d : IN STD_LOGIC_VECTOR (29 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (29 DOWNTO
      0);
  SIGNAL diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d : STD_LOGIC_VECTOR (29 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments

  vout_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 2,
      width => 30
      )
    PORT MAP(
      d => vout_rsc_mgc_out_stdreg_d_1,
      z => vout_rsc_mgc_out_stdreg_z
    );
  vout_rsc_mgc_out_stdreg_d_1 <= vout_rsc_mgc_out_stdreg_d;
  vout_rsc_z <= vout_rsc_mgc_out_stdreg_z;

  vin_rsc_0_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 4,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_0_0_mgc_in_wire_d_1,
      z => vin_rsc_0_0_mgc_in_wire_z
    );
  vin_rsc_0_0_mgc_in_wire_d <= vin_rsc_0_0_mgc_in_wire_d_1;
  vin_rsc_0_0_mgc_in_wire_z <= vin_rsc_0_0_z;

  vin_rsc_1_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 5,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_1_0_mgc_in_wire_d_1,
      z => vin_rsc_1_0_mgc_in_wire_z
    );
  vin_rsc_1_0_mgc_in_wire_d <= vin_rsc_1_0_mgc_in_wire_d_1;
  vin_rsc_1_0_mgc_in_wire_z <= vin_rsc_1_0_z;

  vin_rsc_2_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 6,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_2_0_mgc_in_wire_d_1,
      z => vin_rsc_2_0_mgc_in_wire_z
    );
  vin_rsc_2_0_mgc_in_wire_d <= vin_rsc_2_0_mgc_in_wire_d_1;
  vin_rsc_2_0_mgc_in_wire_z <= vin_rsc_2_0_z;

  vin_rsc_3_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 7,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_3_0_mgc_in_wire_d_1,
      z => vin_rsc_3_0_mgc_in_wire_z
    );
  vin_rsc_3_0_mgc_in_wire_d <= vin_rsc_3_0_mgc_in_wire_d_1;
  vin_rsc_3_0_mgc_in_wire_z <= vin_rsc_3_0_z;

  vin_rsc_4_0_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 8,
      width => 30
      )
    PORT MAP(
      d => vin_rsc_4_0_mgc_in_wire_d_1,
      z => vin_rsc_4_0_mgc_in_wire_z
    );
  vin_rsc_4_0_mgc_in_wire_d <= vin_rsc_4_0_mgc_in_wire_d_1;
  vin_rsc_4_0_mgc_in_wire_z <= vin_rsc_4_0_z;

  diff_detect_core_inst : diff_detect_core
    PORT MAP(
      clk => clk,
      en => en,
      arst_n => arst_n,
      vout_rsc_mgc_out_stdreg_d => diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d,
      vin_rsc_0_0_mgc_in_wire_d => diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d
    );
  vout_rsc_mgc_out_stdreg_d <= diff_detect_core_inst_vout_rsc_mgc_out_stdreg_d;
  diff_detect_core_inst_vin_rsc_0_0_mgc_in_wire_d <= vin_rsc_0_0_mgc_in_wire_d;

END v2;



