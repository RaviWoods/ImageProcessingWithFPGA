// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   rbw14@EEWS104A-015
//  Generated date: Thu Apr 30 13:06:50 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    diff_detect_core
// ------------------------------------------------------------------


module diff_detect_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [29:0] FRAME_io_read_vin_rsc_d_1_cse_sva;
    reg ACC1_slc_1_svs;
    reg ACC1_land_1_sva_1;
    reg ACC1_land_1_lpi_dfm;
    reg ACC1_land_sva_1;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        ACC1_land_sva_1 = 1'b0;
        ACC1_land_1_sva_1 = 1'b0;
        FRAME_io_read_vin_rsc_d_1_cse_sva = vin_rsc_mgc_in_wire_d;
        ACC1_slc_1_svs = readslicef_9_1_8((conv_u2s_8_9(~ (FRAME_io_read_vin_rsc_d_1_cse_sva[29:22]))
            + 9'b111111011));
        if ( ACC1_slc_1_svs ) begin
          ACC1_land_1_sva_1 = readslicef_9_1_8((conv_u2s_8_9((FRAME_io_read_vin_rsc_d_1_cse_sva[19:12])
              & (signext_8_1(readslicef_11_1_10((({1'b1 , (~ (FRAME_io_read_vin_rsc_d_1_cse_sva[19:10]))})
              + 11'b1))))) + 9'b111111011));
        end
        ACC1_land_1_lpi_dfm = ACC1_land_1_sva_1 & ACC1_slc_1_svs;
        if ( ACC1_land_1_lpi_dfm ) begin
          ACC1_land_sva_1 = readslicef_9_1_8((conv_u2s_8_9((FRAME_io_read_vin_rsc_d_1_cse_sva[9:2])
              & (signext_8_1(readslicef_11_1_10((({1'b1 , (~ (FRAME_io_read_vin_rsc_d_1_cse_sva[9:0]))})
              + 11'b1))))) + 9'b111111011));
        end
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({FRAME_io_read_vin_rsc_d_1_cse_sva
            , 30'b111111111100000000000000000000}, ACC1_land_sva_1 & ACC1_land_1_lpi_dfm);
      end
    end
    ACC1_land_sva_1 = 1'b0;
    ACC1_land_1_lpi_dfm = 1'b0;
    ACC1_land_1_sva_1 = 1'b0;
    ACC1_slc_1_svs = 1'b0;
    FRAME_io_read_vin_rsc_d_1_cse_sva = 30'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    diff_detect
//  Generated from file(s):
//    2) $PROJECT_HOME/../../diff_detect1/diff_detect.c
// ------------------------------------------------------------------


module diff_detect (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [29:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  diff_detect_core diff_detect_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



