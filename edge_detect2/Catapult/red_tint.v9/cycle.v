// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   rbw14@EEWS104A-005
//  Generated date: Tue May 05 15:41:02 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    red_tint_core
// ------------------------------------------------------------------


module red_tint_core (
  clk, en, arst_n, video_in_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d, mouse_xy_rsc_mgc_in_wire_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  reg [29:0] video_out_rsc_mgc_out_stdreg_d;
  input [19:0] mouse_xy_rsc_mgc_in_wire_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [29:0] io_read_video_in_rsc_d_cse_sva;
    reg [9:0] mouse_x_1_sva;
    reg slc_svs;
    reg [7:0] acc_psp_sva;
    reg [11:0] if_acc_psp_sva;
    reg makepos_slc_svs;
    reg makepos_else_slc_svs;
    reg makepos_else_else_slc_svs;
    reg [9:0] greenout_lpi_dfm_2;
    reg [11:0] if_acc_1_psp_sva;
    reg makepos_1_slc_svs;
    reg makepos_1_else_slc_svs;
    reg makepos_1_else_else_slc_svs;
    reg [9:0] blueout_lpi_dfm_2;

    reg[9:0] makepos_else_mux_nl;
    reg[9:0] makepos_1_else_mux_nl;
    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        makepos_1_else_else_slc_svs = 1'b0;
        makepos_else_else_slc_svs = 1'b0;
        blueout_lpi_dfm_2 = 10'b0;
        greenout_lpi_dfm_2 = 10'b0;
        io_read_video_in_rsc_d_cse_sva = video_in_rsc_mgc_in_wire_d;
        mouse_x_1_sva = mouse_xy_rsc_mgc_in_wire_d[9:0];
        slc_svs = readslicef_11_1_10((({1'b1 , (~ mouse_x_1_sva)}) + 11'b1000100111));
        if ( slc_svs ) begin
          acc_psp_sva = (mouse_x_1_sva[8:1]) + ({(mouse_x_1_sva[6:0]) , 1'b1});
          if_acc_psp_sva = readslicef_13_12_1((conv_u2s_11_13({(io_read_video_in_rsc_d_cse_sva[19:10])
              , 1'b1}) + conv_s2s_11_13({(~ acc_psp_sva) , (~ (mouse_x_1_sva[0]))
              , 2'b1})));
          makepos_slc_svs = readslicef_10_1_9(((if_acc_psp_sva[11:2]) + 10'b1111111011));
          if ( makepos_slc_svs ) begin
          end
          else begin
            makepos_else_slc_svs = readslicef_9_1_8((conv_u2u_8_9(if_acc_psp_sva[10:3])
                + 9'b110000011));
            if ( makepos_else_slc_svs ) begin
            end
            else begin
              makepos_else_else_slc_svs = readslicef_12_1_11((({1'b1 , (~ (if_acc_psp_sva[10:0]))})
                  + 12'b10000000001));
            end
          end
          makepos_else_mux_nl = MUX_v_10_2_2({(signext_10_1(~ makepos_else_else_slc_svs))
              , (if_acc_psp_sva[9:0])}, makepos_else_slc_svs);
          greenout_lpi_dfm_2 = (makepos_else_mux_nl) & (signext_10_1(~ makepos_slc_svs));
          if_acc_1_psp_sva = readslicef_13_12_1((conv_u2s_11_13({(io_read_video_in_rsc_d_cse_sva[9:0])
              , 1'b1}) + conv_s2s_11_13({(~ acc_psp_sva) , (~ (mouse_x_1_sva[0]))
              , 2'b1})));
          makepos_1_slc_svs = readslicef_10_1_9(((if_acc_1_psp_sva[11:2]) + 10'b1111111011));
          if ( makepos_1_slc_svs ) begin
          end
          else begin
            makepos_1_else_slc_svs = readslicef_9_1_8((conv_u2u_8_9(if_acc_1_psp_sva[10:3])
                + 9'b110000011));
            if ( makepos_1_else_slc_svs ) begin
            end
            else begin
              makepos_1_else_else_slc_svs = readslicef_12_1_11((({1'b1 , (~ (if_acc_1_psp_sva[10:0]))})
                  + 12'b10000000001));
            end
          end
          makepos_1_else_mux_nl = MUX_v_10_2_2({(signext_10_1(~ makepos_1_else_else_slc_svs))
              , (if_acc_1_psp_sva[9:0])}, makepos_1_else_slc_svs);
          blueout_lpi_dfm_2 = (makepos_1_else_mux_nl) & (signext_10_1(~ makepos_1_slc_svs));
        end
        video_out_rsc_mgc_out_stdreg_d <= {((io_read_video_in_rsc_d_cse_sva[29:20])
            & ({{9{slc_svs}}, slc_svs})) , (greenout_lpi_dfm_2 & ({{9{slc_svs}},
            slc_svs})) , (blueout_lpi_dfm_2 & ({{9{slc_svs}}, slc_svs}))};
      end
    end
    blueout_lpi_dfm_2 = 10'b0;
    makepos_1_else_else_slc_svs = 1'b0;
    makepos_1_else_slc_svs = 1'b0;
    makepos_1_slc_svs = 1'b0;
    if_acc_1_psp_sva = 12'b0;
    greenout_lpi_dfm_2 = 10'b0;
    makepos_else_else_slc_svs = 1'b0;
    makepos_else_slc_svs = 1'b0;
    makepos_slc_svs = 1'b0;
    if_acc_psp_sva = 12'b0;
    acc_psp_sva = 8'b0;
    slc_svs = 1'b0;
    mouse_x_1_sva = 10'b0;
    io_read_video_in_rsc_d_cse_sva = 30'b0;
    video_out_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [11:0] readslicef_13_12_1;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_13_12_1 = tmp[11:0];
  end
  endfunction


  function [0:0] readslicef_10_1_9;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 9;
    readslicef_10_1_9 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function signed [12:0] conv_u2s_11_13 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_13 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [12:0] conv_s2s_11_13 ;
    input signed [10:0]  vector ;
  begin
    conv_s2s_11_13 = {{2{vector[10]}}, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    red_tint
//  Generated from file(s):
//    2) $PROJECT_HOME/edge3.c
// ------------------------------------------------------------------


module red_tint (
  video_in_rsc_z, video_out_rsc_z, mouse_xy_rsc_z, clk, en, arst_n
);
  input [29:0] video_in_rsc_z;
  output [29:0] video_out_rsc_z;
  input [19:0] mouse_xy_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;
  wire [19:0] mouse_xy_rsc_mgc_in_wire_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(20)) mouse_xy_rsc_mgc_in_wire (
      .d(mouse_xy_rsc_mgc_in_wire_d),
      .z(mouse_xy_rsc_z)
    );
  red_tint_core red_tint_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d),
      .mouse_xy_rsc_mgc_in_wire_d(mouse_xy_rsc_mgc_in_wire_d)
    );
endmodule



