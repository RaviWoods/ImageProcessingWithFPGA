// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-016
//  Generated date: Fri Mar 27 14:42:56 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    edge_detect_core
// ------------------------------------------------------------------


module edge_detect_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [89:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [15:0] FRAME_acc_3_tmp;
  wire [16:0] nl_FRAME_acc_3_tmp;
  wire or_dcpl_1;
  wire and_dcpl_28;
  wire and_dcpl_31;
  wire and_dcpl_32;
  wire and_dcpl_35;
  wire and_dcpl_36;
  reg [1:0] FRAME_i_3_lpi_1;
  reg [1:0] FRAME_i_2_lpi_1;
  reg [1:0] FRAME_a_5_lpi_1;
  reg [1:0] FRAME_a_6_lpi_1;
  reg [89:0] regs_regs_1_sva;
  reg [89:0] regs_regs_0_sva;
  reg exit_FRAME_1_sva;
  reg [89:0] regs_regs_2_lpi_1_dfm;
  reg [15:0] red_x_1_sva_1;
  reg [15:0] red_x_0_sva_1;
  reg [15:0] red_x_2_sva_1;
  reg [15:0] green_x_1_sva_1;
  reg [15:0] green_x_0_sva_1;
  reg [15:0] green_x_2_sva_1;
  reg [15:0] blue_x_1_sva_1;
  reg [15:0] blue_x_0_sva_1;
  reg [15:0] blue_x_2_sva_1;
  reg [15:0] red_y_1_sva_1;
  reg [15:0] red_y_0_sva_1;
  reg [15:0] red_y_2_sva_1;
  reg [15:0] green_y_1_sva_1;
  reg [15:0] green_y_0_sva_1;
  reg [15:0] green_y_2_sva_1;
  reg [15:0] blue_y_1_sva_1;
  reg [15:0] blue_y_0_sva_1;
  reg [15:0] blue_y_2_sva_1;
  reg exit_ACC_GX_lpi_1_dfm_2;
  reg exit_FRAME_lpi_1_dfm_1;
  reg AbsAndMax_7_slc_svs_1;
  reg [15:0] FRAME_ac_int_cctor_14_sva_1;
  wire [16:0] nl_FRAME_ac_int_cctor_14_sva_1;
  reg [15:0] AbsAndMax_mux1h_itm_1;
  reg [15:0] AbsAndMax_1_mux1h_itm_1;
  reg [14:0] FRAME_slc_FRAME_ac_int_cctor_13_itm_1;
  reg AbsAndMax_7_and_itm_1;
  reg exit_ACC_GX_1_sva_1_st_1;
  reg AbsAndMax_7_else_slc_itm_1;
  reg main_stage_0_2;
  reg FRAME_p_1_lpi_3;
  wire or_6_cse;
  wire or_8_cse;
  wire or_9_cse;
  wire or_11_cse;
  wire or_13_cse;
  wire or_14_cse;
  wire [15:0] green_y_1_sva_1_mx0;
  wire [15:0] green_y_2_sva_1_mx0;
  wire [15:0] green_y_0_sva_1_mx0;
  wire [15:0] green_x_1_sva_1_mx0;
  wire [15:0] green_x_2_sva_1_mx0;
  wire [15:0] green_x_0_sva_1_mx0;
  wire [15:0] blue_y_1_sva_1_mx0;
  wire [15:0] blue_y_2_sva_1_mx0;
  wire [15:0] blue_y_0_sva_1_mx0;
  wire [15:0] blue_x_1_sva_1_mx0;
  wire [15:0] blue_x_2_sva_1_mx0;
  wire [15:0] blue_x_0_sva_1_mx0;
  wire [15:0] red_y_1_sva_1_mx0;
  wire [15:0] red_y_2_sva_1_mx0;
  wire [15:0] red_y_0_sva_1_mx0;
  wire [15:0] red_x_1_sva_1_mx0;
  wire [15:0] red_x_2_sva_1_mx0;
  wire [15:0] red_x_0_sva_1_mx0;
  wire FRAME_p_1_lpi_1_dfm_3;
  wire [15:0] bluey_1_sva;
  wire [17:0] nl_bluey_1_sva;
  wire [15:0] bluex_1_sva;
  wire [17:0] nl_bluex_1_sva;
  wire [15:0] greeny_1_sva;
  wire [17:0] nl_greeny_1_sva;
  wire [15:0] greenx_1_sva;
  wire [17:0] nl_greenx_1_sva;
  wire [15:0] redy_1_sva;
  wire [17:0] nl_redy_1_sva;
  wire [15:0] redx_1_sva;
  wire [17:0] nl_redx_1_sva;
  wire exit_ACC_GX_1_lpi_1_dfm;
  wire [15:0] FRAME_ac_int_cctor_12_sva;
  wire [16:0] nl_FRAME_ac_int_cctor_12_sva;
  wire or_3_cse;
  wire or_46_cse;
  wire and_cse;
  wire exit_ACC_GX_sva_1;
  wire [1:0] FRAME_a_5_lpi_1_dfm;
  wire [1:0] FRAME_a_6_sva_1;
  wire [2:0] nl_FRAME_a_6_sva_1;
  wire [1:0] FRAME_a_5_sva_1;
  wire [2:0] nl_FRAME_a_5_sva_1;
  wire [89:0] regs_operator_3_slc_regs_regs_cse_sva;
  wire [4:0] ACC_GY_for_acc_13_psp_sva;
  wire [5:0] nl_ACC_GY_for_acc_13_psp_sva;
  wire [89:0] regs_operator_slc_regs_regs_cse_sva;
  wire [4:0] ACC_GX_for_acc_13_psp_sva;
  wire [5:0] nl_ACC_GX_for_acc_13_psp_sva;
  wire [6:0] AbsAndMax_7_if_acc_itm;
  wire [7:0] nl_AbsAndMax_7_if_acc_itm;
  wire [1:0] ACC_GX_acc_itm;
  wire [2:0] nl_ACC_GX_acc_itm;
  wire [1:0] ACC_GY_acc_itm;
  wire [2:0] nl_ACC_GY_acc_itm;
  wire [1:0] ACC_GX_for_acc_itm;
  wire [2:0] nl_ACC_GX_for_acc_itm;
  wire [1:0] ACC_GY_for_acc_itm;
  wire [2:0] nl_ACC_GY_for_acc_itm;
  wire [9:0] ACC_GY_for_rshift_itm;
  wire [9:0] ACC_GX_for_rshift_itm;
  wire [2:0] ACC_GX_for_acc_14_itm;
  wire [3:0] nl_ACC_GX_for_acc_14_itm;
  wire ACC_GY_for_mux_9_itm;
  wire ACC_GX_for_mux_16_itm;
  wire [15:0] AbsAndMax_AbsAndMax_return_8_lpi_1_dfm_1;
  wire [15:0] AbsAndMax_AbsAndMax_return_7_lpi_1_dfm_1;
  wire exit_ACC_GX_1_sva_1;
  wire [89:0] regs_regs_2_lpi_1_dfm_mx0;
  wire [89:0] regs_regs_1_sva_dfm_mx0;
  wire [89:0] regs_regs_0_sva_dfm_mx0;
  wire exit_ACC_GX_lpi_1_dfm_2_mx0;
  wire [1:0] FRAME_i_3_sva_1;
  wire [2:0] nl_FRAME_i_3_sva_1;
  wire [1:0] FRAME_i_2_sva_1;
  wire [2:0] nl_FRAME_i_2_sva_1;
  wire [1:0] FRAME_i_2_lpi_1_dfm;
  wire [1:0] FRAME_i_3_lpi_1_dfm;
  wire [1:0] FRAME_a_6_lpi_1_dfm;
  wire [15:0] blue_y_2_lpi_1_dfm;
  wire [15:0] ACC_GY_for_acc_7_ctmp_sva;
  wire [16:0] nl_ACC_GY_for_acc_7_ctmp_sva;
  wire [15:0] blue_y_0_lpi_1_dfm;
  wire [15:0] blue_y_1_lpi_1_dfm;
  wire [15:0] green_y_2_lpi_1_dfm;
  wire [15:0] ACC_GY_for_acc_4_ctmp_sva;
  wire [16:0] nl_ACC_GY_for_acc_4_ctmp_sva;
  wire [15:0] green_y_0_lpi_1_dfm;
  wire [15:0] green_y_1_lpi_1_dfm;
  wire [15:0] red_y_2_lpi_1_dfm;
  wire [15:0] ACC_GY_for_acc_1_ctmp_sva;
  wire [16:0] nl_ACC_GY_for_acc_1_ctmp_sva;
  wire [15:0] red_y_0_lpi_1_dfm;
  wire [15:0] red_y_1_lpi_1_dfm;
  wire [2:0] ACC_GY_for_acc_15_sdt;
  wire [3:0] nl_ACC_GY_for_acc_15_sdt;
  wire [15:0] blue_x_2_lpi_1_dfm;
  wire [15:0] ACC_GX_for_acc_7_ctmp_sva;
  wire [16:0] nl_ACC_GX_for_acc_7_ctmp_sva;
  wire [15:0] blue_x_0_lpi_1_dfm;
  wire [15:0] blue_x_1_lpi_1_dfm;
  wire [15:0] green_x_2_lpi_1_dfm;
  wire [15:0] ACC_GX_for_acc_4_ctmp_sva;
  wire [16:0] nl_ACC_GX_for_acc_4_ctmp_sva;
  wire [15:0] green_x_0_lpi_1_dfm;
  wire [15:0] green_x_1_lpi_1_dfm;
  wire [15:0] red_x_2_lpi_1_dfm;
  wire [15:0] ACC_GX_for_acc_1_ctmp_sva;
  wire [16:0] nl_ACC_GX_for_acc_1_ctmp_sva;
  wire [15:0] red_x_0_lpi_1_dfm;
  wire [15:0] red_x_1_lpi_1_dfm;
  wire exit_FRAME_lpi_1_dfm_1_mx0;
  wire [1:0] FRAME_p_1_sva_1;
  wire [2:0] nl_FRAME_p_1_sva_1;
  wire [6:0] AbsAndMax_8_if_acc_itm;
  wire [7:0] nl_AbsAndMax_8_if_acc_itm;
  wire [6:0] AbsAndMax_4_if_acc_itm;
  wire [7:0] nl_AbsAndMax_4_if_acc_itm;
  wire [6:0] AbsAndMax_5_if_acc_itm;
  wire [7:0] nl_AbsAndMax_5_if_acc_itm;
  wire [6:0] AbsAndMax_3_if_acc_itm;
  wire [7:0] nl_AbsAndMax_3_if_acc_itm;
  wire [6:0] AbsAndMax_2_if_acc_itm;
  wire [7:0] nl_AbsAndMax_2_if_acc_itm;
  wire [6:0] AbsAndMax_1_if_acc_itm;
  wire [7:0] nl_AbsAndMax_1_if_acc_itm;
  wire [6:0] AbsAndMax_if_acc_itm;
  wire [7:0] nl_AbsAndMax_if_acc_itm;

  wire[15:0] AbsAndMax_4_mux1h_nl;
  wire[15:0] AbsAndMax_5_mux1h_nl;
  wire[15:0] ACC_GY_for_mux_13_nl;
  wire[9:0] ACC_GY_for_mux_14_nl;
  wire[15:0] ACC_GY_for_mux_11_nl;
  wire[9:0] ACC_GY_for_mux_12_nl;
  wire[15:0] ACC_GY_for_mux_10_nl;
  wire[15:0] ACC_GX_for_mux_19_nl;
  wire[9:0] ACC_GX_for_mux_20_nl;
  wire[15:0] ACC_GX_for_mux_17_nl;
  wire[9:0] ACC_GX_for_mux_18_nl;
  wire[15:0] ACC_GX_for_mux_14_nl;
  wire[0:0] ACC_GX_for_mux_15_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [6:0] nl_ACC_GY_for_rshift_rg_s;
  assign nl_ACC_GY_for_rshift_rg_s = {(conv_u2u_4_5(ACC_GY_for_acc_13_psp_sva[4:1])
      + 5'b101) , (ACC_GY_for_acc_13_psp_sva[0]) , 1'b0};
  wire [6:0] nl_ACC_GX_for_rshift_rg_s;
  assign nl_ACC_GX_for_rshift_rg_s = {(conv_u2u_4_5(ACC_GX_for_acc_13_psp_sva[4:1])
      + 5'b101) , (ACC_GX_for_acc_13_psp_sva[0]) , 1'b0};
  mgc_shift_r #(.width_a(90),
  .signd_a(0),
  .width_s(7),
  .width_z(10)) ACC_GY_for_rshift_rg (
      .a(regs_operator_3_slc_regs_regs_cse_sva),
      .s(nl_ACC_GY_for_rshift_rg_s),
      .z(ACC_GY_for_rshift_itm)
    );
  mgc_shift_r #(.width_a(90),
  .signd_a(0),
  .width_s(7),
  .width_z(10)) ACC_GX_for_rshift_rg (
      .a(regs_operator_slc_regs_regs_cse_sva),
      .s(nl_ACC_GX_for_rshift_rg_s),
      .z(ACC_GX_for_rshift_itm)
    );
  assign or_3_cse = or_dcpl_1 | (ACC_GY_acc_itm[1]) | (ACC_GX_acc_itm[1]);
  assign nl_FRAME_ac_int_cctor_12_sva = AbsAndMax_mux1h_itm_1 + AbsAndMax_1_mux1h_itm_1;
  assign FRAME_ac_int_cctor_12_sva = nl_FRAME_ac_int_cctor_12_sva[15:0];
  assign AbsAndMax_AbsAndMax_return_8_lpi_1_dfm_1 = MUX1HOT_v_16_3_2({(conv_u2u_15_16(~
      (FRAME_ac_int_cctor_14_sva_1[14:0])) + 16'b1) , ({6'b0 , (FRAME_ac_int_cctor_14_sva_1[9:0])})
      , 16'b1111111111}, {((FRAME_ac_int_cctor_14_sva_1[15]) & (~ (AbsAndMax_8_if_acc_itm[6])))
      , (~((FRAME_ac_int_cctor_14_sva_1[15]) | (AbsAndMax_8_if_acc_itm[6]))) , (AbsAndMax_8_if_acc_itm[6])});
  assign AbsAndMax_AbsAndMax_return_7_lpi_1_dfm_1 = MUX1HOT_v_16_3_2({(conv_u2u_15_16(~
      FRAME_slc_FRAME_ac_int_cctor_13_itm_1) + 16'b1) , ({6'b0 , (FRAME_slc_FRAME_ac_int_cctor_13_itm_1[9:0])})
      , 16'b1111111111}, {AbsAndMax_7_and_itm_1 , (~(AbsAndMax_7_else_slc_itm_1 |
      AbsAndMax_7_slc_svs_1)) , AbsAndMax_7_slc_svs_1});
  assign nl_AbsAndMax_8_if_acc_itm = conv_s2u_6_7(~ (FRAME_ac_int_cctor_14_sva_1[15:10]))
      + 7'b1;
  assign AbsAndMax_8_if_acc_itm = nl_AbsAndMax_8_if_acc_itm[6:0];
  assign nl_AbsAndMax_7_if_acc_itm = conv_s2u_6_7(~ (FRAME_acc_3_tmp[15:10])) + 7'b1;
  assign AbsAndMax_7_if_acc_itm = nl_AbsAndMax_7_if_acc_itm[6:0];
  assign exit_ACC_GX_1_sva_1 = (~((ACC_GX_for_acc_itm[1]) | (ACC_GY_for_acc_itm[1])))
      & exit_ACC_GX_lpi_1_dfm_2_mx0;
  assign regs_regs_2_lpi_1_dfm_mx0 = MUX_v_90_2_2({regs_regs_1_sva , regs_regs_2_lpi_1_dfm},
      and_dcpl_28);
  assign regs_regs_1_sva_dfm_mx0 = MUX_v_90_2_2({regs_regs_0_sva , regs_regs_1_sva},
      and_dcpl_28);
  assign regs_regs_0_sva_dfm_mx0 = MUX_v_90_2_2({vin_rsc_mgc_in_wire_d , regs_regs_0_sva},
      and_dcpl_28);
  assign nl_redx_1_sva = (red_x_1_sva_1_mx0 + red_x_2_sva_1_mx0) + red_x_0_sva_1_mx0;
  assign redx_1_sva = nl_redx_1_sva[15:0];
  assign nl_redy_1_sva = (red_y_1_sva_1_mx0 + red_y_2_sva_1_mx0) + red_y_0_sva_1_mx0;
  assign redy_1_sva = nl_redy_1_sva[15:0];
  assign nl_greenx_1_sva = (green_x_1_sva_1_mx0 + green_x_2_sva_1_mx0) + green_x_0_sva_1_mx0;
  assign greenx_1_sva = nl_greenx_1_sva[15:0];
  assign nl_greeny_1_sva = (green_y_1_sva_1_mx0 + green_y_2_sva_1_mx0) + green_y_0_sva_1_mx0;
  assign greeny_1_sva = nl_greeny_1_sva[15:0];
  assign nl_bluex_1_sva = (blue_x_1_sva_1_mx0 + blue_x_2_sva_1_mx0) + blue_x_0_sva_1_mx0;
  assign bluex_1_sva = nl_bluex_1_sva[15:0];
  assign nl_bluey_1_sva = (blue_y_1_sva_1_mx0 + blue_y_2_sva_1_mx0) + blue_y_0_sva_1_mx0;
  assign bluey_1_sva = nl_bluey_1_sva[15:0];
  assign AbsAndMax_4_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0 , (bluex_1_sva[9:0])}) ,
      (conv_u2u_15_16(~ (bluex_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((bluex_1_sva[15])
      | (AbsAndMax_4_if_acc_itm[6]))) , ((bluex_1_sva[15]) & (~ (AbsAndMax_4_if_acc_itm[6])))
      , (AbsAndMax_4_if_acc_itm[6])});
  assign AbsAndMax_5_mux1h_nl = MUX1HOT_v_16_3_2({({6'b0 , (bluey_1_sva[9:0])}) ,
      (conv_u2u_15_16(~ (bluey_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((bluey_1_sva[15])
      | (AbsAndMax_5_if_acc_itm[6]))) , ((bluey_1_sva[15]) & (~ (AbsAndMax_5_if_acc_itm[6])))
      , (AbsAndMax_5_if_acc_itm[6])});
  assign nl_FRAME_acc_3_tmp = (AbsAndMax_4_mux1h_nl) + (AbsAndMax_5_mux1h_nl);
  assign FRAME_acc_3_tmp = nl_FRAME_acc_3_tmp[15:0];
  assign nl_AbsAndMax_4_if_acc_itm = conv_s2u_6_7(~ (bluex_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_4_if_acc_itm = nl_AbsAndMax_4_if_acc_itm[6:0];
  assign nl_AbsAndMax_5_if_acc_itm = conv_s2u_6_7(~ (bluey_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_5_if_acc_itm = nl_AbsAndMax_5_if_acc_itm[6:0];
  assign nl_AbsAndMax_3_if_acc_itm = conv_s2u_6_7(~ (greeny_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_3_if_acc_itm = nl_AbsAndMax_3_if_acc_itm[6:0];
  assign nl_AbsAndMax_2_if_acc_itm = conv_s2u_6_7(~ (greenx_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_2_if_acc_itm = nl_AbsAndMax_2_if_acc_itm[6:0];
  assign nl_AbsAndMax_1_if_acc_itm = conv_s2u_6_7(~ (redy_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_1_if_acc_itm = nl_AbsAndMax_1_if_acc_itm[6:0];
  assign nl_AbsAndMax_if_acc_itm = conv_s2u_6_7(~ (redx_1_sva[15:10])) + 7'b1;
  assign AbsAndMax_if_acc_itm = nl_AbsAndMax_if_acc_itm[6:0];
  assign green_y_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_4_ctmp_sva , green_y_1_lpi_1_dfm},
      or_6_cse);
  assign green_y_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_4_ctmp_sva , green_y_2_lpi_1_dfm},
      or_8_cse);
  assign green_y_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_4_ctmp_sva , green_y_0_lpi_1_dfm},
      or_9_cse);
  assign green_x_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_4_ctmp_sva , green_x_1_lpi_1_dfm},
      or_11_cse);
  assign green_x_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_4_ctmp_sva , green_x_2_lpi_1_dfm},
      or_13_cse);
  assign green_x_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_4_ctmp_sva , green_x_0_lpi_1_dfm},
      or_14_cse);
  assign blue_y_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_7_ctmp_sva , blue_y_1_lpi_1_dfm},
      or_6_cse);
  assign blue_y_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_7_ctmp_sva , blue_y_2_lpi_1_dfm},
      or_8_cse);
  assign blue_y_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_7_ctmp_sva , blue_y_0_lpi_1_dfm},
      or_9_cse);
  assign blue_x_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_7_ctmp_sva , blue_x_1_lpi_1_dfm},
      or_11_cse);
  assign blue_x_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_7_ctmp_sva , blue_x_2_lpi_1_dfm},
      or_13_cse);
  assign blue_x_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_7_ctmp_sva , blue_x_0_lpi_1_dfm},
      or_14_cse);
  assign red_y_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_1_ctmp_sva , red_y_1_lpi_1_dfm},
      or_6_cse);
  assign red_y_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_1_ctmp_sva , red_y_2_lpi_1_dfm},
      or_8_cse);
  assign red_y_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GY_for_acc_1_ctmp_sva , red_y_0_lpi_1_dfm},
      or_9_cse);
  assign red_x_1_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_1_ctmp_sva , red_x_1_lpi_1_dfm},
      or_11_cse);
  assign red_x_2_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_1_ctmp_sva , red_x_2_lpi_1_dfm},
      or_13_cse);
  assign red_x_0_sva_1_mx0 = MUX_v_16_2_2({ACC_GX_for_acc_1_ctmp_sva , red_x_0_lpi_1_dfm},
      or_14_cse);
  assign exit_ACC_GX_lpi_1_dfm_2_mx0 = MUX_s_1_2_2({exit_ACC_GX_sva_1 , (exit_ACC_GX_lpi_1_dfm_2
      & (~ exit_ACC_GX_1_lpi_1_dfm))}, or_dcpl_1);
  assign nl_ACC_GX_acc_itm = FRAME_i_3_sva_1 + 2'b1;
  assign ACC_GX_acc_itm = nl_ACC_GX_acc_itm[1:0];
  assign nl_ACC_GY_acc_itm = FRAME_i_2_sva_1 + 2'b1;
  assign ACC_GY_acc_itm = nl_ACC_GY_acc_itm[1:0];
  assign exit_ACC_GX_sva_1 = ~((ACC_GX_acc_itm[1]) | (ACC_GY_acc_itm[1]));
  assign nl_FRAME_i_3_sva_1 = FRAME_i_3_lpi_1_dfm + 2'b1;
  assign FRAME_i_3_sva_1 = nl_FRAME_i_3_sva_1[1:0];
  assign nl_FRAME_i_2_sva_1 = FRAME_i_2_lpi_1_dfm + 2'b1;
  assign FRAME_i_2_sva_1 = nl_FRAME_i_2_sva_1[1:0];
  assign FRAME_i_2_lpi_1_dfm = FRAME_i_2_lpi_1 & (signext_2_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign FRAME_i_3_lpi_1_dfm = FRAME_i_3_lpi_1 & (signext_2_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign exit_ACC_GX_1_lpi_1_dfm = exit_ACC_GX_1_sva_1_st_1 | exit_FRAME_1_sva;
  assign nl_ACC_GX_for_acc_itm = FRAME_a_5_sva_1 + 2'b1;
  assign ACC_GX_for_acc_itm = nl_ACC_GX_for_acc_itm[1:0];
  assign nl_ACC_GY_for_acc_itm = FRAME_a_6_sva_1 + 2'b1;
  assign ACC_GY_for_acc_itm = nl_ACC_GY_for_acc_itm[1:0];
  assign nl_FRAME_a_5_sva_1 = FRAME_a_5_lpi_1_dfm + 2'b1;
  assign FRAME_a_5_sva_1 = nl_FRAME_a_5_sva_1[1:0];
  assign nl_FRAME_a_6_sva_1 = FRAME_a_6_lpi_1_dfm + 2'b1;
  assign FRAME_a_6_sva_1 = nl_FRAME_a_6_sva_1[1:0];
  assign FRAME_a_6_lpi_1_dfm = FRAME_a_6_lpi_1 & (signext_2_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign blue_y_2_lpi_1_dfm = blue_y_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GY_for_mux_13_nl = MUX_v_16_4_2({blue_y_0_lpi_1_dfm , blue_y_1_lpi_1_dfm
      , blue_y_2_lpi_1_dfm , 16'b0}, FRAME_a_6_lpi_1_dfm);
  assign ACC_GY_for_mux_14_nl = MUX_v_10_32_2({(regs_operator_3_slc_regs_regs_cse_sva[9:0])
      , (regs_operator_3_slc_regs_regs_cse_sva[11:2]) , (regs_operator_3_slc_regs_regs_cse_sva[13:4])
      , (regs_operator_3_slc_regs_regs_cse_sva[15:6]) , (regs_operator_3_slc_regs_regs_cse_sva[17:8])
      , (regs_operator_3_slc_regs_regs_cse_sva[19:10]) , (regs_operator_3_slc_regs_regs_cse_sva[21:12])
      , (regs_operator_3_slc_regs_regs_cse_sva[23:14]) , (regs_operator_3_slc_regs_regs_cse_sva[25:16])
      , (regs_operator_3_slc_regs_regs_cse_sva[27:18]) , (regs_operator_3_slc_regs_regs_cse_sva[29:20])
      , (regs_operator_3_slc_regs_regs_cse_sva[31:22]) , (regs_operator_3_slc_regs_regs_cse_sva[33:24])
      , (regs_operator_3_slc_regs_regs_cse_sva[35:26]) , (regs_operator_3_slc_regs_regs_cse_sva[37:28])
      , (regs_operator_3_slc_regs_regs_cse_sva[39:30]) , (regs_operator_3_slc_regs_regs_cse_sva[41:32])
      , (regs_operator_3_slc_regs_regs_cse_sva[43:34]) , (regs_operator_3_slc_regs_regs_cse_sva[45:36])
      , (regs_operator_3_slc_regs_regs_cse_sva[47:38]) , (regs_operator_3_slc_regs_regs_cse_sva[49:40])
      , (regs_operator_3_slc_regs_regs_cse_sva[51:42]) , (regs_operator_3_slc_regs_regs_cse_sva[53:44])
      , (regs_operator_3_slc_regs_regs_cse_sva[55:46]) , (regs_operator_3_slc_regs_regs_cse_sva[57:48])
      , (regs_operator_3_slc_regs_regs_cse_sva[59:50]) , (regs_operator_3_slc_regs_regs_cse_sva[61:52])
      , (regs_operator_3_slc_regs_regs_cse_sva[63:54]) , (regs_operator_3_slc_regs_regs_cse_sva[65:56])
      , (regs_operator_3_slc_regs_regs_cse_sva[67:58]) , (regs_operator_3_slc_regs_regs_cse_sva[69:60])
      , 10'b0}, ACC_GY_for_acc_13_psp_sva);
  assign nl_ACC_GY_for_acc_7_ctmp_sva = (ACC_GY_for_mux_13_nl) + conv_u2u_10_16((ACC_GY_for_mux_14_nl)
      & ({{9{ACC_GY_for_mux_9_itm}}, ACC_GY_for_mux_9_itm}));
  assign ACC_GY_for_acc_7_ctmp_sva = nl_ACC_GY_for_acc_7_ctmp_sva[15:0];
  assign blue_y_0_lpi_1_dfm = blue_y_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign blue_y_1_lpi_1_dfm = blue_y_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign regs_operator_3_slc_regs_regs_cse_sva = MUX_v_90_4_2({regs_regs_0_sva_dfm_mx0
      , regs_regs_1_sva_dfm_mx0 , regs_regs_2_lpi_1_dfm_mx0 , 90'b0}, FRAME_i_2_lpi_1_dfm);
  assign nl_ACC_GY_for_acc_13_psp_sva = conv_s2u_3_5({1'b1 , (~ FRAME_a_6_lpi_1_dfm)})
      + ({(FRAME_a_6_lpi_1_dfm[0]) , 4'b1});
  assign ACC_GY_for_acc_13_psp_sva = nl_ACC_GY_for_acc_13_psp_sva[4:0];
  assign green_y_2_lpi_1_dfm = green_y_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GY_for_mux_11_nl = MUX_v_16_4_2({green_y_0_lpi_1_dfm , green_y_1_lpi_1_dfm
      , green_y_2_lpi_1_dfm , 16'b0}, FRAME_a_6_lpi_1_dfm);
  assign ACC_GY_for_mux_12_nl = MUX_v_10_32_2({(regs_operator_3_slc_regs_regs_cse_sva[73:64])
      , (regs_operator_3_slc_regs_regs_cse_sva[75:66]) , (regs_operator_3_slc_regs_regs_cse_sva[77:68])
      , (regs_operator_3_slc_regs_regs_cse_sva[79:70]) , 10'b0 , (regs_operator_3_slc_regs_regs_cse_sva[19:10])
      , (regs_operator_3_slc_regs_regs_cse_sva[21:12]) , (regs_operator_3_slc_regs_regs_cse_sva[23:14])
      , (regs_operator_3_slc_regs_regs_cse_sva[25:16]) , (regs_operator_3_slc_regs_regs_cse_sva[27:18])
      , (regs_operator_3_slc_regs_regs_cse_sva[29:20]) , (regs_operator_3_slc_regs_regs_cse_sva[31:22])
      , (regs_operator_3_slc_regs_regs_cse_sva[33:24]) , (regs_operator_3_slc_regs_regs_cse_sva[35:26])
      , (regs_operator_3_slc_regs_regs_cse_sva[37:28]) , (regs_operator_3_slc_regs_regs_cse_sva[39:30])
      , (regs_operator_3_slc_regs_regs_cse_sva[41:32]) , (regs_operator_3_slc_regs_regs_cse_sva[43:34])
      , (regs_operator_3_slc_regs_regs_cse_sva[45:36]) , (regs_operator_3_slc_regs_regs_cse_sva[47:38])
      , (regs_operator_3_slc_regs_regs_cse_sva[49:40]) , (regs_operator_3_slc_regs_regs_cse_sva[51:42])
      , (regs_operator_3_slc_regs_regs_cse_sva[53:44]) , (regs_operator_3_slc_regs_regs_cse_sva[55:46])
      , (regs_operator_3_slc_regs_regs_cse_sva[57:48]) , (regs_operator_3_slc_regs_regs_cse_sva[59:50])
      , (regs_operator_3_slc_regs_regs_cse_sva[61:52]) , (regs_operator_3_slc_regs_regs_cse_sva[63:54])
      , (regs_operator_3_slc_regs_regs_cse_sva[65:56]) , (regs_operator_3_slc_regs_regs_cse_sva[67:58])
      , (regs_operator_3_slc_regs_regs_cse_sva[69:60]) , (regs_operator_3_slc_regs_regs_cse_sva[71:62])},
      ACC_GY_for_acc_13_psp_sva + 5'b101);
  assign nl_ACC_GY_for_acc_4_ctmp_sva = (ACC_GY_for_mux_11_nl) + conv_u2u_10_16((ACC_GY_for_mux_12_nl)
      & ({{9{ACC_GY_for_mux_9_itm}}, ACC_GY_for_mux_9_itm}));
  assign ACC_GY_for_acc_4_ctmp_sva = nl_ACC_GY_for_acc_4_ctmp_sva[15:0];
  assign green_y_0_lpi_1_dfm = green_y_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign green_y_1_lpi_1_dfm = green_y_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign red_y_2_lpi_1_dfm = red_y_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GY_for_mux_10_nl = MUX_v_16_4_2({red_y_0_lpi_1_dfm , red_y_1_lpi_1_dfm
      , red_y_2_lpi_1_dfm , 16'b0}, FRAME_a_6_lpi_1_dfm);
  assign nl_ACC_GY_for_acc_1_ctmp_sva = (ACC_GY_for_mux_10_nl) + conv_u2u_10_16(ACC_GY_for_rshift_itm
      & ({{9{ACC_GY_for_mux_9_itm}}, ACC_GY_for_mux_9_itm}));
  assign ACC_GY_for_acc_1_ctmp_sva = nl_ACC_GY_for_acc_1_ctmp_sva[15:0];
  assign red_y_0_lpi_1_dfm = red_y_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign red_y_1_lpi_1_dfm = red_y_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign nl_ACC_GY_for_acc_15_sdt = conv_u2u_2_3(FRAME_i_2_lpi_1_dfm) + conv_u2u_2_3(FRAME_a_6_lpi_1_dfm);
  assign ACC_GY_for_acc_15_sdt = nl_ACC_GY_for_acc_15_sdt[2:0];
  assign FRAME_a_5_lpi_1_dfm = FRAME_a_5_lpi_1 & (signext_2_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign blue_x_2_lpi_1_dfm = blue_x_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GX_for_mux_19_nl = MUX_v_16_4_2({blue_x_0_lpi_1_dfm , blue_x_1_lpi_1_dfm
      , blue_x_2_lpi_1_dfm , 16'b0}, FRAME_a_5_lpi_1_dfm);
  assign ACC_GX_for_mux_20_nl = MUX_v_10_32_2({(regs_operator_slc_regs_regs_cse_sva[9:0])
      , (regs_operator_slc_regs_regs_cse_sva[11:2]) , (regs_operator_slc_regs_regs_cse_sva[13:4])
      , (regs_operator_slc_regs_regs_cse_sva[15:6]) , (regs_operator_slc_regs_regs_cse_sva[17:8])
      , (regs_operator_slc_regs_regs_cse_sva[19:10]) , (regs_operator_slc_regs_regs_cse_sva[21:12])
      , (regs_operator_slc_regs_regs_cse_sva[23:14]) , (regs_operator_slc_regs_regs_cse_sva[25:16])
      , (regs_operator_slc_regs_regs_cse_sva[27:18]) , (regs_operator_slc_regs_regs_cse_sva[29:20])
      , (regs_operator_slc_regs_regs_cse_sva[31:22]) , (regs_operator_slc_regs_regs_cse_sva[33:24])
      , (regs_operator_slc_regs_regs_cse_sva[35:26]) , (regs_operator_slc_regs_regs_cse_sva[37:28])
      , (regs_operator_slc_regs_regs_cse_sva[39:30]) , (regs_operator_slc_regs_regs_cse_sva[41:32])
      , (regs_operator_slc_regs_regs_cse_sva[43:34]) , (regs_operator_slc_regs_regs_cse_sva[45:36])
      , (regs_operator_slc_regs_regs_cse_sva[47:38]) , (regs_operator_slc_regs_regs_cse_sva[49:40])
      , (regs_operator_slc_regs_regs_cse_sva[51:42]) , (regs_operator_slc_regs_regs_cse_sva[53:44])
      , (regs_operator_slc_regs_regs_cse_sva[55:46]) , (regs_operator_slc_regs_regs_cse_sva[57:48])
      , (regs_operator_slc_regs_regs_cse_sva[59:50]) , (regs_operator_slc_regs_regs_cse_sva[61:52])
      , (regs_operator_slc_regs_regs_cse_sva[63:54]) , (regs_operator_slc_regs_regs_cse_sva[65:56])
      , (regs_operator_slc_regs_regs_cse_sva[67:58]) , (regs_operator_slc_regs_regs_cse_sva[69:60])
      , 10'b0}, ACC_GX_for_acc_13_psp_sva);
  assign nl_ACC_GX_for_acc_7_ctmp_sva = (ACC_GX_for_mux_19_nl) + conv_u2u_10_16((ACC_GX_for_mux_20_nl)
      & ({{9{ACC_GX_for_mux_16_itm}}, ACC_GX_for_mux_16_itm}));
  assign ACC_GX_for_acc_7_ctmp_sva = nl_ACC_GX_for_acc_7_ctmp_sva[15:0];
  assign blue_x_0_lpi_1_dfm = blue_x_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign blue_x_1_lpi_1_dfm = blue_x_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign regs_operator_slc_regs_regs_cse_sva = MUX_v_90_4_2({regs_regs_0_sva_dfm_mx0
      , regs_regs_1_sva_dfm_mx0 , regs_regs_2_lpi_1_dfm_mx0 , 90'b0}, FRAME_i_3_lpi_1_dfm);
  assign nl_ACC_GX_for_acc_13_psp_sva = conv_s2u_3_5({1'b1 , (~ FRAME_a_5_lpi_1_dfm)})
      + ({(FRAME_a_5_lpi_1_dfm[0]) , 4'b1});
  assign ACC_GX_for_acc_13_psp_sva = nl_ACC_GX_for_acc_13_psp_sva[4:0];
  assign green_x_2_lpi_1_dfm = green_x_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GX_for_mux_17_nl = MUX_v_16_4_2({green_x_0_lpi_1_dfm , green_x_1_lpi_1_dfm
      , green_x_2_lpi_1_dfm , 16'b0}, FRAME_a_5_lpi_1_dfm);
  assign ACC_GX_for_mux_18_nl = MUX_v_10_32_2({(regs_operator_slc_regs_regs_cse_sva[73:64])
      , (regs_operator_slc_regs_regs_cse_sva[75:66]) , (regs_operator_slc_regs_regs_cse_sva[77:68])
      , (regs_operator_slc_regs_regs_cse_sva[79:70]) , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[19:10])
      , (regs_operator_slc_regs_regs_cse_sva[21:12]) , (regs_operator_slc_regs_regs_cse_sva[23:14])
      , (regs_operator_slc_regs_regs_cse_sva[25:16]) , (regs_operator_slc_regs_regs_cse_sva[27:18])
      , (regs_operator_slc_regs_regs_cse_sva[29:20]) , (regs_operator_slc_regs_regs_cse_sva[31:22])
      , (regs_operator_slc_regs_regs_cse_sva[33:24]) , (regs_operator_slc_regs_regs_cse_sva[35:26])
      , (regs_operator_slc_regs_regs_cse_sva[37:28]) , (regs_operator_slc_regs_regs_cse_sva[39:30])
      , (regs_operator_slc_regs_regs_cse_sva[41:32]) , (regs_operator_slc_regs_regs_cse_sva[43:34])
      , (regs_operator_slc_regs_regs_cse_sva[45:36]) , (regs_operator_slc_regs_regs_cse_sva[47:38])
      , (regs_operator_slc_regs_regs_cse_sva[49:40]) , (regs_operator_slc_regs_regs_cse_sva[51:42])
      , (regs_operator_slc_regs_regs_cse_sva[53:44]) , (regs_operator_slc_regs_regs_cse_sva[55:46])
      , (regs_operator_slc_regs_regs_cse_sva[57:48]) , (regs_operator_slc_regs_regs_cse_sva[59:50])
      , (regs_operator_slc_regs_regs_cse_sva[61:52]) , (regs_operator_slc_regs_regs_cse_sva[63:54])
      , (regs_operator_slc_regs_regs_cse_sva[65:56]) , (regs_operator_slc_regs_regs_cse_sva[67:58])
      , (regs_operator_slc_regs_regs_cse_sva[69:60]) , (regs_operator_slc_regs_regs_cse_sva[71:62])},
      ACC_GX_for_acc_13_psp_sva + 5'b101);
  assign nl_ACC_GX_for_acc_4_ctmp_sva = (ACC_GX_for_mux_17_nl) + conv_u2u_10_16((ACC_GX_for_mux_18_nl)
      & ({{9{ACC_GX_for_mux_16_itm}}, ACC_GX_for_mux_16_itm}));
  assign ACC_GX_for_acc_4_ctmp_sva = nl_ACC_GX_for_acc_4_ctmp_sva[15:0];
  assign green_x_0_lpi_1_dfm = green_x_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign green_x_1_lpi_1_dfm = green_x_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign red_x_2_lpi_1_dfm = red_x_2_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign ACC_GX_for_mux_14_nl = MUX_v_16_4_2({red_x_0_lpi_1_dfm , red_x_1_lpi_1_dfm
      , red_x_2_lpi_1_dfm , 16'b0}, FRAME_a_5_lpi_1_dfm);
  assign ACC_GX_for_mux_15_nl = MUX_s_1_16_2({1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 ,
      1'b0 , 1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0},
      conv_u2u_2_4(FRAME_a_5_lpi_1_dfm) + ({ACC_GX_for_acc_14_itm , (FRAME_i_3_lpi_1_dfm[0])}));
  assign nl_ACC_GX_for_acc_1_ctmp_sva = (ACC_GX_for_mux_14_nl) + conv_u2u_10_16(ACC_GX_for_rshift_itm
      & (signext_10_1(ACC_GX_for_mux_15_nl)));
  assign ACC_GX_for_acc_1_ctmp_sva = nl_ACC_GX_for_acc_1_ctmp_sva[15:0];
  assign red_x_0_lpi_1_dfm = red_x_0_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign red_x_1_lpi_1_dfm = red_x_1_sva_1 & (signext_16_1(~ exit_ACC_GX_1_lpi_1_dfm));
  assign exit_FRAME_lpi_1_dfm_1_mx0 = MUX_s_1_2_2({(FRAME_p_1_sva_1[1]) , (exit_FRAME_lpi_1_dfm_1
      & (~ exit_ACC_GX_1_lpi_1_dfm))}, or_3_cse);
  assign nl_FRAME_p_1_sva_1 = conv_u2u_1_2(FRAME_p_1_lpi_1_dfm_3) + 2'b1;
  assign FRAME_p_1_sva_1 = nl_FRAME_p_1_sva_1[1:0];
  assign FRAME_p_1_lpi_1_dfm_3 = FRAME_p_1_lpi_3 & (~ exit_FRAME_1_sva);
  assign nl_ACC_GX_for_acc_14_itm = conv_u2u_1_3(FRAME_i_3_lpi_1_dfm[1]) + conv_u2u_2_3(FRAME_i_3_lpi_1_dfm);
  assign ACC_GX_for_acc_14_itm = nl_ACC_GX_for_acc_14_itm[2:0];
  assign ACC_GY_for_mux_9_itm = MUX_s_1_16_2({1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 ,
      1'b0 , 1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0},
      {(conv_u2u_2_3(ACC_GY_for_acc_15_sdt[2:1]) + conv_u2u_2_3(FRAME_i_2_lpi_1_dfm))
      , (ACC_GY_for_acc_15_sdt[0])});
  assign ACC_GX_for_mux_16_itm = MUX_s_1_16_2({1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 ,
      1'b0 , 1'b1 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0},
      ({ACC_GX_for_acc_14_itm , (FRAME_i_3_lpi_1_dfm[0])}) + conv_u2u_2_4(FRAME_a_5_lpi_1_dfm));
  assign or_dcpl_1 = (ACC_GY_for_acc_itm[1]) | (ACC_GX_for_acc_itm[1]);
  assign and_dcpl_28 = ~(exit_ACC_GX_1_sva_1_st_1 | exit_FRAME_1_sva);
  assign and_dcpl_31 = (~ exit_ACC_GX_1_lpi_1_dfm) & (FRAME_a_6_lpi_1[1]);
  assign or_6_cse = exit_ACC_GX_1_lpi_1_dfm | (~ (FRAME_a_6_lpi_1[0])) | and_dcpl_31;
  assign and_dcpl_32 = (~ exit_ACC_GX_1_lpi_1_dfm) & (FRAME_a_6_lpi_1[0]);
  assign or_8_cse = and_dcpl_32 | exit_ACC_GX_1_lpi_1_dfm | (~ (FRAME_a_6_lpi_1[1]));
  assign or_9_cse = and_dcpl_32 | and_dcpl_31;
  assign and_dcpl_35 = (~ exit_ACC_GX_1_lpi_1_dfm) & (FRAME_a_5_lpi_1[1]);
  assign or_11_cse = exit_ACC_GX_1_lpi_1_dfm | (~ (FRAME_a_5_lpi_1[0])) | and_dcpl_35;
  assign and_dcpl_36 = (~ exit_ACC_GX_1_lpi_1_dfm) & (FRAME_a_5_lpi_1[0]);
  assign or_13_cse = and_dcpl_36 | exit_ACC_GX_1_lpi_1_dfm | (~ (FRAME_a_5_lpi_1[1]));
  assign or_14_cse = and_dcpl_36 | and_dcpl_35;
  assign or_46_cse = exit_ACC_GX_sva_1 | or_dcpl_1;
  assign and_cse = ~(exit_ACC_GX_sva_1 | or_dcpl_1);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      FRAME_slc_FRAME_ac_int_cctor_13_itm_1 <= 15'b0;
      AbsAndMax_7_else_slc_itm_1 <= 1'b0;
      FRAME_ac_int_cctor_14_sva_1 <= 16'b0;
      AbsAndMax_7_and_itm_1 <= 1'b0;
      AbsAndMax_7_slc_svs_1 <= 1'b0;
      AbsAndMax_mux1h_itm_1 <= 16'b0;
      AbsAndMax_1_mux1h_itm_1 <= 16'b0;
      exit_ACC_GX_1_sva_1_st_1 <= 1'b0;
      regs_regs_2_lpi_1_dfm <= 90'b0;
      regs_regs_1_sva <= 90'b0;
      regs_regs_0_sva <= 90'b0;
      green_y_1_sva_1 <= 16'b0;
      green_y_2_sva_1 <= 16'b0;
      green_y_0_sva_1 <= 16'b0;
      green_x_1_sva_1 <= 16'b0;
      green_x_2_sva_1 <= 16'b0;
      green_x_0_sva_1 <= 16'b0;
      blue_y_1_sva_1 <= 16'b0;
      blue_y_2_sva_1 <= 16'b0;
      blue_y_0_sva_1 <= 16'b0;
      blue_x_1_sva_1 <= 16'b0;
      blue_x_2_sva_1 <= 16'b0;
      blue_x_0_sva_1 <= 16'b0;
      red_y_1_sva_1 <= 16'b0;
      red_y_2_sva_1 <= 16'b0;
      red_y_0_sva_1 <= 16'b0;
      red_x_1_sva_1 <= 16'b0;
      red_x_2_sva_1 <= 16'b0;
      red_x_0_sva_1 <= 16'b0;
      exit_ACC_GX_lpi_1_dfm_2 <= 1'b0;
      FRAME_i_3_lpi_1 <= 2'b0;
      FRAME_a_6_lpi_1 <= 2'b0;
      FRAME_a_5_lpi_1 <= 2'b0;
      FRAME_i_2_lpi_1 <= 2'b0;
      exit_FRAME_1_sva <= 1'b1;
      main_stage_0_2 <= 1'b0;
      exit_FRAME_lpi_1_dfm_1 <= 1'b0;
      FRAME_p_1_lpi_3 <= 1'b0;
    end
    else begin
      if ( en ) begin
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({({((MUX_v_10_2_2({(FRAME_ac_int_cctor_12_sva[9:0])
            , ((~ (FRAME_ac_int_cctor_12_sva[9:0])) + 10'b1)}, FRAME_ac_int_cctor_12_sva[15]))
            | (signext_10_1(readslicef_7_1_6((conv_s2u_6_7(~ (FRAME_ac_int_cctor_12_sva[15:10]))
            + 7'b1)))) | ({4'b0 , (AbsAndMax_AbsAndMax_return_8_lpi_1_dfm_1[15:10])}))
            , (AbsAndMax_AbsAndMax_return_8_lpi_1_dfm_1[9:6]) , ((AbsAndMax_AbsAndMax_return_8_lpi_1_dfm_1[5:0])
            | (AbsAndMax_AbsAndMax_return_7_lpi_1_dfm_1[15:10])) , (AbsAndMax_AbsAndMax_return_7_lpi_1_dfm_1[9:0])})
            , vout_rsc_mgc_out_stdreg_d}, ~(exit_ACC_GX_1_sva_1_st_1 & main_stage_0_2));
        FRAME_slc_FRAME_ac_int_cctor_13_itm_1 <= FRAME_acc_3_tmp[14:0];
        AbsAndMax_7_else_slc_itm_1 <= FRAME_acc_3_tmp[15];
        FRAME_ac_int_cctor_14_sva_1 <= nl_FRAME_ac_int_cctor_14_sva_1[15:0];
        AbsAndMax_7_and_itm_1 <= (FRAME_acc_3_tmp[15]) & (~ (AbsAndMax_7_if_acc_itm[6]));
        AbsAndMax_7_slc_svs_1 <= AbsAndMax_7_if_acc_itm[6];
        AbsAndMax_mux1h_itm_1 <= MUX1HOT_v_16_3_2({({6'b0 , (redx_1_sva[9:0])}) ,
            (conv_u2u_15_16(~ (redx_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((redx_1_sva[15])
            | (AbsAndMax_if_acc_itm[6]))) , ((redx_1_sva[15]) & (~ (AbsAndMax_if_acc_itm[6])))
            , (AbsAndMax_if_acc_itm[6])});
        AbsAndMax_1_mux1h_itm_1 <= MUX1HOT_v_16_3_2({({6'b0 , (redy_1_sva[9:0])})
            , (conv_u2u_15_16(~ (redy_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((redy_1_sva[15])
            | (AbsAndMax_1_if_acc_itm[6]))) , ((redy_1_sva[15]) & (~ (AbsAndMax_1_if_acc_itm[6])))
            , (AbsAndMax_1_if_acc_itm[6])});
        exit_ACC_GX_1_sva_1_st_1 <= exit_ACC_GX_1_sva_1;
        regs_regs_2_lpi_1_dfm <= regs_regs_2_lpi_1_dfm_mx0;
        regs_regs_1_sva <= regs_regs_1_sva_dfm_mx0;
        regs_regs_0_sva <= regs_regs_0_sva_dfm_mx0;
        green_y_1_sva_1 <= green_y_1_sva_1_mx0;
        green_y_2_sva_1 <= green_y_2_sva_1_mx0;
        green_y_0_sva_1 <= green_y_0_sva_1_mx0;
        green_x_1_sva_1 <= green_x_1_sva_1_mx0;
        green_x_2_sva_1 <= green_x_2_sva_1_mx0;
        green_x_0_sva_1 <= green_x_0_sva_1_mx0;
        blue_y_1_sva_1 <= blue_y_1_sva_1_mx0;
        blue_y_2_sva_1 <= blue_y_2_sva_1_mx0;
        blue_y_0_sva_1 <= blue_y_0_sva_1_mx0;
        blue_x_1_sva_1 <= blue_x_1_sva_1_mx0;
        blue_x_2_sva_1 <= blue_x_2_sva_1_mx0;
        blue_x_0_sva_1 <= blue_x_0_sva_1_mx0;
        red_y_1_sva_1 <= red_y_1_sva_1_mx0;
        red_y_2_sva_1 <= red_y_2_sva_1_mx0;
        red_y_0_sva_1 <= red_y_0_sva_1_mx0;
        red_x_1_sva_1 <= red_x_1_sva_1_mx0;
        red_x_2_sva_1 <= red_x_2_sva_1_mx0;
        red_x_0_sva_1 <= red_x_0_sva_1_mx0;
        exit_ACC_GX_lpi_1_dfm_2 <= exit_ACC_GX_lpi_1_dfm_2_mx0;
        FRAME_i_3_lpi_1 <= MUX_v_2_2_2({FRAME_i_3_sva_1 , FRAME_i_3_lpi_1_dfm}, or_dcpl_1);
        FRAME_a_6_lpi_1 <= ~((~(FRAME_a_6_sva_1 | (signext_2_1(~ or_46_cse)))) |
            ({{1{and_cse}}, and_cse}));
        FRAME_a_5_lpi_1 <= ~((~(FRAME_a_5_sva_1 | (signext_2_1(~ or_46_cse)))) |
            ({{1{and_cse}}, and_cse}));
        FRAME_i_2_lpi_1 <= MUX_v_2_2_2({FRAME_i_2_sva_1 , FRAME_i_2_lpi_1_dfm}, or_dcpl_1);
        exit_FRAME_1_sva <= exit_ACC_GX_1_sva_1 & exit_FRAME_lpi_1_dfm_1_mx0;
        main_stage_0_2 <= 1'b1;
        exit_FRAME_lpi_1_dfm_1 <= exit_FRAME_lpi_1_dfm_1_mx0;
        FRAME_p_1_lpi_3 <= MUX_s_1_2_2({(FRAME_p_1_sva_1[0]) , FRAME_p_1_lpi_1_dfm_3},
            or_3_cse);
      end
    end
  end
  assign nl_FRAME_ac_int_cctor_14_sva_1  = (MUX1HOT_v_16_3_2({({6'b0 , (greenx_1_sva[9:0])})
      , (conv_u2u_15_16(~ (greenx_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((greenx_1_sva[15])
      | (AbsAndMax_2_if_acc_itm[6]))) , ((greenx_1_sva[15]) & (~ (AbsAndMax_2_if_acc_itm[6])))
      , (AbsAndMax_2_if_acc_itm[6])})) + (MUX1HOT_v_16_3_2({({6'b0 , (greeny_1_sva[9:0])})
      , (conv_u2u_15_16(~ (greeny_1_sva[14:0])) + 16'b1) , 16'b1111111111}, {(~((greeny_1_sva[15])
      | (AbsAndMax_3_if_acc_itm[6]))) , ((greeny_1_sva[15]) & (~ (AbsAndMax_3_if_acc_itm[6])))
      , (AbsAndMax_3_if_acc_itm[6])}));

  function [15:0] MUX1HOT_v_16_3_2;
    input [47:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function [89:0] MUX_v_90_2_2;
    input [179:0] inputs;
    input [0:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[179:90];
      end
      1'b1 : begin
        result = inputs[89:0];
      end
      default : begin
        result = inputs[179:90];
      end
    endcase
    MUX_v_90_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [15:0] signext_16_1;
    input [0:0] vector;
  begin
    signext_16_1= {{15{vector[0]}}, vector};
  end
  endfunction


  function [15:0] MUX_v_16_4_2;
    input [63:0] inputs;
    input [1:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[63:48];
      end
      2'b01 : begin
        result = inputs[47:32];
      end
      2'b10 : begin
        result = inputs[31:16];
      end
      2'b11 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[63:48];
      end
    endcase
    MUX_v_16_4_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_32_2;
    input [319:0] inputs;
    input [4:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = inputs[319:310];
      end
      5'b00001 : begin
        result = inputs[309:300];
      end
      5'b00010 : begin
        result = inputs[299:290];
      end
      5'b00011 : begin
        result = inputs[289:280];
      end
      5'b00100 : begin
        result = inputs[279:270];
      end
      5'b00101 : begin
        result = inputs[269:260];
      end
      5'b00110 : begin
        result = inputs[259:250];
      end
      5'b00111 : begin
        result = inputs[249:240];
      end
      5'b01000 : begin
        result = inputs[239:230];
      end
      5'b01001 : begin
        result = inputs[229:220];
      end
      5'b01010 : begin
        result = inputs[219:210];
      end
      5'b01011 : begin
        result = inputs[209:200];
      end
      5'b01100 : begin
        result = inputs[199:190];
      end
      5'b01101 : begin
        result = inputs[189:180];
      end
      5'b01110 : begin
        result = inputs[179:170];
      end
      5'b01111 : begin
        result = inputs[169:160];
      end
      5'b10000 : begin
        result = inputs[159:150];
      end
      5'b10001 : begin
        result = inputs[149:140];
      end
      5'b10010 : begin
        result = inputs[139:130];
      end
      5'b10011 : begin
        result = inputs[129:120];
      end
      5'b10100 : begin
        result = inputs[119:110];
      end
      5'b10101 : begin
        result = inputs[109:100];
      end
      5'b10110 : begin
        result = inputs[99:90];
      end
      5'b10111 : begin
        result = inputs[89:80];
      end
      5'b11000 : begin
        result = inputs[79:70];
      end
      5'b11001 : begin
        result = inputs[69:60];
      end
      5'b11010 : begin
        result = inputs[59:50];
      end
      5'b11011 : begin
        result = inputs[49:40];
      end
      5'b11100 : begin
        result = inputs[39:30];
      end
      5'b11101 : begin
        result = inputs[29:20];
      end
      5'b11110 : begin
        result = inputs[19:10];
      end
      5'b11111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[319:310];
      end
    endcase
    MUX_v_10_32_2 = result;
  end
  endfunction


  function [89:0] MUX_v_90_4_2;
    input [359:0] inputs;
    input [1:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[359:270];
      end
      2'b01 : begin
        result = inputs[269:180];
      end
      2'b10 : begin
        result = inputs[179:90];
      end
      2'b11 : begin
        result = inputs[89:0];
      end
      default : begin
        result = inputs[359:270];
      end
    endcase
    MUX_v_90_4_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_16_2;
    input [15:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[15:15];
      end
      4'b0001 : begin
        result = inputs[14:14];
      end
      4'b0010 : begin
        result = inputs[13:13];
      end
      4'b0011 : begin
        result = inputs[12:12];
      end
      4'b0100 : begin
        result = inputs[11:11];
      end
      4'b0101 : begin
        result = inputs[10:10];
      end
      4'b0110 : begin
        result = inputs[9:9];
      end
      4'b0111 : begin
        result = inputs[8:8];
      end
      4'b1000 : begin
        result = inputs[7:7];
      end
      4'b1001 : begin
        result = inputs[6:6];
      end
      4'b1010 : begin
        result = inputs[5:5];
      end
      4'b1011 : begin
        result = inputs[4:4];
      end
      4'b1100 : begin
        result = inputs[3:3];
      end
      4'b1101 : begin
        result = inputs[2:2];
      end
      4'b1110 : begin
        result = inputs[1:1];
      end
      4'b1111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[15:15];
      end
    endcase
    MUX_s_1_16_2 = result;
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function  [15:0] conv_u2u_10_16 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_16 = {{6{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_s2u_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2u_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    edge_detect
//  Generated from file(s):
//  114) $PROJECT_HOME/Sobel/edge3.c
// ------------------------------------------------------------------


module edge_detect (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [89:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [89:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(90)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  edge_detect_core edge_detect_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



