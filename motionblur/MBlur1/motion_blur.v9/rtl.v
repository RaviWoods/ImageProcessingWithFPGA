// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   jb914@EEWS104A-020
//  Generated date: Mon May 11 13:20:14 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    motion_blur_core
// ------------------------------------------------------------------


module motion_blur_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  reg [29:0] regs_regs_2_1_sva;
  reg [29:0] regs_regs_3_1_sva_1;
  reg [9:0] regs_regs_slc_regs_regs_4_itm;
  reg [9:0] regs_regs_slc_regs_regs_1_1_2_itm;
  reg [9:0] regs_regs_slc_regs_regs_4_3_itm;
  reg [9:0] regs_regs_slc_regs_regs_1_1_3_itm;
  reg [9:0] regs_regs_slc_regs_regs_4_4_itm;
  reg [9:0] regs_regs_slc_regs_regs_1_1_1_itm;
  reg [1:0] absmax_slc_absmax_absmax_return_3_itm_1;
  reg [1:0] absmax_slc_absmax_absmax_return_3_7_itm_1;
  reg [1:0] absmax_slc_absmax_absmax_return_3_5_itm_1;
  reg [1:0] absmax_slc_absmax_absmax_return_3_6_itm_1;
  reg [1:0] absmax_slc_absmax_absmax_return_3_8_itm_1;
  reg [9:0] absmax_2_or_itm_1;
  reg [9:0] absmax_1_or_itm_1;
  reg main_stage_0_2;
  reg [29:0] regs_regs_1_1_sva_sg2;
  reg [29:0] regs_regs_1_1_sva_2;
  wire [4:0] acc_imod_4_sva;
  wire [6:0] nl_acc_imod_4_sva;
  wire [4:0] acc_imod_2_sva;
  wire [6:0] nl_acc_imod_2_sva;
  wire [4:0] acc_imod_sva;
  wire [6:0] nl_acc_imod_sva;
  wire [12:0] ACC2_5_acc_2_psp_sva;
  wire [13:0] nl_ACC2_5_acc_2_psp_sva;
  wire [12:0] ACC2_5_acc_3_psp_sva;
  wire [13:0] nl_ACC2_5_acc_3_psp_sva;
  wire [12:0] ACC2_5_acc_1_psp_sva;
  wire [13:0] nl_ACC2_5_acc_1_psp_sva;
  reg [29:0] reg_regs_regs_0_1_sva_tmp_30;
  wire [4:0] acc_imod_6_sva;
  wire [5:0] nl_acc_imod_6_sva;
  wire [2:0] FRAME_acc_47_sdt;
  wire [3:0] nl_FRAME_acc_47_sdt;
  wire [10:0] FRAME_acc_3_psp_2_sva;
  wire [12:0] nl_FRAME_acc_3_psp_2_sva;
  wire [10:0] FRAME_acc_4_psp_2_sva;
  wire [12:0] nl_FRAME_acc_4_psp_2_sva;
  wire [10:0] FRAME_acc_2_psp_2_sva;
  wire [12:0] nl_FRAME_acc_2_psp_2_sva;
  wire [9:0] absmax_absmax_return_6_lpi_1_dfm_1;


  // Interconnect Declarations for Component Instantiations 
  assign nl_acc_imod_6_sva = conv_s2s_4_5({(({1'b1 , (FRAME_acc_47_sdt[2:1])}) +
      3'b1) , (FRAME_acc_47_sdt[0])}) + conv_u2s_4_5(conv_u2u_3_4(conv_u2u_2_3(~
      absmax_slc_absmax_absmax_return_3_7_itm_1) + conv_u2u_2_3(absmax_slc_absmax_absmax_return_3_8_itm_1))
      + conv_u2u_2_4(absmax_slc_absmax_absmax_return_3_itm_1));
  assign acc_imod_6_sva = nl_acc_imod_6_sva[4:0];
  assign nl_FRAME_acc_47_sdt = conv_u2u_2_3(~ absmax_slc_absmax_absmax_return_3_5_itm_1)
      + conv_u2u_2_3(absmax_slc_absmax_absmax_return_3_6_itm_1);
  assign FRAME_acc_47_sdt = nl_FRAME_acc_47_sdt[2:0];
  assign nl_FRAME_acc_3_psp_2_sva = (conv_u2s_10_11(signext_10_9({(ACC2_5_acc_3_psp_sva[12])
      , 2'b0 , (signext_2_1(ACC2_5_acc_3_psp_sva[12])) , 2'b0 , (signext_2_1(ACC2_5_acc_3_psp_sva[12]))}))
      + conv_s2s_9_11(conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(ACC2_5_acc_3_psp_sva[9:8])
      * 8'b110011)) + conv_s2s_7_9(conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(ACC2_5_acc_3_psp_sva[7:6])
      * 6'b1101)) + conv_s2s_5_7(conv_s2s_4_5(({2'b10 , (ACC2_5_acc_3_psp_sva[3:2])})
      + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_3_psp_sva[5:4])
      , 1'b1}) + conv_u2u_3_4({(acc_imod_2_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(ACC2_5_acc_3_psp_sva[5:4])
      , (acc_imod_2_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_2_sva[4])) , 1'b1 , (~
      (readslicef_4_1_3((({1'b1 , (acc_imod_2_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~
      (acc_imod_2_sva[3:2])) , (~ (acc_imod_2_sva[4]))})))))})))))) + conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(ACC2_5_acc_3_psp_sva[11:10])
      * 10'b11001101));
  assign FRAME_acc_3_psp_2_sva = nl_FRAME_acc_3_psp_2_sva[10:0];
  assign nl_FRAME_acc_4_psp_2_sva = (conv_u2s_10_11(signext_10_9({(ACC2_5_acc_2_psp_sva[12])
      , 2'b0 , (signext_2_1(ACC2_5_acc_2_psp_sva[12])) , 2'b0 , (signext_2_1(ACC2_5_acc_2_psp_sva[12]))}))
      + conv_s2s_9_11(conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(ACC2_5_acc_2_psp_sva[9:8])
      * 8'b110011)) + conv_s2s_7_9(conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(ACC2_5_acc_2_psp_sva[7:6])
      * 6'b1101)) + conv_s2s_5_7(conv_s2s_4_5(({2'b10 , (ACC2_5_acc_2_psp_sva[3:2])})
      + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_2_psp_sva[5:4])
      , 1'b1}) + conv_u2u_3_4({(acc_imod_4_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(ACC2_5_acc_2_psp_sva[5:4])
      , (acc_imod_4_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_4_sva[4])) , 1'b1 , (~
      (readslicef_4_1_3((({1'b1 , (acc_imod_4_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~
      (acc_imod_4_sva[3:2])) , (~ (acc_imod_4_sva[4]))})))))})))))) + conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(ACC2_5_acc_2_psp_sva[11:10])
      * 10'b11001101));
  assign FRAME_acc_4_psp_2_sva = nl_FRAME_acc_4_psp_2_sva[10:0];
  assign nl_FRAME_acc_2_psp_2_sva = (conv_u2s_10_11(signext_10_9({(ACC2_5_acc_1_psp_sva[12])
      , 2'b0 , (signext_2_1(ACC2_5_acc_1_psp_sva[12])) , 2'b0 , (signext_2_1(ACC2_5_acc_1_psp_sva[12]))}))
      + conv_s2s_9_11(conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(ACC2_5_acc_1_psp_sva[9:8])
      * 8'b110011)) + conv_s2s_7_9(conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(ACC2_5_acc_1_psp_sva[7:6])
      * 6'b1101)) + conv_s2s_5_7(conv_s2s_4_5(({2'b10 , (ACC2_5_acc_1_psp_sva[3:2])})
      + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_1_psp_sva[5:4])
      , 1'b1}) + conv_u2u_3_4({(acc_imod_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({(ACC2_5_acc_1_psp_sva[5:4])
      , (acc_imod_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_sva[4])) , 1'b1 , (~ (readslicef_4_1_3((({1'b1
      , (acc_imod_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~ (acc_imod_sva[3:2])) , (~
      (acc_imod_sva[4]))})))))})))))) + conv_u2s_10_12(conv_u2s_20_11(conv_u2u_2_10(ACC2_5_acc_1_psp_sva[11:10])
      * 10'b11001101));
  assign FRAME_acc_2_psp_2_sva = nl_FRAME_acc_2_psp_2_sva[10:0];
  assign nl_ACC2_5_acc_2_psp_sva = conv_u2u_12_13(conv_u2u_11_12(conv_u2u_10_11(regs_regs_3_1_sva_1[19:10])
      + conv_u2u_10_11(regs_regs_slc_regs_regs_4_3_itm)) + conv_u2u_10_12(vin_rsc_mgc_in_wire_d[19:10]))
      + conv_u2u_11_13(conv_u2u_10_11(reg_regs_regs_0_1_sva_tmp_30[19:10]) + conv_u2u_10_11(regs_regs_slc_regs_regs_1_1_3_itm));
  assign ACC2_5_acc_2_psp_sva = nl_ACC2_5_acc_2_psp_sva[12:0];
  assign nl_acc_imod_4_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(ACC2_5_acc_2_psp_sva[5:4])
      + conv_u2u_2_3(~ (ACC2_5_acc_2_psp_sva[7:6]))) + conv_u2u_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_2_psp_sva[9:8])
      , 1'b1}) + conv_u2u_3_4({(~ (ACC2_5_acc_2_psp_sva[11:10])) , 1'b1}))))) + conv_u2u_3_5(conv_u2u_2_3(ACC2_5_acc_2_psp_sva[1:0])
      + conv_u2u_2_3(~ (ACC2_5_acc_2_psp_sva[3:2])))) + ({4'b1011 , (ACC2_5_acc_2_psp_sva[12])});
  assign acc_imod_4_sva = nl_acc_imod_4_sva[4:0];
  assign nl_ACC2_5_acc_3_psp_sva = conv_u2u_12_13(conv_u2u_11_12(conv_u2u_10_11(regs_regs_3_1_sva_1[9:0])
      + conv_u2u_10_11(regs_regs_slc_regs_regs_4_4_itm)) + conv_u2u_10_12(vin_rsc_mgc_in_wire_d[9:0]))
      + conv_u2u_11_13(conv_u2u_10_11(reg_regs_regs_0_1_sva_tmp_30[9:0]) + conv_u2u_10_11(regs_regs_slc_regs_regs_1_1_1_itm));
  assign ACC2_5_acc_3_psp_sva = nl_ACC2_5_acc_3_psp_sva[12:0];
  assign nl_acc_imod_2_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(ACC2_5_acc_3_psp_sva[5:4])
      + conv_u2u_2_3(~ (ACC2_5_acc_3_psp_sva[7:6]))) + conv_u2u_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_3_psp_sva[9:8])
      , 1'b1}) + conv_u2u_3_4({(~ (ACC2_5_acc_3_psp_sva[11:10])) , 1'b1}))))) + conv_u2u_3_5(conv_u2u_2_3(ACC2_5_acc_3_psp_sva[1:0])
      + conv_u2u_2_3(~ (ACC2_5_acc_3_psp_sva[3:2])))) + ({4'b1011 , (ACC2_5_acc_3_psp_sva[12])});
  assign acc_imod_2_sva = nl_acc_imod_2_sva[4:0];
  assign nl_ACC2_5_acc_1_psp_sva = conv_u2u_12_13(conv_u2u_11_12(conv_u2u_10_11(regs_regs_3_1_sva_1[29:20])
      + conv_u2u_10_11(regs_regs_slc_regs_regs_4_itm)) + conv_u2u_10_12(vin_rsc_mgc_in_wire_d[29:20]))
      + conv_u2u_11_13(conv_u2u_10_11(reg_regs_regs_0_1_sva_tmp_30[29:20]) + conv_u2u_10_11(regs_regs_slc_regs_regs_1_1_2_itm));
  assign ACC2_5_acc_1_psp_sva = nl_ACC2_5_acc_1_psp_sva[12:0];
  assign nl_acc_imod_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(ACC2_5_acc_1_psp_sva[5:4])
      + conv_u2u_2_3(~ (ACC2_5_acc_1_psp_sva[7:6]))) + conv_u2u_3_4(readslicef_4_3_1((conv_u2u_3_4({(ACC2_5_acc_1_psp_sva[9:8])
      , 1'b1}) + conv_u2u_3_4({(~ (ACC2_5_acc_1_psp_sva[11:10])) , 1'b1}))))) + conv_u2u_3_5(conv_u2u_2_3(ACC2_5_acc_1_psp_sva[1:0])
      + conv_u2u_2_3(~ (ACC2_5_acc_1_psp_sva[3:2])))) + ({4'b1011 , (ACC2_5_acc_1_psp_sva[12])});
  assign acc_imod_sva = nl_acc_imod_sva[4:0];
  assign absmax_absmax_return_6_lpi_1_dfm_1 = ((FRAME_acc_2_psp_2_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
      , (~ (FRAME_acc_2_psp_2_sva[9:0]))}) + 11'b1))))) | (signext_10_1(FRAME_acc_2_psp_2_sva[10]));
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      absmax_slc_absmax_absmax_return_3_7_itm_1 <= 2'b0;
      absmax_slc_absmax_absmax_return_3_5_itm_1 <= 2'b0;
      absmax_slc_absmax_absmax_return_3_6_itm_1 <= 2'b0;
      absmax_slc_absmax_absmax_return_3_8_itm_1 <= 2'b0;
      absmax_2_or_itm_1 <= 10'b0;
      absmax_1_or_itm_1 <= 10'b0;
      absmax_slc_absmax_absmax_return_3_itm_1 <= 2'b0;
      regs_regs_3_1_sva_1 <= 30'b0;
      regs_regs_slc_regs_regs_4_4_itm <= 10'b0;
      regs_regs_slc_regs_regs_1_1_1_itm <= 10'b0;
      regs_regs_slc_regs_regs_4_3_itm <= 10'b0;
      regs_regs_slc_regs_regs_1_1_3_itm <= 10'b0;
      regs_regs_slc_regs_regs_4_itm <= 10'b0;
      regs_regs_slc_regs_regs_1_1_2_itm <= 10'b0;
      main_stage_0_2 <= 1'b0;
      regs_regs_1_1_sva_sg2 <= 30'b0;
      regs_regs_2_1_sva <= 30'b0;
      regs_regs_1_1_sva_2 <= 30'b0;
      reg_regs_regs_0_1_sva_tmp_30 <= 30'b0;
    end
    else begin
      if ( en ) begin
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({vout_rsc_mgc_out_stdreg_d , ({(signext_10_9(conv_s2s_7_9(conv_u2s_6_8(conv_u2s_12_7(conv_u2u_2_6(absmax_slc_absmax_absmax_return_3_7_itm_1)
            * 6'b1101)) + conv_s2s_5_7(conv_s2s_4_5(({2'b10 , absmax_slc_absmax_absmax_return_3_5_itm_1})
            + conv_u2s_3_4(readslicef_4_3_1((conv_u2u_3_4({absmax_slc_absmax_absmax_return_3_6_itm_1
            , 1'b1}) + conv_u2u_3_4({(acc_imod_6_sva[3:2]) , 1'b1}))))) + conv_u2s_4_5(conv_u2u_3_4({absmax_slc_absmax_absmax_return_3_6_itm_1
            , (acc_imod_6_sva[4])}) + conv_u2u_3_4({(~ (acc_imod_6_sva[4])) , 1'b1
            , (~ (readslicef_4_1_3((({1'b1 , (acc_imod_6_sva[1:0]) , 1'b1}) + conv_u2s_3_4({(~
            (acc_imod_6_sva[3:2])) , (~ (acc_imod_6_sva[4]))})))))})))) + conv_u2s_8_10(conv_u2s_16_9(conv_u2u_2_8(absmax_slc_absmax_absmax_return_3_8_itm_1)
            * 8'b110011)))) , absmax_2_or_itm_1 , absmax_1_or_itm_1})}, main_stage_0_2);
        absmax_slc_absmax_absmax_return_3_7_itm_1 <= absmax_absmax_return_6_lpi_1_dfm_1[7:6];
        absmax_slc_absmax_absmax_return_3_5_itm_1 <= absmax_absmax_return_6_lpi_1_dfm_1[3:2];
        absmax_slc_absmax_absmax_return_3_6_itm_1 <= absmax_absmax_return_6_lpi_1_dfm_1[5:4];
        absmax_slc_absmax_absmax_return_3_8_itm_1 <= absmax_absmax_return_6_lpi_1_dfm_1[9:8];
        absmax_2_or_itm_1 <= ((FRAME_acc_3_psp_2_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
            , (~ (FRAME_acc_3_psp_2_sva[9:0]))}) + 11'b1))))) | (signext_10_1(FRAME_acc_3_psp_2_sva[10]));
        absmax_1_or_itm_1 <= ((FRAME_acc_4_psp_2_sva[9:0]) & (signext_10_1(readslicef_11_1_10((({1'b1
            , (~ (FRAME_acc_4_psp_2_sva[9:0]))}) + 11'b1))))) | (signext_10_1(FRAME_acc_4_psp_2_sva[10]));
        absmax_slc_absmax_absmax_return_3_itm_1 <= absmax_absmax_return_6_lpi_1_dfm_1[1:0];
        regs_regs_3_1_sva_1 <= regs_regs_2_1_sva;
        regs_regs_slc_regs_regs_4_4_itm <= regs_regs_3_1_sva_1[9:0];
        regs_regs_slc_regs_regs_1_1_1_itm <= regs_regs_1_1_sva_sg2[9:0];
        regs_regs_slc_regs_regs_4_3_itm <= regs_regs_3_1_sva_1[19:10];
        regs_regs_slc_regs_regs_1_1_3_itm <= regs_regs_1_1_sva_sg2[19:10];
        regs_regs_slc_regs_regs_4_itm <= regs_regs_3_1_sva_1[29:20];
        regs_regs_slc_regs_regs_1_1_2_itm <= regs_regs_1_1_sva_sg2[29:20];
        main_stage_0_2 <= 1'b1;
        regs_regs_1_1_sva_sg2 <= vin_rsc_mgc_in_wire_d[89:60];
        regs_regs_2_1_sva <= regs_regs_1_1_sva_2;
        regs_regs_1_1_sva_2 <= vin_rsc_mgc_in_wire_d[29:0];
        reg_regs_regs_0_1_sva_tmp_30 <= vin_rsc_mgc_in_wire_d[59:30];
      end
    end
  end

  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [9:0] signext_10_9;
    input [8:0] vector;
  begin
    signext_10_9= {{1{vector[8]}}, vector};
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_9_11 ;
    input signed [8:0]  vector ;
  begin
    conv_s2s_9_11 = {{2{vector[8]}}, vector};
  end
  endfunction


  function signed [9:0] conv_u2s_8_10 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_10 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_16_9 ;
    input [15:0]  vector ;
  begin
    conv_u2s_16_9 = vector[8:0];
  end
  endfunction


  function  [7:0] conv_u2u_2_8 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_8 = {{6{1'b0}}, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2s_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_12_7 ;
    input [11:0]  vector ;
  begin
    conv_u2s_12_7 = vector[6:0];
  end
  endfunction


  function  [5:0] conv_u2u_2_6 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_6 = {{4{1'b0}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [10:0] conv_u2s_20_11 ;
    input [19:0]  vector ;
  begin
    conv_u2s_20_11 = vector[10:0];
  end
  endfunction


  function  [9:0] conv_u2u_2_10 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_10 = {{8{1'b0}}, vector};
  end
  endfunction


  function  [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [12:0] conv_u2u_11_13 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_13 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    motion_blur
//  Generated from file(s):
//    4) $PROJECT_HOME/motionblur1.c
// ------------------------------------------------------------------


module motion_blur (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  motion_blur_core motion_blur_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



