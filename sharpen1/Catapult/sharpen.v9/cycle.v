// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   rbw14@EEWS104A-005
//  Generated date: Fri May 01 17:37:25 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    sharpen_core
// ------------------------------------------------------------------


module sharpen_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [149:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [15:0] red_lpi_1;
    reg [15:0] green_lpi_1;
    reg [15:0] blue_lpi_1;
    reg [15:0] bluearray_2_lpi_1;
    reg [15:0] bluearray_1_lpi_1;
    reg [15:0] bluearray_3_lpi_1;
    reg [15:0] bluearray_0_lpi_1;
    reg [15:0] bluearray_4_lpi_1;
    reg [15:0] greenarray_2_lpi_1;
    reg [15:0] greenarray_1_lpi_1;
    reg [15:0] greenarray_3_lpi_1;
    reg [15:0] greenarray_0_lpi_1;
    reg [15:0] greenarray_4_lpi_1;
    reg [15:0] redarray_2_lpi_1;
    reg [15:0] redarray_1_lpi_1;
    reg [15:0] redarray_3_lpi_1;
    reg [15:0] redarray_0_lpi_1;
    reg [15:0] redarray_4_lpi_1;
    reg exit_ACC_GX_1_lpi_1;
    reg exit_SHIFT_lpi_1;
    reg [2:0] FRAME_a_3_lpi_1;
    reg [2:0] FRAME_a_4_lpi_1;
    reg [2:0] FRAME_i_1_lpi_1;
    reg [149:0] regs_regs_2_sva;
    reg [149:0] regs_regs_1_sva;
    reg [149:0] regs_regs_3_sva;
    reg [149:0] regs_regs_0_sva;
    reg [149:0] regs_regs_4_sva;
    reg exit_ACC3_sva;
    reg [149:0] regs_operator_din_sva;
    reg [15:0] red_lpi_1_dfm;
    reg [15:0] green_lpi_1_dfm;
    reg [15:0] blue_lpi_1_dfm;
    reg [15:0] redarray_0_lpi_1_dfm;
    reg [15:0] redarray_1_lpi_1_dfm;
    reg [15:0] redarray_2_lpi_1_dfm;
    reg [15:0] redarray_3_lpi_1_dfm;
    reg [15:0] redarray_4_lpi_1_dfm;
    reg [15:0] greenarray_0_lpi_1_dfm;
    reg [15:0] greenarray_1_lpi_1_dfm;
    reg [15:0] greenarray_2_lpi_1_dfm;
    reg [15:0] greenarray_3_lpi_1_dfm;
    reg [15:0] greenarray_4_lpi_1_dfm;
    reg [15:0] bluearray_0_lpi_1_dfm;
    reg [15:0] bluearray_1_lpi_1_dfm;
    reg [15:0] bluearray_2_lpi_1_dfm;
    reg [15:0] bluearray_3_lpi_1_dfm;
    reg [15:0] bluearray_4_lpi_1_dfm;
    reg [149:0] regs_operator_din_lpi_1_dfm;
    reg exit_ACC_GX_1_lpi_1_dfm;
    reg exit_SHIFT_lpi_1_dfm;
    reg [15:0] red_sva_1;
    reg [15:0] blue_sva_1;
    reg [15:0] green_sva_1;
    reg [2:0] FRAME_a_3_sva;
    reg exit_ACC3_sva_2;
    reg AbsAndMax_slc_svs;
    reg [9:0] AbsAndMax_AbsAndMax_return_3_sva_1;
    reg AbsAndMax_1_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_1_lpi_1_dfm;
    reg AbsAndMax_2_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_2_sva_1;
    reg [15:0] AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1;
    reg [5:0] ACC_GX_for_acc_13_psp_sva;
    reg [2:0] ACC_GX_for_acc_14_psp_sva;
    reg [149:0] regs_operator_slc_regs_regs_cse_sva;
    reg [15:0] ACC_GX_for_acc_1_ctmp_sva;
    reg and_stg_8_sva;
    reg ACC_GX_for_slc_gx_rom_26_1_cse_sva;
    reg [15:0] ACC_GX_for_acc_4_ctmp_sva;
    reg [15:0] ACC_GX_for_acc_7_ctmp_sva;
    reg [2:0] FRAME_a_4_sva;
    reg exit_ACC_GX_for_sva;
    reg [2:0] FRAME_i_1_sva;
    reg exit_ACC_GX_sva;
    reg [2:0] FRAME_a_4_lpi_1_dfm;
    reg exit_ACC_GX_1_sva_1;
    reg [2:0] FRAME_a_3_lpi_1_dfm;
    reg unequal_tmp;
    reg [149:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva;
    reg [2:0] FRAME_i_1_lpi_1_dfm_2;
    reg [2:0] FRAME_a_4_lpi_1_dfm_3;
    reg [2:0] SHIFT_acc_1_psp;
    reg AbsAndMax_1_and_seb;
    reg ACC_GX_and_19_tmp;
    reg [2:0] SHIFT_i_1_lpi_3;
    reg [2:0] SHIFT_i_1_lpi_1_dfm_2;
    reg SHIFT_nand_cse;
    reg SHIFT_and_30_cse;
    reg SHIFT_and_31_cse;
    reg SHIFT_and_32_cse;
    reg SHIFT_and_33_cse;
    reg SHIFT_and_34_cse;
    reg SHIFT_and_27_cse;

    reg[15:0] ACC3_mux_nl;
    reg[15:0] ACC3_mux_3_nl;
    reg[15:0] ACC3_mux_4_nl;
    reg[9:0] AbsAndMax_else_mux_nl;
    reg[15:0] ACC_GX_for_mux_nl;
    reg[0:0] ACC_GX_for_mux_21_nl;
    reg[15:0] ACC_GX_for_mux_23_nl;
    reg[9:0] ACC_GX_for_mux_24_nl;
    reg[15:0] ACC_GX_for_mux_25_nl;
    reg[9:0] ACC_GX_for_mux_26_nl;
    reg[0:0] ACC_GX_mux_40_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        FRAME_i_1_lpi_1 = 3'b0;
        FRAME_a_4_lpi_1 = 3'b0;
        FRAME_a_3_lpi_1 = 3'b0;
        exit_SHIFT_lpi_1 = 1'b0;
        exit_ACC_GX_1_lpi_1 = 1'b0;
        SHIFT_i_1_lpi_3 = 3'b0;
        redarray_4_lpi_1 = 16'b0;
        redarray_0_lpi_1 = 16'b0;
        redarray_3_lpi_1 = 16'b0;
        redarray_1_lpi_1 = 16'b0;
        redarray_2_lpi_1 = 16'b0;
        greenarray_4_lpi_1 = 16'b0;
        greenarray_0_lpi_1 = 16'b0;
        greenarray_3_lpi_1 = 16'b0;
        greenarray_1_lpi_1 = 16'b0;
        greenarray_2_lpi_1 = 16'b0;
        bluearray_4_lpi_1 = 16'b0;
        bluearray_0_lpi_1 = 16'b0;
        bluearray_3_lpi_1 = 16'b0;
        bluearray_1_lpi_1 = 16'b0;
        bluearray_2_lpi_1 = 16'b0;
        blue_lpi_1 = 16'b0;
        green_lpi_1 = 16'b0;
        red_lpi_1 = 16'b0;
        regs_regs_2_sva = 150'b0;
        regs_regs_1_sva = 150'b0;
        regs_regs_3_sva = 150'b0;
        regs_regs_0_sva = 150'b0;
        regs_regs_4_sva = 150'b0;
        exit_ACC3_sva = 1'b1;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            exit_ACC_GX_sva = 1'b0;
            unequal_tmp = 1'b0;
            SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
            SHIFT_acc_1_psp = 3'b0;
            FRAME_a_4_lpi_1_dfm_3 = 3'b0;
            FRAME_i_1_lpi_1_dfm_2 = 3'b0;
            FRAME_a_3_lpi_1_dfm = 3'b0;
            exit_ACC_GX_1_sva_1 = 1'b0;
            FRAME_a_4_lpi_1_dfm = 3'b0;
            FRAME_i_1_sva = 3'b0;
            FRAME_a_4_sva = 3'b0;
            ACC_GX_for_acc_7_ctmp_sva = 16'b0;
            ACC_GX_for_acc_4_ctmp_sva = 16'b0;
            ACC_GX_for_acc_1_ctmp_sva = 16'b0;
            AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = 16'b0;
            AbsAndMax_AbsAndMax_return_3_sva_1 = 10'b0;
            exit_ACC3_sva_2 = 1'b0;
            FRAME_a_3_sva = 3'b0;
            green_sva_1 = 16'b0;
            blue_sva_1 = 16'b0;
            red_sva_1 = 16'b0;
            regs_operator_din_sva = 150'b0;
            if ( exit_ACC3_sva ) begin
              regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            end
            red_lpi_1_dfm = red_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            green_lpi_1_dfm = green_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            blue_lpi_1_dfm = blue_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redarray_0_lpi_1_dfm = redarray_0_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redarray_1_lpi_1_dfm = redarray_1_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redarray_2_lpi_1_dfm = redarray_2_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redarray_3_lpi_1_dfm = redarray_3_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            redarray_4_lpi_1_dfm = redarray_4_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenarray_0_lpi_1_dfm = greenarray_0_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenarray_1_lpi_1_dfm = greenarray_1_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenarray_2_lpi_1_dfm = greenarray_2_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenarray_3_lpi_1_dfm = greenarray_3_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            greenarray_4_lpi_1_dfm = greenarray_4_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluearray_0_lpi_1_dfm = bluearray_0_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluearray_1_lpi_1_dfm = bluearray_1_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluearray_2_lpi_1_dfm = bluearray_2_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluearray_3_lpi_1_dfm = bluearray_3_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            bluearray_4_lpi_1_dfm = bluearray_4_lpi_1 & (signext_16_1(~ exit_ACC3_sva));
            regs_operator_din_lpi_1_dfm = MUX_v_150_2_2({regs_operator_din_lpi_1_dfm
                , regs_operator_din_sva}, exit_ACC3_sva);
            SHIFT_i_1_lpi_1_dfm_2 = MUX_v_3_2_2({SHIFT_i_1_lpi_3 , 3'b100}, exit_ACC3_sva);
            exit_ACC_GX_1_lpi_1_dfm = exit_ACC_GX_1_lpi_1 & (~ exit_ACC3_sva);
            exit_SHIFT_lpi_1_dfm = exit_SHIFT_lpi_1 & (~ exit_ACC3_sva);
            if ( exit_SHIFT_lpi_1_dfm ) begin
              if ( exit_ACC_GX_1_lpi_1_dfm ) begin
                ACC3_mux_nl = MUX_v_16_8_2({redarray_0_lpi_1_dfm , redarray_1_lpi_1_dfm
                    , redarray_2_lpi_1_dfm , redarray_3_lpi_1_dfm , redarray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_3_lpi_1);
                red_sva_1 = red_lpi_1_dfm + (ACC3_mux_nl);
                ACC3_mux_3_nl = MUX_v_16_8_2({bluearray_0_lpi_1_dfm , bluearray_1_lpi_1_dfm
                    , bluearray_2_lpi_1_dfm , bluearray_3_lpi_1_dfm , bluearray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_3_lpi_1);
                blue_sva_1 = blue_lpi_1_dfm + (ACC3_mux_3_nl);
                ACC3_mux_4_nl = MUX_v_16_8_2({greenarray_0_lpi_1_dfm , greenarray_1_lpi_1_dfm
                    , greenarray_2_lpi_1_dfm , greenarray_3_lpi_1_dfm , greenarray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_3_lpi_1);
                green_sva_1 = green_lpi_1_dfm + (ACC3_mux_4_nl);
                FRAME_a_3_sva = FRAME_a_3_lpi_1 + 3'b1;
                exit_ACC3_sva_2 = ~ (readslicef_4_1_3((conv_u2s_3_4(FRAME_a_3_sva)
                    + 4'b1011)));
                if ( exit_ACC3_sva_2 ) begin
                  AbsAndMax_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (red_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_slc_svs ) begin
                  end
                  else if ( red_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_3_sva_1 = (~ (red_sva_1[9:0])) + 10'b1;
                  end
                  AbsAndMax_1_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (blue_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_1_slc_svs ) begin
                  end
                  else if ( blue_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = conv_u2u_15_16(~ (blue_sva_1[14:0]))
                        + 16'b1;
                  end
                  else begin
                    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = {6'b0, blue_sva_1[9:0]};
                  end
                  AbsAndMax_2_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (green_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_2_slc_svs ) begin
                  end
                  else if ( green_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_2_sva_1 = conv_u2u_15_16(~ (green_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1 = MUX1HOT_v_16_3_2({({6'b0,
                      green_sva_1[9:0]}) , AbsAndMax_AbsAndMax_return_2_sva_1 , 16'b1111111111},
                      {(~((green_sva_1[15]) | AbsAndMax_2_slc_svs)) , ((green_sva_1[15])
                      & (~ AbsAndMax_2_slc_svs)) , AbsAndMax_2_slc_svs});
                  AbsAndMax_1_and_seb = (AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[15])
                      & (~ AbsAndMax_1_slc_svs);
                  AbsAndMax_else_mux_nl = MUX_v_10_2_2({(red_sva_1[9:0]) , AbsAndMax_AbsAndMax_return_3_sva_1},
                      red_sva_1[15]);
                  vout_rsc_mgc_out_stdreg_d <= {((AbsAndMax_else_mux_nl) | ({{9{AbsAndMax_slc_svs}},
                      AbsAndMax_slc_svs}) | (signext_10_6(AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1[15:10]))
                      | ({{9{AbsAndMax_1_and_seb}}, AbsAndMax_1_and_seb})) , ((AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1[9:0])
                      | ({({{4{AbsAndMax_1_and_seb}}, AbsAndMax_1_and_seb}) , ((AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[14:10])
                      & (signext_5_1(~ AbsAndMax_1_slc_svs)))})) , ((AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[9:0])
                      | ({{9{AbsAndMax_1_slc_svs}}, AbsAndMax_1_slc_svs}))};
                end
              end
              else begin
                ACC_GX_for_acc_13_psp_sva = conv_s2u_4_6({1'b1 , (~ FRAME_a_4_lpi_1)})
                    + ({(FRAME_a_4_lpi_1[1:0]) , 4'b1});
                ACC_GX_for_acc_14_psp_sva = conv_u2u_1_3(FRAME_i_1_lpi_1[2]) + FRAME_i_1_lpi_1;
                regs_operator_slc_regs_regs_cse_sva = MUX_v_150_8_2({regs_regs_0_sva
                    , regs_regs_1_sva , regs_regs_2_sva , regs_regs_3_sva , regs_regs_4_sva
                    , 150'b0 , 150'b0 , 150'b0}, FRAME_i_1_lpi_1);
                ACC_GX_for_mux_nl = MUX_v_16_8_2({redarray_0_lpi_1_dfm , redarray_1_lpi_1_dfm
                    , redarray_2_lpi_1_dfm , redarray_3_lpi_1_dfm , redarray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_4_lpi_1);
                ACC_GX_for_mux_21_nl = MUX_s_1_32_2({1'b1 , 1'b0 , 1'b0 , 1'b0 ,
                    1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b1
                    , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0
                    , 1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0
                    , 1'b0}, conv_u2u_3_5(FRAME_a_4_lpi_1) + ({ACC_GX_for_acc_14_psp_sva
                    , (FRAME_i_1_lpi_1[1:0])}));
                ACC_GX_for_acc_1_ctmp_sva = (ACC_GX_for_mux_nl) + conv_s2s_10_16((fsar_10_150_8(regs_operator_slc_regs_regs_cse_sva,
                    ({(conv_u2u_5_6(ACC_GX_for_acc_13_psp_sva[5:1]) + 6'b101) , (ACC_GX_for_acc_13_psp_sva[0])
                    , 1'b0}))) & (signext_10_1(ACC_GX_for_mux_21_nl)));
                and_stg_8_sva = ~((FRAME_a_4_lpi_1[1]) | (FRAME_a_4_lpi_1[0]));
                ACC_GX_for_slc_gx_rom_26_1_cse_sva = MUX_s_1_32_2({1'b1 , 1'b0 ,
                    1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0
                    , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b1 , 1'b0
                    , 1'b0 , 1'b0 , 1'b0 , 1'b0 , 1'b1 , 1'b0 , 1'b0 , 1'b0 , 1'b0
                    , 1'b0 , 1'b0 , 1'b0}, ({ACC_GX_for_acc_14_psp_sva , (FRAME_i_1_lpi_1[1:0])})
                    + conv_u2u_3_5(FRAME_a_4_lpi_1));
                ACC_GX_for_mux_23_nl = MUX_v_16_8_2({greenarray_0_lpi_1_dfm , greenarray_1_lpi_1_dfm
                    , greenarray_2_lpi_1_dfm , greenarray_3_lpi_1_dfm , greenarray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_4_lpi_1);
                ACC_GX_for_mux_24_nl = MUX_v_10_64_2({(regs_operator_slc_regs_regs_cse_sva[137:128])
                    , (regs_operator_slc_regs_regs_cse_sva[139:130]) , 10'b0 , 10'b0
                    , 10'b0 , (regs_operator_slc_regs_regs_cse_sva[19:10]) , (regs_operator_slc_regs_regs_cse_sva[21:12])
                    , (regs_operator_slc_regs_regs_cse_sva[23:14]) , (regs_operator_slc_regs_regs_cse_sva[25:16])
                    , (regs_operator_slc_regs_regs_cse_sva[27:18]) , (regs_operator_slc_regs_regs_cse_sva[29:20])
                    , (regs_operator_slc_regs_regs_cse_sva[31:22]) , (regs_operator_slc_regs_regs_cse_sva[33:24])
                    , (regs_operator_slc_regs_regs_cse_sva[35:26]) , (regs_operator_slc_regs_regs_cse_sva[37:28])
                    , (regs_operator_slc_regs_regs_cse_sva[39:30]) , (regs_operator_slc_regs_regs_cse_sva[41:32])
                    , (regs_operator_slc_regs_regs_cse_sva[43:34]) , (regs_operator_slc_regs_regs_cse_sva[45:36])
                    , (regs_operator_slc_regs_regs_cse_sva[47:38]) , (regs_operator_slc_regs_regs_cse_sva[49:40])
                    , (regs_operator_slc_regs_regs_cse_sva[51:42]) , (regs_operator_slc_regs_regs_cse_sva[53:44])
                    , (regs_operator_slc_regs_regs_cse_sva[55:46]) , (regs_operator_slc_regs_regs_cse_sva[57:48])
                    , (regs_operator_slc_regs_regs_cse_sva[59:50]) , (regs_operator_slc_regs_regs_cse_sva[61:52])
                    , (regs_operator_slc_regs_regs_cse_sva[63:54]) , (regs_operator_slc_regs_regs_cse_sva[65:56])
                    , (regs_operator_slc_regs_regs_cse_sva[67:58]) , (regs_operator_slc_regs_regs_cse_sva[69:60])
                    , (regs_operator_slc_regs_regs_cse_sva[71:62]) , (regs_operator_slc_regs_regs_cse_sva[73:64])
                    , (regs_operator_slc_regs_regs_cse_sva[75:66]) , (regs_operator_slc_regs_regs_cse_sva[77:68])
                    , (regs_operator_slc_regs_regs_cse_sva[79:70]) , (regs_operator_slc_regs_regs_cse_sva[81:72])
                    , (regs_operator_slc_regs_regs_cse_sva[83:74]) , (regs_operator_slc_regs_regs_cse_sva[85:76])
                    , (regs_operator_slc_regs_regs_cse_sva[87:78]) , (regs_operator_slc_regs_regs_cse_sva[89:80])
                    , (regs_operator_slc_regs_regs_cse_sva[91:82]) , (regs_operator_slc_regs_regs_cse_sva[93:84])
                    , (regs_operator_slc_regs_regs_cse_sva[95:86]) , (regs_operator_slc_regs_regs_cse_sva[97:88])
                    , (regs_operator_slc_regs_regs_cse_sva[99:90]) , (regs_operator_slc_regs_regs_cse_sva[101:92])
                    , (regs_operator_slc_regs_regs_cse_sva[103:94]) , (regs_operator_slc_regs_regs_cse_sva[105:96])
                    , (regs_operator_slc_regs_regs_cse_sva[107:98]) , (regs_operator_slc_regs_regs_cse_sva[109:100])
                    , (regs_operator_slc_regs_regs_cse_sva[111:102]) , (regs_operator_slc_regs_regs_cse_sva[113:104])
                    , (regs_operator_slc_regs_regs_cse_sva[115:106]) , (regs_operator_slc_regs_regs_cse_sva[117:108])
                    , (regs_operator_slc_regs_regs_cse_sva[119:110]) , (regs_operator_slc_regs_regs_cse_sva[121:112])
                    , (regs_operator_slc_regs_regs_cse_sva[123:114]) , (regs_operator_slc_regs_regs_cse_sva[125:116])
                    , (regs_operator_slc_regs_regs_cse_sva[127:118]) , (regs_operator_slc_regs_regs_cse_sva[129:120])
                    , (regs_operator_slc_regs_regs_cse_sva[131:122]) , (regs_operator_slc_regs_regs_cse_sva[133:124])
                    , (regs_operator_slc_regs_regs_cse_sva[135:126])}, ACC_GX_for_acc_13_psp_sva
                    + 6'b101);
                ACC_GX_for_acc_4_ctmp_sva = (ACC_GX_for_mux_23_nl) + conv_s2s_10_16((ACC_GX_for_mux_24_nl)
                    & ({{9{ACC_GX_for_slc_gx_rom_26_1_cse_sva}}, ACC_GX_for_slc_gx_rom_26_1_cse_sva}));
                ACC_GX_for_mux_25_nl = MUX_v_16_8_2({bluearray_0_lpi_1_dfm , bluearray_1_lpi_1_dfm
                    , bluearray_2_lpi_1_dfm , bluearray_3_lpi_1_dfm , bluearray_4_lpi_1_dfm
                    , 16'b0 , 16'b0 , 16'b0}, FRAME_a_4_lpi_1);
                ACC_GX_for_mux_26_nl = MUX_v_10_64_2({(regs_operator_slc_regs_regs_cse_sva[9:0])
                    , (regs_operator_slc_regs_regs_cse_sva[11:2]) , (regs_operator_slc_regs_regs_cse_sva[13:4])
                    , (regs_operator_slc_regs_regs_cse_sva[15:6]) , (regs_operator_slc_regs_regs_cse_sva[17:8])
                    , (regs_operator_slc_regs_regs_cse_sva[19:10]) , (regs_operator_slc_regs_regs_cse_sva[21:12])
                    , (regs_operator_slc_regs_regs_cse_sva[23:14]) , (regs_operator_slc_regs_regs_cse_sva[25:16])
                    , (regs_operator_slc_regs_regs_cse_sva[27:18]) , (regs_operator_slc_regs_regs_cse_sva[29:20])
                    , (regs_operator_slc_regs_regs_cse_sva[31:22]) , (regs_operator_slc_regs_regs_cse_sva[33:24])
                    , (regs_operator_slc_regs_regs_cse_sva[35:26]) , (regs_operator_slc_regs_regs_cse_sva[37:28])
                    , (regs_operator_slc_regs_regs_cse_sva[39:30]) , (regs_operator_slc_regs_regs_cse_sva[41:32])
                    , (regs_operator_slc_regs_regs_cse_sva[43:34]) , (regs_operator_slc_regs_regs_cse_sva[45:36])
                    , (regs_operator_slc_regs_regs_cse_sva[47:38]) , (regs_operator_slc_regs_regs_cse_sva[49:40])
                    , (regs_operator_slc_regs_regs_cse_sva[51:42]) , (regs_operator_slc_regs_regs_cse_sva[53:44])
                    , (regs_operator_slc_regs_regs_cse_sva[55:46]) , (regs_operator_slc_regs_regs_cse_sva[57:48])
                    , (regs_operator_slc_regs_regs_cse_sva[59:50]) , (regs_operator_slc_regs_regs_cse_sva[61:52])
                    , (regs_operator_slc_regs_regs_cse_sva[63:54]) , (regs_operator_slc_regs_regs_cse_sva[65:56])
                    , (regs_operator_slc_regs_regs_cse_sva[67:58]) , (regs_operator_slc_regs_regs_cse_sva[69:60])
                    , (regs_operator_slc_regs_regs_cse_sva[71:62]) , (regs_operator_slc_regs_regs_cse_sva[73:64])
                    , (regs_operator_slc_regs_regs_cse_sva[75:66]) , (regs_operator_slc_regs_regs_cse_sva[77:68])
                    , (regs_operator_slc_regs_regs_cse_sva[79:70]) , (regs_operator_slc_regs_regs_cse_sva[81:72])
                    , (regs_operator_slc_regs_regs_cse_sva[83:74]) , (regs_operator_slc_regs_regs_cse_sva[85:76])
                    , (regs_operator_slc_regs_regs_cse_sva[87:78]) , (regs_operator_slc_regs_regs_cse_sva[89:80])
                    , (regs_operator_slc_regs_regs_cse_sva[91:82]) , (regs_operator_slc_regs_regs_cse_sva[93:84])
                    , (regs_operator_slc_regs_regs_cse_sva[95:86]) , (regs_operator_slc_regs_regs_cse_sva[97:88])
                    , (regs_operator_slc_regs_regs_cse_sva[99:90]) , (regs_operator_slc_regs_regs_cse_sva[101:92])
                    , (regs_operator_slc_regs_regs_cse_sva[103:94]) , (regs_operator_slc_regs_regs_cse_sva[105:96])
                    , (regs_operator_slc_regs_regs_cse_sva[107:98]) , (regs_operator_slc_regs_regs_cse_sva[109:100])
                    , (regs_operator_slc_regs_regs_cse_sva[111:102]) , (regs_operator_slc_regs_regs_cse_sva[113:104])
                    , (regs_operator_slc_regs_regs_cse_sva[115:106]) , (regs_operator_slc_regs_regs_cse_sva[117:108])
                    , (regs_operator_slc_regs_regs_cse_sva[119:110]) , (regs_operator_slc_regs_regs_cse_sva[121:112])
                    , (regs_operator_slc_regs_regs_cse_sva[123:114]) , (regs_operator_slc_regs_regs_cse_sva[125:116])
                    , (regs_operator_slc_regs_regs_cse_sva[127:118]) , (regs_operator_slc_regs_regs_cse_sva[129:120])
                    , 10'b0 , 10'b0 , 10'b0}, ACC_GX_for_acc_13_psp_sva);
                ACC_GX_for_acc_7_ctmp_sva = (ACC_GX_for_mux_25_nl) + conv_s2s_10_16((ACC_GX_for_mux_26_nl)
                    & ({{9{ACC_GX_for_slc_gx_rom_26_1_cse_sva}}, ACC_GX_for_slc_gx_rom_26_1_cse_sva}));
                FRAME_a_4_sva = FRAME_a_4_lpi_1 + 3'b1;
                exit_ACC_GX_for_sva = ~ (readslicef_4_1_3((conv_u2s_3_4(FRAME_a_4_sva)
                    + 4'b1011)));
                if ( exit_ACC_GX_for_sva ) begin
                  FRAME_i_1_sva = FRAME_i_1_lpi_1 + 3'b1;
                  exit_ACC_GX_sva = ~ (readslicef_4_1_3((conv_u2s_3_4(FRAME_i_1_sva)
                      + 4'b1011)));
                  FRAME_a_4_lpi_1_dfm = FRAME_a_4_sva & ({{2{exit_ACC_GX_sva}}, exit_ACC_GX_sva});
                end
                exit_ACC_GX_1_sva_1 = exit_ACC_GX_for_sva & exit_ACC_GX_sva;
                FRAME_a_3_lpi_1_dfm = FRAME_a_3_lpi_1 & (signext_3_1(~ exit_ACC_GX_1_sva_1));
              end
            end
            else begin
              unequal_tmp = (SHIFT_i_1_lpi_1_dfm_2[2]) | (SHIFT_i_1_lpi_1_dfm_2[1])
                  | (SHIFT_i_1_lpi_1_dfm_2[0]);
              case (SHIFT_i_1_lpi_1_dfm_2)
                3'b0 : begin
                  // NOP
                end
                default : begin
                  SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = MUX_v_150_4_2({regs_regs_0_sva
                      , regs_regs_1_sva , regs_regs_2_sva , regs_regs_3_sva}, (SHIFT_i_1_lpi_1_dfm_2[1:0])
                      + 2'b11);
                end
              endcase
              SHIFT_acc_1_psp = SHIFT_i_1_lpi_1_dfm_2 + 3'b111;
              FRAME_i_1_lpi_1_dfm_2 = FRAME_i_1_lpi_1 & (signext_3_1(~ (SHIFT_acc_1_psp[2])));
              FRAME_a_4_lpi_1_dfm_3 = FRAME_a_4_lpi_1 & (signext_3_1(~ (SHIFT_acc_1_psp[2])));
            end
            regs_regs_0_sva = MUX_v_150_2_2({regs_operator_din_lpi_1_dfm , regs_regs_0_sva},
                unequal_tmp | exit_SHIFT_lpi_1_dfm);
            regs_regs_1_sva = MUX_v_150_2_2({regs_regs_1_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (~ (SHIFT_i_1_lpi_1_dfm_2[1])) & (SHIFT_i_1_lpi_1_dfm_2[0]) & unequal_tmp
                & (~ exit_SHIFT_lpi_1_dfm));
            regs_regs_2_sva = MUX_v_150_2_2({regs_regs_2_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (SHIFT_i_1_lpi_1_dfm_2[1]) & (~ (SHIFT_i_1_lpi_1_dfm_2[0])) & unequal_tmp
                & (~ exit_SHIFT_lpi_1_dfm));
            regs_regs_3_sva = MUX_v_150_2_2({regs_regs_3_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (SHIFT_i_1_lpi_1_dfm_2[1]) & (SHIFT_i_1_lpi_1_dfm_2[0]) & unequal_tmp
                & (~ exit_SHIFT_lpi_1_dfm));
            regs_regs_4_sva = MUX_v_150_2_2({regs_regs_4_sva , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva},
                (~((SHIFT_i_1_lpi_1_dfm_2[1]) | (SHIFT_i_1_lpi_1_dfm_2[0]))) & unequal_tmp
                & (~ exit_SHIFT_lpi_1_dfm));
            SHIFT_nand_cse = ~(exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm);
            red_lpi_1 = MUX_v_16_2_2({red_sva_1 , red_lpi_1_dfm}, SHIFT_nand_cse);
            green_lpi_1 = MUX_v_16_2_2({green_sva_1 , green_lpi_1_dfm}, SHIFT_nand_cse);
            blue_lpi_1 = MUX_v_16_2_2({blue_sva_1 , blue_lpi_1_dfm}, SHIFT_nand_cse);
            SHIFT_and_30_cse = (~ (FRAME_a_4_lpi_1[2])) & and_stg_8_sva & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm;
            redarray_0_lpi_1 = MUX_v_16_2_2({redarray_0_lpi_1_dfm , ACC_GX_for_acc_1_ctmp_sva},
                SHIFT_and_30_cse);
            SHIFT_and_31_cse = (~ (FRAME_a_4_lpi_1[2])) & (~ (FRAME_a_4_lpi_1[1]))
                & (FRAME_a_4_lpi_1[0]) & (~ exit_ACC_GX_1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            redarray_1_lpi_1 = MUX_v_16_2_2({redarray_1_lpi_1_dfm , ACC_GX_for_acc_1_ctmp_sva},
                SHIFT_and_31_cse);
            SHIFT_and_32_cse = (~ (FRAME_a_4_lpi_1[2])) & (FRAME_a_4_lpi_1[1]) &
                (~ (FRAME_a_4_lpi_1[0])) & (~ exit_ACC_GX_1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            redarray_2_lpi_1 = MUX_v_16_2_2({redarray_2_lpi_1_dfm , ACC_GX_for_acc_1_ctmp_sva},
                SHIFT_and_32_cse);
            SHIFT_and_33_cse = (~ (FRAME_a_4_lpi_1[2])) & (FRAME_a_4_lpi_1[1]) &
                (FRAME_a_4_lpi_1[0]) & (~ exit_ACC_GX_1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            redarray_3_lpi_1 = MUX_v_16_2_2({redarray_3_lpi_1_dfm , ACC_GX_for_acc_1_ctmp_sva},
                SHIFT_and_33_cse);
            SHIFT_and_34_cse = (FRAME_a_4_lpi_1[2]) & and_stg_8_sva & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm;
            redarray_4_lpi_1 = MUX_v_16_2_2({redarray_4_lpi_1_dfm , ACC_GX_for_acc_1_ctmp_sva},
                SHIFT_and_34_cse);
            greenarray_0_lpi_1 = MUX_v_16_2_2({greenarray_0_lpi_1_dfm , ACC_GX_for_acc_4_ctmp_sva},
                SHIFT_and_30_cse);
            greenarray_1_lpi_1 = MUX_v_16_2_2({greenarray_1_lpi_1_dfm , ACC_GX_for_acc_4_ctmp_sva},
                SHIFT_and_31_cse);
            greenarray_2_lpi_1 = MUX_v_16_2_2({greenarray_2_lpi_1_dfm , ACC_GX_for_acc_4_ctmp_sva},
                SHIFT_and_32_cse);
            greenarray_3_lpi_1 = MUX_v_16_2_2({greenarray_3_lpi_1_dfm , ACC_GX_for_acc_4_ctmp_sva},
                SHIFT_and_33_cse);
            greenarray_4_lpi_1 = MUX_v_16_2_2({greenarray_4_lpi_1_dfm , ACC_GX_for_acc_4_ctmp_sva},
                SHIFT_and_34_cse);
            bluearray_0_lpi_1 = MUX_v_16_2_2({bluearray_0_lpi_1_dfm , ACC_GX_for_acc_7_ctmp_sva},
                SHIFT_and_30_cse);
            bluearray_1_lpi_1 = MUX_v_16_2_2({bluearray_1_lpi_1_dfm , ACC_GX_for_acc_7_ctmp_sva},
                SHIFT_and_31_cse);
            bluearray_2_lpi_1 = MUX_v_16_2_2({bluearray_2_lpi_1_dfm , ACC_GX_for_acc_7_ctmp_sva},
                SHIFT_and_32_cse);
            bluearray_3_lpi_1 = MUX_v_16_2_2({bluearray_3_lpi_1_dfm , ACC_GX_for_acc_7_ctmp_sva},
                SHIFT_and_33_cse);
            bluearray_4_lpi_1 = MUX_v_16_2_2({bluearray_4_lpi_1_dfm , ACC_GX_for_acc_7_ctmp_sva},
                SHIFT_and_34_cse);
            SHIFT_and_27_cse = exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            FRAME_a_3_lpi_1 = MUX1HOT_v_3_3_2({FRAME_a_3_sva , FRAME_a_3_lpi_1_dfm
                , FRAME_a_3_lpi_1}, {SHIFT_and_27_cse , ((~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm) , (~ exit_SHIFT_lpi_1_dfm)});
            ACC_GX_and_19_tmp = exit_ACC_GX_for_sva & (~ exit_ACC_GX_1_lpi_1_dfm);
            FRAME_i_1_lpi_1 = MUX1HOT_v_3_3_2({FRAME_i_1_lpi_1_dfm_2 , FRAME_i_1_lpi_1
                , FRAME_i_1_sva}, {(~ exit_SHIFT_lpi_1_dfm) , ((~ ACC_GX_and_19_tmp)
                & exit_SHIFT_lpi_1_dfm) , (ACC_GX_and_19_tmp & exit_SHIFT_lpi_1_dfm)});
            SHIFT_i_1_lpi_3 = MUX_v_3_2_2({SHIFT_acc_1_psp , SHIFT_i_1_lpi_1_dfm_2},
                exit_SHIFT_lpi_1_dfm);
            FRAME_a_4_lpi_1 = MUX1HOT_v_3_4_2({FRAME_a_4_lpi_1_dfm_3 , FRAME_a_4_lpi_1
                , FRAME_a_4_lpi_1_dfm , FRAME_a_4_sva}, {(~ exit_SHIFT_lpi_1_dfm)
                , SHIFT_and_27_cse , (exit_ACC_GX_for_sva & (~ exit_ACC_GX_1_lpi_1_dfm)
                & exit_SHIFT_lpi_1_dfm) , ((~(exit_ACC_GX_for_sva | exit_ACC_GX_1_lpi_1_dfm))
                & exit_SHIFT_lpi_1_dfm)});
            exit_ACC3_sva = exit_ACC3_sva_2 & exit_ACC_GX_1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            ACC_GX_mux_40_nl = MUX_s_1_2_2({exit_ACC_GX_1_sva_1 , exit_ACC_GX_1_lpi_1_dfm},
                exit_ACC_GX_1_lpi_1_dfm);
            exit_ACC_GX_1_lpi_1 = MUX_s_1_2_2({exit_ACC_GX_1_lpi_1_dfm , (ACC_GX_mux_40_nl)},
                exit_SHIFT_lpi_1_dfm);
            exit_SHIFT_lpi_1 = MUX_s_1_2_2({(SHIFT_acc_1_psp[2]) , exit_SHIFT_lpi_1_dfm},
                exit_SHIFT_lpi_1_dfm);
          end
        end
      end
    end
    SHIFT_and_27_cse = 1'b0;
    SHIFT_and_34_cse = 1'b0;
    SHIFT_and_33_cse = 1'b0;
    SHIFT_and_32_cse = 1'b0;
    SHIFT_and_31_cse = 1'b0;
    SHIFT_and_30_cse = 1'b0;
    SHIFT_nand_cse = 1'b0;
    SHIFT_i_1_lpi_1_dfm_2 = 3'b0;
    SHIFT_i_1_lpi_3 = 3'b0;
    ACC_GX_and_19_tmp = 1'b0;
    AbsAndMax_1_and_seb = 1'b0;
    SHIFT_acc_1_psp = 3'b0;
    FRAME_a_4_lpi_1_dfm_3 = 3'b0;
    FRAME_i_1_lpi_1_dfm_2 = 3'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva = 150'b0;
    unequal_tmp = 1'b0;
    FRAME_a_3_lpi_1_dfm = 3'b0;
    exit_ACC_GX_1_sva_1 = 1'b0;
    FRAME_a_4_lpi_1_dfm = 3'b0;
    exit_ACC_GX_sva = 1'b0;
    FRAME_i_1_sva = 3'b0;
    exit_ACC_GX_for_sva = 1'b0;
    FRAME_a_4_sva = 3'b0;
    ACC_GX_for_acc_7_ctmp_sva = 16'b0;
    ACC_GX_for_acc_4_ctmp_sva = 16'b0;
    ACC_GX_for_slc_gx_rom_26_1_cse_sva = 1'b0;
    and_stg_8_sva = 1'b0;
    ACC_GX_for_acc_1_ctmp_sva = 16'b0;
    regs_operator_slc_regs_regs_cse_sva = 150'b0;
    ACC_GX_for_acc_14_psp_sva = 3'b0;
    ACC_GX_for_acc_13_psp_sva = 6'b0;
    AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1 = 16'b0;
    AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
    AbsAndMax_2_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = 16'b0;
    AbsAndMax_1_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_3_sva_1 = 10'b0;
    AbsAndMax_slc_svs = 1'b0;
    exit_ACC3_sva_2 = 1'b0;
    FRAME_a_3_sva = 3'b0;
    green_sva_1 = 16'b0;
    blue_sva_1 = 16'b0;
    red_sva_1 = 16'b0;
    exit_SHIFT_lpi_1_dfm = 1'b0;
    exit_ACC_GX_1_lpi_1_dfm = 1'b0;
    regs_operator_din_lpi_1_dfm = 150'b0;
    bluearray_4_lpi_1_dfm = 16'b0;
    bluearray_3_lpi_1_dfm = 16'b0;
    bluearray_2_lpi_1_dfm = 16'b0;
    bluearray_1_lpi_1_dfm = 16'b0;
    bluearray_0_lpi_1_dfm = 16'b0;
    greenarray_4_lpi_1_dfm = 16'b0;
    greenarray_3_lpi_1_dfm = 16'b0;
    greenarray_2_lpi_1_dfm = 16'b0;
    greenarray_1_lpi_1_dfm = 16'b0;
    greenarray_0_lpi_1_dfm = 16'b0;
    redarray_4_lpi_1_dfm = 16'b0;
    redarray_3_lpi_1_dfm = 16'b0;
    redarray_2_lpi_1_dfm = 16'b0;
    redarray_1_lpi_1_dfm = 16'b0;
    redarray_0_lpi_1_dfm = 16'b0;
    blue_lpi_1_dfm = 16'b0;
    green_lpi_1_dfm = 16'b0;
    red_lpi_1_dfm = 16'b0;
    regs_operator_din_sva = 150'b0;
    exit_ACC3_sva = 1'b0;
    regs_regs_4_sva = 150'b0;
    regs_regs_0_sva = 150'b0;
    regs_regs_3_sva = 150'b0;
    regs_regs_1_sva = 150'b0;
    regs_regs_2_sva = 150'b0;
    FRAME_i_1_lpi_1 = 3'b0;
    FRAME_a_4_lpi_1 = 3'b0;
    FRAME_a_3_lpi_1 = 3'b0;
    exit_SHIFT_lpi_1 = 1'b0;
    exit_ACC_GX_1_lpi_1 = 1'b0;
    redarray_4_lpi_1 = 16'b0;
    redarray_0_lpi_1 = 16'b0;
    redarray_3_lpi_1 = 16'b0;
    redarray_1_lpi_1 = 16'b0;
    redarray_2_lpi_1 = 16'b0;
    greenarray_4_lpi_1 = 16'b0;
    greenarray_0_lpi_1 = 16'b0;
    greenarray_3_lpi_1 = 16'b0;
    greenarray_1_lpi_1 = 16'b0;
    greenarray_2_lpi_1 = 16'b0;
    bluearray_4_lpi_1 = 16'b0;
    bluearray_0_lpi_1 = 16'b0;
    bluearray_3_lpi_1 = 16'b0;
    bluearray_1_lpi_1 = 16'b0;
    bluearray_2_lpi_1 = 16'b0;
    blue_lpi_1 = 16'b0;
    green_lpi_1 = 16'b0;
    red_lpi_1 = 16'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [15:0] signext_16_1;
    input [0:0] vector;
  begin
    signext_16_1= {{15{vector[0]}}, vector};
  end
  endfunction


  function [149:0] MUX_v_150_2_2;
    input [299:0] inputs;
    input [0:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[299:150];
      end
      1'b1 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[299:150];
      end
    endcase
    MUX_v_150_2_2 = result;
  end
  endfunction


  function [2:0] MUX_v_3_2_2;
    input [5:0] inputs;
    input [0:0] sel;
    reg [2:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[5:3];
      end
      1'b1 : begin
        result = inputs[2:0];
      end
      default : begin
        result = inputs[5:3];
      end
    endcase
    MUX_v_3_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_8_2;
    input [127:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[127:112];
      end
      3'b001 : begin
        result = inputs[111:96];
      end
      3'b010 : begin
        result = inputs[95:80];
      end
      3'b011 : begin
        result = inputs[79:64];
      end
      3'b100 : begin
        result = inputs[63:48];
      end
      3'b101 : begin
        result = inputs[47:32];
      end
      3'b110 : begin
        result = inputs[31:16];
      end
      3'b111 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[127:112];
      end
    endcase
    MUX_v_16_8_2 = result;
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX1HOT_v_16_3_2;
    input [47:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [9:0] signext_10_6;
    input [5:0] vector;
  begin
    signext_10_6= {{4{vector[5]}}, vector};
  end
  endfunction


  function [4:0] signext_5_1;
    input [0:0] vector;
  begin
    signext_5_1= {{4{vector[0]}}, vector};
  end
  endfunction


  function [149:0] MUX_v_150_8_2;
    input [1199:0] inputs;
    input [2:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      3'b000 : begin
        result = inputs[1199:1050];
      end
      3'b001 : begin
        result = inputs[1049:900];
      end
      3'b010 : begin
        result = inputs[899:750];
      end
      3'b011 : begin
        result = inputs[749:600];
      end
      3'b100 : begin
        result = inputs[599:450];
      end
      3'b101 : begin
        result = inputs[449:300];
      end
      3'b110 : begin
        result = inputs[299:150];
      end
      3'b111 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[1199:1050];
      end
    endcase
    MUX_v_150_8_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_32_2;
    input [31:0] inputs;
    input [4:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      5'b00000 : begin
        result = inputs[31:31];
      end
      5'b00001 : begin
        result = inputs[30:30];
      end
      5'b00010 : begin
        result = inputs[29:29];
      end
      5'b00011 : begin
        result = inputs[28:28];
      end
      5'b00100 : begin
        result = inputs[27:27];
      end
      5'b00101 : begin
        result = inputs[26:26];
      end
      5'b00110 : begin
        result = inputs[25:25];
      end
      5'b00111 : begin
        result = inputs[24:24];
      end
      5'b01000 : begin
        result = inputs[23:23];
      end
      5'b01001 : begin
        result = inputs[22:22];
      end
      5'b01010 : begin
        result = inputs[21:21];
      end
      5'b01011 : begin
        result = inputs[20:20];
      end
      5'b01100 : begin
        result = inputs[19:19];
      end
      5'b01101 : begin
        result = inputs[18:18];
      end
      5'b01110 : begin
        result = inputs[17:17];
      end
      5'b01111 : begin
        result = inputs[16:16];
      end
      5'b10000 : begin
        result = inputs[15:15];
      end
      5'b10001 : begin
        result = inputs[14:14];
      end
      5'b10010 : begin
        result = inputs[13:13];
      end
      5'b10011 : begin
        result = inputs[12:12];
      end
      5'b10100 : begin
        result = inputs[11:11];
      end
      5'b10101 : begin
        result = inputs[10:10];
      end
      5'b10110 : begin
        result = inputs[9:9];
      end
      5'b10111 : begin
        result = inputs[8:8];
      end
      5'b11000 : begin
        result = inputs[7:7];
      end
      5'b11001 : begin
        result = inputs[6:6];
      end
      5'b11010 : begin
        result = inputs[5:5];
      end
      5'b11011 : begin
        result = inputs[4:4];
      end
      5'b11100 : begin
        result = inputs[3:3];
      end
      5'b11101 : begin
        result = inputs[2:2];
      end
      5'b11110 : begin
        result = inputs[1:1];
      end
      5'b11111 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[31:31];
      end
    endcase
    MUX_s_1_32_2 = result;
  end
  endfunction


  function [9:0] fsar_10_150_8;
    input [149:0] data;
    input [7:0] shft;
    reg [149:0] rvalue;
  begin
    rvalue = {149{data[149]}} ^ data[148:0];
    fsar_10_150_8 = {10{data[149]}} ^ ( rvalue >> shft );
  end
  endfunction


  function [9:0] signext_10_1;
    input [0:0] vector;
  begin
    signext_10_1= {{9{vector[0]}}, vector};
  end
  endfunction


  function [9:0] MUX_v_10_64_2;
    input [639:0] inputs;
    input [5:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      6'b000000 : begin
        result = inputs[639:630];
      end
      6'b000001 : begin
        result = inputs[629:620];
      end
      6'b000010 : begin
        result = inputs[619:610];
      end
      6'b000011 : begin
        result = inputs[609:600];
      end
      6'b000100 : begin
        result = inputs[599:590];
      end
      6'b000101 : begin
        result = inputs[589:580];
      end
      6'b000110 : begin
        result = inputs[579:570];
      end
      6'b000111 : begin
        result = inputs[569:560];
      end
      6'b001000 : begin
        result = inputs[559:550];
      end
      6'b001001 : begin
        result = inputs[549:540];
      end
      6'b001010 : begin
        result = inputs[539:530];
      end
      6'b001011 : begin
        result = inputs[529:520];
      end
      6'b001100 : begin
        result = inputs[519:510];
      end
      6'b001101 : begin
        result = inputs[509:500];
      end
      6'b001110 : begin
        result = inputs[499:490];
      end
      6'b001111 : begin
        result = inputs[489:480];
      end
      6'b010000 : begin
        result = inputs[479:470];
      end
      6'b010001 : begin
        result = inputs[469:460];
      end
      6'b010010 : begin
        result = inputs[459:450];
      end
      6'b010011 : begin
        result = inputs[449:440];
      end
      6'b010100 : begin
        result = inputs[439:430];
      end
      6'b010101 : begin
        result = inputs[429:420];
      end
      6'b010110 : begin
        result = inputs[419:410];
      end
      6'b010111 : begin
        result = inputs[409:400];
      end
      6'b011000 : begin
        result = inputs[399:390];
      end
      6'b011001 : begin
        result = inputs[389:380];
      end
      6'b011010 : begin
        result = inputs[379:370];
      end
      6'b011011 : begin
        result = inputs[369:360];
      end
      6'b011100 : begin
        result = inputs[359:350];
      end
      6'b011101 : begin
        result = inputs[349:340];
      end
      6'b011110 : begin
        result = inputs[339:330];
      end
      6'b011111 : begin
        result = inputs[329:320];
      end
      6'b100000 : begin
        result = inputs[319:310];
      end
      6'b100001 : begin
        result = inputs[309:300];
      end
      6'b100010 : begin
        result = inputs[299:290];
      end
      6'b100011 : begin
        result = inputs[289:280];
      end
      6'b100100 : begin
        result = inputs[279:270];
      end
      6'b100101 : begin
        result = inputs[269:260];
      end
      6'b100110 : begin
        result = inputs[259:250];
      end
      6'b100111 : begin
        result = inputs[249:240];
      end
      6'b101000 : begin
        result = inputs[239:230];
      end
      6'b101001 : begin
        result = inputs[229:220];
      end
      6'b101010 : begin
        result = inputs[219:210];
      end
      6'b101011 : begin
        result = inputs[209:200];
      end
      6'b101100 : begin
        result = inputs[199:190];
      end
      6'b101101 : begin
        result = inputs[189:180];
      end
      6'b101110 : begin
        result = inputs[179:170];
      end
      6'b101111 : begin
        result = inputs[169:160];
      end
      6'b110000 : begin
        result = inputs[159:150];
      end
      6'b110001 : begin
        result = inputs[149:140];
      end
      6'b110010 : begin
        result = inputs[139:130];
      end
      6'b110011 : begin
        result = inputs[129:120];
      end
      6'b110100 : begin
        result = inputs[119:110];
      end
      6'b110101 : begin
        result = inputs[109:100];
      end
      6'b110110 : begin
        result = inputs[99:90];
      end
      6'b110111 : begin
        result = inputs[89:80];
      end
      6'b111000 : begin
        result = inputs[79:70];
      end
      6'b111001 : begin
        result = inputs[69:60];
      end
      6'b111010 : begin
        result = inputs[59:50];
      end
      6'b111011 : begin
        result = inputs[49:40];
      end
      6'b111100 : begin
        result = inputs[39:30];
      end
      6'b111101 : begin
        result = inputs[29:20];
      end
      6'b111110 : begin
        result = inputs[19:10];
      end
      6'b111111 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[639:630];
      end
    endcase
    MUX_v_10_64_2 = result;
  end
  endfunction


  function [2:0] signext_3_1;
    input [0:0] vector;
  begin
    signext_3_1= {{2{vector[0]}}, vector};
  end
  endfunction


  function [149:0] MUX_v_150_4_2;
    input [599:0] inputs;
    input [1:0] sel;
    reg [149:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[599:450];
      end
      2'b01 : begin
        result = inputs[449:300];
      end
      2'b10 : begin
        result = inputs[299:150];
      end
      2'b11 : begin
        result = inputs[149:0];
      end
      default : begin
        result = inputs[599:450];
      end
    endcase
    MUX_v_150_4_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_3_2;
    input [8:0] inputs;
    input [2:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_4_2;
    input [11:0] inputs;
    input [3:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_4_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function  [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function  [5:0] conv_s2u_4_6 ;
    input signed [3:0]  vector ;
  begin
    conv_s2u_4_6 = {{2{vector[3]}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [15:0] conv_s2s_10_16 ;
    input signed [9:0]  vector ;
  begin
    conv_s2s_10_16 = {{6{vector[9]}}, vector};
  end
  endfunction


  function  [5:0] conv_u2u_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_6 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    sharpen
//  Generated from file(s):
//    2) $PROJECT_HOME/sharpen1.c
// ------------------------------------------------------------------


module sharpen (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [149:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [149:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(150)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  sharpen_core sharpen_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



