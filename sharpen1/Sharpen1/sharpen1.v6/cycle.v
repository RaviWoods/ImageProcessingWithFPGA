// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   rbw14@EEWS104A-013
//  Generated date: Wed May 06 11:33:54 2015
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    sharpen1_core
// ------------------------------------------------------------------


module sharpen1_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [89:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [15:0] red_lpi_1;
    reg [15:0] green_lpi_1;
    reg [15:0] blue_lpi_1;
    reg [15:0] b_1_lpi_1;
    reg [15:0] b_0_lpi_1;
    reg [15:0] b_2_lpi_1;
    reg [15:0] g_1_lpi_1;
    reg [15:0] g_0_lpi_1;
    reg [15:0] g_2_lpi_1;
    reg [15:0] r_1_lpi_1;
    reg [15:0] r_0_lpi_1;
    reg [15:0] r_2_lpi_1;
    reg exit_ACC1_lpi_1;
    reg exit_SHIFT_lpi_1;
    reg [1:0] i_3_lpi_1;
    reg [1:0] i_4_lpi_1;
    reg [89:0] regs_regs_0_sva;
    reg exit_ACC2_sva;
    reg [89:0] regs_operator_din_sva;
    reg [15:0] red_lpi_1_dfm;
    reg [15:0] green_lpi_1_dfm;
    reg [15:0] blue_lpi_1_dfm;
    reg [15:0] r_0_lpi_1_dfm;
    reg [15:0] r_1_lpi_1_dfm;
    reg [15:0] r_2_lpi_1_dfm;
    reg [15:0] g_0_lpi_1_dfm;
    reg [15:0] g_1_lpi_1_dfm;
    reg [15:0] g_2_lpi_1_dfm;
    reg [15:0] b_0_lpi_1_dfm;
    reg [15:0] b_1_lpi_1_dfm;
    reg [15:0] b_2_lpi_1_dfm;
    reg [89:0] regs_operator_din_lpi_1_dfm;
    reg exit_ACC1_lpi_1_dfm;
    reg exit_SHIFT_lpi_1_dfm;
    reg [15:0] red_sva_1;
    reg [15:0] green_sva_1;
    reg [15:0] blue_sva_1;
    reg [1:0] i_3_sva;
    reg exit_ACC2_sva_2;
    reg AbsAndMax_slc_svs;
    reg [9:0] AbsAndMax_AbsAndMax_return_3_sva_1;
    reg AbsAndMax_1_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_1_lpi_1_dfm;
    reg AbsAndMax_2_slc_svs;
    reg [15:0] AbsAndMax_AbsAndMax_return_2_sva_1;
    reg [15:0] AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1;
    reg [15:0] r_1_sva_1;
    reg [15:0] g_1_sva_1;
    reg [15:0] b_1_sva_1;
    reg equal_tmp;
    reg [15:0] r_0_sva_1;
    reg [15:0] g_0_sva_1;
    reg [15:0] b_0_sva_1;
    reg [15:0] r_1_sva_2;
    reg [15:0] g_1_sva_2;
    reg [15:0] b_1_sva_2;
    reg [15:0] r_2_sva_1;
    reg [15:0] g_2_sva_1;
    reg [15:0] b_2_sva_1;
    reg equal_tmp_1;
    reg [15:0] r_2_sva_2;
    reg [15:0] g_2_sva_2;
    reg [15:0] b_2_sva_2;
    reg nor_tmp;
    reg nor_dfs;
    reg [1:0] i_4_sva;
    reg exit_ACC1_sva_1;
    reg [1:0] i_3_lpi_1_dfm;
    reg unequal_tmp;
    reg [1:0] i_4_lpi_1_dfm_1;
    reg [1:0] SHIFT_acc_1_psp;
    reg AbsAndMax_1_and_seb;
    reg [1:0] SHIFT_i_1_lpi_3;
    reg [59:0] regs_regs_1_sva_sg1;
    reg [29:0] regs_regs_2_sva_sg1;
    reg [1:0] SHIFT_i_1_lpi_1_dfm_2;
    reg [59:0] SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1;
    reg SHIFT_nand_cse;
    reg SHIFT_and_22_cse;
    reg SHIFT_nand_6_cse;
    reg ACC1_and_7_cse;
    reg SHIFT_nand_7_cse;
    reg ACC1_and_10_cse;
    reg SHIFT_and_20_cse;
    reg SHIFT_and_19_cse;

    reg[15:0] ACC2_mux_nl;
    reg[15:0] ACC2_mux_3_nl;
    reg[15:0] ACC2_mux_4_nl;
    reg[9:0] AbsAndMax_else_mux_nl;
    reg[0:0] ACC1_mux_18_nl;
    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        i_4_lpi_1 = 2'b0;
        i_3_lpi_1 = 2'b0;
        exit_SHIFT_lpi_1 = 1'b0;
        exit_ACC1_lpi_1 = 1'b0;
        SHIFT_i_1_lpi_3 = 2'b0;
        r_2_lpi_1 = 16'b0;
        r_0_lpi_1 = 16'b0;
        r_1_lpi_1 = 16'b0;
        g_2_lpi_1 = 16'b0;
        g_0_lpi_1 = 16'b0;
        g_1_lpi_1 = 16'b0;
        b_2_lpi_1 = 16'b0;
        b_0_lpi_1 = 16'b0;
        b_1_lpi_1 = 16'b0;
        blue_lpi_1 = 16'b0;
        green_lpi_1 = 16'b0;
        red_lpi_1 = 16'b0;
        regs_regs_1_sva_sg1 = 60'b0;
        regs_regs_0_sva = 90'b0;
        regs_regs_2_sva_sg1 = 30'b0;
        exit_ACC2_sva = 1'b1;
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            begin : waitLoop0Exit
              forever begin : waitLoop0
                @(posedge clk or negedge ( arst_n ));
                if ( ~ arst_n )
                  disable core_rlpExit;
                if ( en )
                  disable waitLoop0Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            unequal_tmp = 1'b0;
            SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = 60'b0;
            SHIFT_acc_1_psp = 2'b0;
            nor_tmp = 1'b0;
            equal_tmp_1 = 1'b0;
            equal_tmp = 1'b0;
            i_4_lpi_1_dfm_1 = 2'b0;
            i_3_lpi_1_dfm = 2'b0;
            exit_ACC1_sva_1 = 1'b0;
            i_4_sva = 2'b0;
            nor_dfs = 1'b0;
            b_2_sva_2 = 16'b0;
            g_2_sva_2 = 16'b0;
            r_2_sva_2 = 16'b0;
            b_2_sva_1 = 16'b0;
            g_2_sva_1 = 16'b0;
            r_2_sva_1 = 16'b0;
            b_1_sva_2 = 16'b0;
            g_1_sva_2 = 16'b0;
            r_1_sva_2 = 16'b0;
            b_0_sva_1 = 16'b0;
            g_0_sva_1 = 16'b0;
            r_0_sva_1 = 16'b0;
            b_1_sva_1 = 16'b0;
            g_1_sva_1 = 16'b0;
            r_1_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
            AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = 16'b0;
            AbsAndMax_AbsAndMax_return_3_sva_1 = 10'b0;
            exit_ACC2_sva_2 = 1'b0;
            i_3_sva = 2'b0;
            blue_sva_1 = 16'b0;
            green_sva_1 = 16'b0;
            red_sva_1 = 16'b0;
            regs_operator_din_sva = 90'b0;
            if ( exit_ACC2_sva ) begin
              regs_operator_din_sva = vin_rsc_mgc_in_wire_d;
            end
            red_lpi_1_dfm = red_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            green_lpi_1_dfm = green_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            blue_lpi_1_dfm = blue_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            r_0_lpi_1_dfm = r_0_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            r_1_lpi_1_dfm = r_1_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            r_2_lpi_1_dfm = r_2_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            g_0_lpi_1_dfm = g_0_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            g_1_lpi_1_dfm = g_1_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            g_2_lpi_1_dfm = g_2_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            b_0_lpi_1_dfm = b_0_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            b_1_lpi_1_dfm = b_1_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            b_2_lpi_1_dfm = b_2_lpi_1 & (signext_16_1(~ exit_ACC2_sva));
            regs_operator_din_lpi_1_dfm = MUX_v_90_2_2({regs_operator_din_lpi_1_dfm
                , regs_operator_din_sva}, exit_ACC2_sva);
            SHIFT_i_1_lpi_1_dfm_2 = MUX_v_2_2_2({SHIFT_i_1_lpi_3 , 2'b10}, exit_ACC2_sva);
            exit_ACC1_lpi_1_dfm = exit_ACC1_lpi_1 & (~ exit_ACC2_sva);
            exit_SHIFT_lpi_1_dfm = exit_SHIFT_lpi_1 & (~ exit_ACC2_sva);
            if ( exit_SHIFT_lpi_1_dfm ) begin
              if ( exit_ACC1_lpi_1_dfm ) begin
                ACC2_mux_nl = MUX_v_16_4_2({r_0_lpi_1_dfm , r_1_lpi_1_dfm , r_2_lpi_1_dfm
                    , 16'b0}, i_3_lpi_1);
                red_sva_1 = red_lpi_1_dfm + (ACC2_mux_nl);
                ACC2_mux_3_nl = MUX_v_16_4_2({g_0_lpi_1_dfm , g_1_lpi_1_dfm , g_2_lpi_1_dfm
                    , 16'b0}, i_3_lpi_1);
                green_sva_1 = green_lpi_1_dfm + (ACC2_mux_3_nl);
                ACC2_mux_4_nl = MUX_v_16_4_2({b_0_lpi_1_dfm , b_1_lpi_1_dfm , b_2_lpi_1_dfm
                    , 16'b0}, i_3_lpi_1);
                blue_sva_1 = blue_lpi_1_dfm + (ACC2_mux_4_nl);
                i_3_sva = i_3_lpi_1 + 2'b1;
                exit_ACC2_sva_2 = ~ (readslicef_3_1_2((({1'b1 , i_3_sva}) + 3'b1)));
                if ( exit_ACC2_sva_2 ) begin
                  AbsAndMax_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (red_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_slc_svs ) begin
                  end
                  else if ( red_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_3_sva_1 = (~ (red_sva_1[9:0])) + 10'b1;
                  end
                  AbsAndMax_1_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (blue_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_1_slc_svs ) begin
                  end
                  else if ( blue_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = conv_u2u_15_16(~ (blue_sva_1[14:0]))
                        + 16'b1;
                  end
                  else begin
                    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = {6'b0, blue_sva_1[9:0]};
                  end
                  AbsAndMax_2_slc_svs = readslicef_7_1_6((conv_s2u_6_7(~ (green_sva_1[15:10]))
                      + 7'b1));
                  if ( AbsAndMax_2_slc_svs ) begin
                  end
                  else if ( green_sva_1[15] ) begin
                    AbsAndMax_AbsAndMax_return_2_sva_1 = conv_u2u_15_16(~ (green_sva_1[14:0]))
                        + 16'b1;
                  end
                  AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1 = MUX1HOT_v_16_3_2({({6'b0,
                      green_sva_1[9:0]}) , AbsAndMax_AbsAndMax_return_2_sva_1 , 16'b1111111111},
                      {(~((green_sva_1[15]) | AbsAndMax_2_slc_svs)) , ((green_sva_1[15])
                      & (~ AbsAndMax_2_slc_svs)) , AbsAndMax_2_slc_svs});
                  AbsAndMax_1_and_seb = (AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[15])
                      & (~ AbsAndMax_1_slc_svs);
                  AbsAndMax_else_mux_nl = MUX_v_10_2_2({(red_sva_1[9:0]) , AbsAndMax_AbsAndMax_return_3_sva_1},
                      red_sva_1[15]);
                  vout_rsc_mgc_out_stdreg_d <= {((AbsAndMax_else_mux_nl) | ({{9{AbsAndMax_slc_svs}},
                      AbsAndMax_slc_svs}) | (signext_10_6(AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1[15:10]))
                      | ({{9{AbsAndMax_1_and_seb}}, AbsAndMax_1_and_seb})) , ((AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1[9:0])
                      | ({({{4{AbsAndMax_1_and_seb}}, AbsAndMax_1_and_seb}) , ((AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[14:10])
                      & (signext_5_1(~ AbsAndMax_1_slc_svs)))})) , ((AbsAndMax_AbsAndMax_return_1_lpi_1_dfm[9:0])
                      | ({{9{AbsAndMax_1_slc_svs}}, AbsAndMax_1_slc_svs}))};
                end
              end
              else begin
                equal_tmp = (i_4_lpi_1[0]) & (~ (i_4_lpi_1[1]));
                equal_tmp_1 = (i_4_lpi_1[1]) & (~ (i_4_lpi_1[0]));
                nor_tmp = ~((~((i_4_lpi_1[1]) | (i_4_lpi_1[0]))) | equal_tmp | equal_tmp_1);
                case (i_4_lpi_1)
                  2'b0 : begin
                    r_1_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_0_sva[29:20]))
                        , 1'b1}) + ({r_1_lpi_1_dfm , 1'b1})));
                    g_1_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_0_sva[19:10]))
                        , 1'b1}) + ({g_1_lpi_1_dfm , 1'b1})));
                    b_1_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_0_sva[9:0]))
                        , 1'b1}) + ({b_1_lpi_1_dfm , 1'b1})));
                  end
                  2'b1 : begin
                    r_0_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[29:20]))
                        , 1'b1}) + ({r_0_lpi_1_dfm , 1'b1})));
                    g_0_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[19:10]))
                        , 1'b1}) + ({g_0_lpi_1_dfm , 1'b1})));
                    b_0_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[9:0]))
                        , 1'b1}) + ({b_0_lpi_1_dfm , 1'b1})));
                    r_1_sva_2 = conv_u2s_13_16({(conv_u2u_10_11(regs_regs_1_sva_sg1[29:20])
                        + conv_u2u_8_11(regs_regs_1_sva_sg1[29:22])) , (regs_regs_1_sva_sg1[21:20])})
                        + r_1_lpi_1_dfm;
                    g_1_sva_2 = conv_u2s_13_16({(conv_u2u_10_11(regs_regs_1_sva_sg1[19:10])
                        + conv_u2u_8_11(regs_regs_1_sva_sg1[19:12])) , (regs_regs_1_sva_sg1[11:10])})
                        + g_1_lpi_1_dfm;
                    b_1_sva_2 = conv_u2s_13_16({(conv_u2u_10_11(regs_regs_1_sva_sg1[9:0])
                        + conv_u2u_8_11(regs_regs_1_sva_sg1[9:2])) , (regs_regs_1_sva_sg1[1:0])})
                        + b_1_lpi_1_dfm;
                    r_2_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[29:20]))
                        , 1'b1}) + ({r_2_lpi_1_dfm , 1'b1})));
                    g_2_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[19:10]))
                        , 1'b1}) + ({g_2_lpi_1_dfm , 1'b1})));
                    b_2_sva_1 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_1_sva_sg1[9:0]))
                        , 1'b1}) + ({b_2_lpi_1_dfm , 1'b1})));
                  end
                  2'b10 : begin
                    r_2_sva_2 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_2_sva_sg1[29:20]))
                        , 1'b1}) + ({r_2_lpi_1_dfm , 1'b1})));
                    g_2_sva_2 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_2_sva_sg1[19:10]))
                        , 1'b1}) + ({g_2_lpi_1_dfm , 1'b1})));
                    b_2_sva_2 = readslicef_17_16_1((conv_s2s_12_17({1'b1 , (~ (regs_regs_2_sva_sg1[9:0]))
                        , 1'b1}) + ({b_2_lpi_1_dfm , 1'b1})));
                  end
                  default : begin
                    // NOP
                  end
                endcase
                nor_dfs = ~(equal_tmp | equal_tmp_1 | nor_tmp);
                i_4_sva = i_4_lpi_1 + 2'b1;
                exit_ACC1_sva_1 = ~ (readslicef_3_1_2((({1'b1 , i_4_sva}) + 3'b1)));
                i_3_lpi_1_dfm = i_3_lpi_1 & (signext_2_1(~ exit_ACC1_sva_1));
              end
            end
            else begin
              unequal_tmp = (SHIFT_i_1_lpi_1_dfm_2[1]) | (SHIFT_i_1_lpi_1_dfm_2[0]);
              case (SHIFT_i_1_lpi_1_dfm_2)
                2'b0 : begin
                  // NOP
                end
                default : begin
                  SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = MUX_v_60_2_2({regs_regs_1_sva_sg1
                      , (regs_regs_0_sva[89:30])}, SHIFT_i_1_lpi_1_dfm_2[0]);
                end
              endcase
              SHIFT_acc_1_psp = SHIFT_i_1_lpi_1_dfm_2 + 2'b11;
              i_4_lpi_1_dfm_1 = i_4_lpi_1 & (signext_2_1(~ (SHIFT_acc_1_psp[1])));
            end
            regs_regs_0_sva = MUX_v_90_2_2({regs_operator_din_lpi_1_dfm , regs_regs_0_sva},
                unequal_tmp | exit_SHIFT_lpi_1_dfm);
            regs_regs_1_sva_sg1 = MUX_v_60_2_2({regs_regs_1_sva_sg1 , SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1},
                (SHIFT_i_1_lpi_1_dfm_2[0]) & unequal_tmp & (~ exit_SHIFT_lpi_1_dfm));
            regs_regs_2_sva_sg1 = MUX_v_30_2_2({regs_regs_2_sva_sg1 , (SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1[59:30])},
                (~ (SHIFT_i_1_lpi_1_dfm_2[0])) & unequal_tmp & (~ exit_SHIFT_lpi_1_dfm));
            SHIFT_nand_cse = ~(exit_ACC1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm);
            red_lpi_1 = MUX_v_16_2_2({red_sva_1 , red_lpi_1_dfm}, SHIFT_nand_cse);
            green_lpi_1 = MUX_v_16_2_2({green_sva_1 , green_lpi_1_dfm}, SHIFT_nand_cse);
            blue_lpi_1 = MUX_v_16_2_2({blue_sva_1 , blue_lpi_1_dfm}, SHIFT_nand_cse);
            SHIFT_and_22_cse = equal_tmp & (~ exit_ACC1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            r_0_lpi_1 = MUX_v_16_2_2({r_0_lpi_1_dfm , r_0_sva_1}, SHIFT_and_22_cse);
            SHIFT_nand_6_cse = ~(exit_SHIFT_lpi_1_dfm & (~(exit_ACC1_lpi_1_dfm |
                equal_tmp_1 | nor_tmp)));
            ACC1_and_7_cse = nor_dfs & (~ exit_ACC1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            r_1_lpi_1 = MUX1HOT_v_16_3_2({r_1_lpi_1_dfm , r_1_sva_1 , r_1_sva_2},
                {SHIFT_nand_6_cse , ACC1_and_7_cse , SHIFT_and_22_cse});
            SHIFT_nand_7_cse = ~(exit_SHIFT_lpi_1_dfm & (~(exit_ACC1_lpi_1_dfm |
                nor_dfs | nor_tmp)));
            ACC1_and_10_cse = equal_tmp_1 & (~ exit_ACC1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            r_2_lpi_1 = MUX1HOT_v_16_3_2({r_2_lpi_1_dfm , r_2_sva_1 , r_2_sva_2},
                {SHIFT_nand_7_cse , SHIFT_and_22_cse , ACC1_and_10_cse});
            g_0_lpi_1 = MUX_v_16_2_2({g_0_lpi_1_dfm , g_0_sva_1}, SHIFT_and_22_cse);
            g_1_lpi_1 = MUX1HOT_v_16_3_2({g_1_lpi_1_dfm , g_1_sva_1 , g_1_sva_2},
                {SHIFT_nand_6_cse , ACC1_and_7_cse , SHIFT_and_22_cse});
            g_2_lpi_1 = MUX1HOT_v_16_3_2({g_2_lpi_1_dfm , g_2_sva_1 , g_2_sva_2},
                {SHIFT_nand_7_cse , SHIFT_and_22_cse , ACC1_and_10_cse});
            b_0_lpi_1 = MUX_v_16_2_2({b_0_lpi_1_dfm , b_0_sva_1}, SHIFT_and_22_cse);
            b_1_lpi_1 = MUX1HOT_v_16_3_2({b_1_lpi_1_dfm , b_1_sva_1 , b_1_sva_2},
                {SHIFT_nand_6_cse , ACC1_and_7_cse , SHIFT_and_22_cse});
            b_2_lpi_1 = MUX1HOT_v_16_3_2({b_2_lpi_1_dfm , b_2_sva_1 , b_2_sva_2},
                {SHIFT_nand_7_cse , SHIFT_and_22_cse , ACC1_and_10_cse});
            SHIFT_and_20_cse = (~ exit_ACC1_lpi_1_dfm) & exit_SHIFT_lpi_1_dfm;
            SHIFT_and_19_cse = exit_ACC1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            i_3_lpi_1 = MUX1HOT_v_2_3_2({i_3_sva , i_3_lpi_1_dfm , i_3_lpi_1}, {SHIFT_and_19_cse
                , SHIFT_and_20_cse , (~ exit_SHIFT_lpi_1_dfm)});
            SHIFT_i_1_lpi_3 = MUX_v_2_2_2({SHIFT_acc_1_psp , SHIFT_i_1_lpi_1_dfm_2},
                exit_SHIFT_lpi_1_dfm);
            i_4_lpi_1 = MUX1HOT_v_2_3_2({i_4_lpi_1_dfm_1 , i_4_sva , i_4_lpi_1},
                {(~ exit_SHIFT_lpi_1_dfm) , SHIFT_and_20_cse , SHIFT_and_19_cse});
            exit_ACC2_sva = exit_ACC2_sva_2 & exit_ACC1_lpi_1_dfm & exit_SHIFT_lpi_1_dfm;
            ACC1_mux_18_nl = MUX_s_1_2_2({exit_ACC1_sva_1 , exit_ACC1_lpi_1_dfm},
                exit_ACC1_lpi_1_dfm);
            exit_ACC1_lpi_1 = MUX_s_1_2_2({exit_ACC1_lpi_1_dfm , (ACC1_mux_18_nl)},
                exit_SHIFT_lpi_1_dfm);
            exit_SHIFT_lpi_1 = MUX_s_1_2_2({(SHIFT_acc_1_psp[1]) , exit_SHIFT_lpi_1_dfm},
                exit_SHIFT_lpi_1_dfm);
          end
        end
      end
    end
    SHIFT_and_19_cse = 1'b0;
    SHIFT_and_20_cse = 1'b0;
    ACC1_and_10_cse = 1'b0;
    SHIFT_nand_7_cse = 1'b0;
    ACC1_and_7_cse = 1'b0;
    SHIFT_nand_6_cse = 1'b0;
    SHIFT_and_22_cse = 1'b0;
    SHIFT_nand_cse = 1'b0;
    SHIFT_if_else_else_else_slc_regs_regs_ctmp_sva_sg1 = 60'b0;
    SHIFT_i_1_lpi_1_dfm_2 = 2'b0;
    regs_regs_2_sva_sg1 = 30'b0;
    regs_regs_1_sva_sg1 = 60'b0;
    SHIFT_i_1_lpi_3 = 2'b0;
    AbsAndMax_1_and_seb = 1'b0;
    SHIFT_acc_1_psp = 2'b0;
    i_4_lpi_1_dfm_1 = 2'b0;
    unequal_tmp = 1'b0;
    i_3_lpi_1_dfm = 2'b0;
    exit_ACC1_sva_1 = 1'b0;
    i_4_sva = 2'b0;
    nor_dfs = 1'b0;
    nor_tmp = 1'b0;
    b_2_sva_2 = 16'b0;
    g_2_sva_2 = 16'b0;
    r_2_sva_2 = 16'b0;
    equal_tmp_1 = 1'b0;
    b_2_sva_1 = 16'b0;
    g_2_sva_1 = 16'b0;
    r_2_sva_1 = 16'b0;
    b_1_sva_2 = 16'b0;
    g_1_sva_2 = 16'b0;
    r_1_sva_2 = 16'b0;
    b_0_sva_1 = 16'b0;
    g_0_sva_1 = 16'b0;
    r_0_sva_1 = 16'b0;
    equal_tmp = 1'b0;
    b_1_sva_1 = 16'b0;
    g_1_sva_1 = 16'b0;
    r_1_sva_1 = 16'b0;
    AbsAndMax_AbsAndMax_return_2_lpi_1_dfm_1 = 16'b0;
    AbsAndMax_AbsAndMax_return_2_sva_1 = 16'b0;
    AbsAndMax_2_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_1_lpi_1_dfm = 16'b0;
    AbsAndMax_1_slc_svs = 1'b0;
    AbsAndMax_AbsAndMax_return_3_sva_1 = 10'b0;
    AbsAndMax_slc_svs = 1'b0;
    exit_ACC2_sva_2 = 1'b0;
    i_3_sva = 2'b0;
    blue_sva_1 = 16'b0;
    green_sva_1 = 16'b0;
    red_sva_1 = 16'b0;
    exit_SHIFT_lpi_1_dfm = 1'b0;
    exit_ACC1_lpi_1_dfm = 1'b0;
    regs_operator_din_lpi_1_dfm = 90'b0;
    b_2_lpi_1_dfm = 16'b0;
    b_1_lpi_1_dfm = 16'b0;
    b_0_lpi_1_dfm = 16'b0;
    g_2_lpi_1_dfm = 16'b0;
    g_1_lpi_1_dfm = 16'b0;
    g_0_lpi_1_dfm = 16'b0;
    r_2_lpi_1_dfm = 16'b0;
    r_1_lpi_1_dfm = 16'b0;
    r_0_lpi_1_dfm = 16'b0;
    blue_lpi_1_dfm = 16'b0;
    green_lpi_1_dfm = 16'b0;
    red_lpi_1_dfm = 16'b0;
    regs_operator_din_sva = 90'b0;
    exit_ACC2_sva = 1'b0;
    regs_regs_0_sva = 90'b0;
    i_4_lpi_1 = 2'b0;
    i_3_lpi_1 = 2'b0;
    exit_SHIFT_lpi_1 = 1'b0;
    exit_ACC1_lpi_1 = 1'b0;
    r_2_lpi_1 = 16'b0;
    r_0_lpi_1 = 16'b0;
    r_1_lpi_1 = 16'b0;
    g_2_lpi_1 = 16'b0;
    g_0_lpi_1 = 16'b0;
    g_1_lpi_1 = 16'b0;
    b_2_lpi_1 = 16'b0;
    b_0_lpi_1 = 16'b0;
    b_1_lpi_1 = 16'b0;
    blue_lpi_1 = 16'b0;
    green_lpi_1 = 16'b0;
    red_lpi_1 = 16'b0;
    vout_rsc_mgc_out_stdreg_d <= 30'b0;
  end


  function [15:0] signext_16_1;
    input [0:0] vector;
  begin
    signext_16_1= {{15{vector[0]}}, vector};
  end
  endfunction


  function [89:0] MUX_v_90_2_2;
    input [179:0] inputs;
    input [0:0] sel;
    reg [89:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[179:90];
      end
      1'b1 : begin
        result = inputs[89:0];
      end
      default : begin
        result = inputs[179:90];
      end
    endcase
    MUX_v_90_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_4_2;
    input [63:0] inputs;
    input [1:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      2'b00 : begin
        result = inputs[63:48];
      end
      2'b01 : begin
        result = inputs[47:32];
      end
      2'b10 : begin
        result = inputs[31:16];
      end
      2'b11 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[63:48];
      end
    endcase
    MUX_v_16_4_2 = result;
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_7_1_6;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 6;
    readslicef_7_1_6 = tmp[0:0];
  end
  endfunction


  function [15:0] MUX1HOT_v_16_3_2;
    input [47:0] inputs;
    input [2:0] sel;
    reg [15:0] result;
    integer i;
  begin
    result = inputs[0+:16] & {16{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*16+:16] & {16{sel[i]}});
    MUX1HOT_v_16_3_2 = result;
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [9:0] signext_10_6;
    input [5:0] vector;
  begin
    signext_10_6= {{4{vector[5]}}, vector};
  end
  endfunction


  function [4:0] signext_5_1;
    input [0:0] vector;
  begin
    signext_5_1= {{4{vector[0]}}, vector};
  end
  endfunction


  function [15:0] readslicef_17_16_1;
    input [16:0] vector;
    reg [16:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_17_16_1 = tmp[15:0];
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [59:0] MUX_v_60_2_2;
    input [119:0] inputs;
    input [0:0] sel;
    reg [59:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[119:60];
      end
      1'b1 : begin
        result = inputs[59:0];
      end
      default : begin
        result = inputs[119:60];
      end
    endcase
    MUX_v_60_2_2 = result;
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [15:0] MUX_v_16_2_2;
    input [31:0] inputs;
    input [0:0] sel;
    reg [15:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[31:16];
      end
      1'b1 : begin
        result = inputs[15:0];
      end
      default : begin
        result = inputs[31:16];
      end
    endcase
    MUX_v_16_2_2 = result;
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function  [15:0] conv_u2u_15_16 ;
    input [14:0]  vector ;
  begin
    conv_u2u_15_16 = {1'b0, vector};
  end
  endfunction


  function signed [16:0] conv_s2s_12_17 ;
    input signed [11:0]  vector ;
  begin
    conv_s2s_12_17 = {{5{vector[11]}}, vector};
  end
  endfunction


  function signed [15:0] conv_u2s_13_16 ;
    input [12:0]  vector ;
  begin
    conv_u2s_13_16 = {{3{1'b0}}, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_8_11 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_11 = {{3{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    sharpen1
//  Generated from file(s):
//    3) $PROJECT_HOME/catapult_proj/vga_blur/sharpen.c
// ------------------------------------------------------------------


module sharpen1 (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [89:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [89:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(90)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  sharpen1_core sharpen1_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



